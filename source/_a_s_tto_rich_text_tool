Class
insertCommentIntervals!
1409106!
private!
1! !
#categories!
node traversal!
private!
private - initialization!
builders!
accessing! !
primitiveNode:!
1405077!
node traversal!
0DeltaPrimitiveNode:! !
insertSelectorAndCodeIntervals!
1409425!
private!
1! !
commentBuilder!
1413409!
builders!
0[Character,^E]! !
temporaryNode:!
1405811!
node traversal!
0DeltaTemporary:! !
returnStatNode:!
1405452!
node traversal!
0DeltaReturnStat:! !
typeexpressionBuilder!
1415076!
builders!
0[Character,^E]! !
assignmentNode:!
1397913!
node traversal!
0DeltaAssignment:! !
codeBuilder!
1413020!
builders!
0[Character,^E]! !
parseTree:!
1416268!
accessing!
0ParseTree[ASTNode]:! !
selectorBuilder!
1414667!
builders!
0[Character,^E]! !
addToResultCheckOverlap:!
1406352!
private!
1Tuple[[Character,^E],Tuple[Int,Int]]:! !
#typeArgumentString!
E ! !
literalNode:!
1400438!
node traversal!
0DeltaLiteral:! !
#branded!
true! !
currentParseTree:!
1407479!
private!
1ParseTree[ASTNode]:! !
defaultBuilder!
1413813!
builders!
0[Character,^E]! !
classVarNode:!
1398487!
node traversal!
0DeltaInstVar:! !
inferenceclauseBuilder:!
1414485!
builders!
0[Character,^E]:! !
result:!
1411043!
private!
1SeqCltn[Tuple[[Character,^E],Tuple[Int,Int]]]:! !
#revision!
$Revision: 1.8 $! !
addToResult:!
1406090!
private!
1Tuple[[Character,^E],Tuple[Int,Int]]:! !
selectorBuilder:!
1414908!
builders!
0[Character,^E]:! !
currentParseTree!
1407311!
private!
1ParseTree[ASTNode]! !
methodNode:!
1401159!
node traversal!
0DeltaMethod:! !
parseTrees!
1416484!
accessing!
0Cltn[ParseTree[ASTNode]]! !
blockNode:!
1398093!
node traversal!
0DeltaBlock:Self! !
dllCallNode:!
1399007!
node traversal!
0DeltaDLLCall:! !
methodDeclNode:!
1400977!
node traversal!
0DeltaMethod:! !
messageNode:!
1400585!
node traversal!
0DeltaMessage:! !
#comment!
Tool generating information for printing sources with rich text.

The tool generates a sequencable collection of elements of type E.
The generated collection will have the same size as the source.
E is the type of the rich text used for each character, e.g. Glyph.

The elements in the resulting collection are built by the 5 builders:

	selectorBuilder <[Character,^E]>
	typeexpressionBuilder <[Character,^E]>
	inferenceclauseBuilder <[Character,^E]>
	codeBuilder <[Character,^E]>
	commentBuilder <[Character,^E]>

The tool has to be parameterized with these 5 builder blocks. 
It is also possible to set a default builder block

	defaultBuilder <[Str, ^E]>
	
which will be used if one of the above mentioned are not specified.
 (c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.! !
polyMsgSignatureNode:!
1404154!
node traversal!
0PolyMsgSignature:! !
inferenceclauseBuilder!
1414223!
builders!
0[Character,^E]! !
result!
1410868!
private!
1SeqCltn[Tuple[[Character,^E],Tuple[Int,Int]]]! !
normalSendNode:!
1402418!
node traversal!
0DeltaSend:! !
findInferenceClauseIntervalFrom:!
1407654!
private!
1Tuple[Int,Int]:Tuple[Int,Int]! !
#group!
ast! !
findTypeExprIntervalFrom:!
1408605!
private!
1Tuple[Int,Int]:Tuple[Int,Int]! !
cascadedSendNode:!
1398273!
node traversal!
0DeltaCascadedSend:! !
typeexpressionBuilder:!
1415335!
builders!
0[Character,^E]:! !
compute!
1415516!
accessing!
0SeqCltn[E]! !
selectorEnd:!
1411483!
private!
1Int:! !
sortResult!
1411684!
private!
1! !
parameterNode:!
1402619!
node traversal!
0DeltaParameter:! !
codeBuilder:!
1413249!
builders!
0[Character,^E]:! !
#extensionsAreSubtypes!
true! !
codeBodyNode:!
1398658!
node traversal!
0DeltaCodeBody:! !
parseTrees:!
1416648!
accessing!
0Cltn[ParseTree[ASTNode]]:! !
guaranteedNode:!
1399687!
node traversal!
0DeltaGuaranteed:! !
superSendNode:!
1405634!
node traversal!
0DeltaSuperSend:! !
#superclassTypeString!
DeltaASTTool! !
source!
1412058!
private!
1Str! !
commentBuilder:!
1413647!
builders!
0[Character,^E]:! !
#isGeneric!
true! !
#instanceVariableString!
result <SeqCltn[Tuple[[Character,^E],Tuple[Int,Int]]]>
parseTrees <Cltn[ParseTree[ASTNode]]>
currentParseTree <ParseTree[ASTNode]>
selectorEnd <Int>
selectorBuilder <[Character,^E]>
codeBuilder <[Character,^E]>
commentBuilder <[Character,^E]>
typeexpressionBuilder <[Character,^E]>
inferenceclauseBuilder <[Character,^E]>
defaultBuilder <[Character,^E]>
! !
refNode:!
1405312!
node traversal!
0DeltaRef:! !
genericApplicationExpressionNode:!
1399180!
node traversal!
0DeltaGenericApplicationExpression:! !
initialize!
1412766!
private - initialization!
1! !
findReturnTypeExprIntervalFrom:!
1408162!
private!
1Tuple[Int,Int]:Tuple[Int,Int]! !
defaultBuilder:!
1414057!
builders!
0[Character,^E]:! !
messagePatternNode:!
1400793!
node traversal!
0MessagePattern:! !
#subtype!
true! !
instVarNode:!
1400267!
node traversal!
0DeltaInstVar:! !
#abstract!
false! !
varNode:!
1412213!
private!
1DeltaVar:! !
selectorEnd!
1411223!
private!
1Int! !
msgSignatureNode:!
1401361!
node traversal!
0DeltaMsgSignature:! !
