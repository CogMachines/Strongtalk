Class
shallowCopyTenured!
3878637!
private!
1Instance! !
#categories!
accessing!
testing!
private!
performing!
reflective!
utility!
private-reflective!
printing!
private-error handling!
fake brands!
copying!
dependencies!
private-initialization!
file out!
bootstrap-temporary!
private-system testing!
private- file out!
Camp Smalltalk! !
fileOutOn:!
7612630!
private- file out!
1Dumper:! !
identityHash!
5975242!
accessing!
0Integer! !
vmPrint!
3889891!
printing!
0! !
#extensionsAreSubtypes!
true! !
deltaHack!
3895359!
bootstrap-temporary!
0! !
isSmallInteger!
3897113!
bootstrap-temporary!
0Boolean! !
fileOutSize!
3895199!
file out!
0Integer! !
shouldNotHappen!
33008121!
private-error handling!
1BottomType! !
isCollection!
3896265!
bootstrap-temporary!
0Boolean! !
update:!
3892946!
dependencies!
0Object:! !
isSymbol!
3897491!
bootstrap-temporary!
0Boolean! !
fileOutHeaderSize!
3894378!
file out!
0Integer! !
fileOutInstVarAt:!
5967812!
file out!
0Integer:Object! !
printString!
3889559!
printing!
0Str! !
hash!
3874672!
accessing!
0Int! !
isOop!
3896961!
bootstrap-temporary!
0Boolean! !
become:!
31267698!
private-reflective!
1BottomType:! !
update:with:!
3893074!
dependencies!
0Object:Object:! !
isNil!
3875760!
testing!
0Boolean! !
postCopy!
3877831!
private!
1! !
,,!
3886537!
utility!
4Y def:VarTuple[X,Y]! !
#revision!
$Revision: 1.18 $! !
addDependent:!
3892374!
dependencies!
0Object:! !
printValue!
3897831!
bootstrap-temporary!
0! !
respondsTo:!
3885934!
reflective!
0Symbol:Boolean! !
#branded!
true! !
isKindOf:!
3885035!
reflective!
0Behavior:Boolean! !
copy!
3891805!
copying!
0Instance! !
isPoint!
3875988!
testing!
0Boolean! !
notNil!
3876196!
testing!
0Boolean! !
#comment!
This is the class implementing behavior common to all objects.

Subclass responsibilities:
    %responsibility copying
        Any class with instance variables whose values should not be shared between copies of an instance should
        override #postCopy to copy them as necessary, as well as sending "super postCopy".   Classes whose instances
        are immutable and can be shared can override #copy to return self.
    %responsibility hash
        If you override the #= method, you must override the #hash method if necessary
            to ensure that all objects that are = have hash values that are = too.  For example,
        if you override #= in class YourPoint to test that both x and y are the same, you
        must override #hash to do something like: (^self x hash bitXor: self y hash), so
        that the hash value depends upon the hash values of all the values you are
        comparing.

Tags: %BlueBook %User

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license
! !
perform:withArguments:!
5966717!
performing!
0Symbol:SeqCltn[Object]:Object! !
doesNotUnderstand:!
33007447!
private-error handling!
1Message:BottomType! !
isAssociationOop!
3895542!
bootstrap-temporary!
0Boolean! !
Number!
3891558!
fake brands!
0Boolean! !
removeDependent:!
3892719!
dependencies!
0Object:! !
isError!
3896454!
bootstrap-temporary!
0Boolean! !
vmHalt!
33969259!
private-error handling!
1! !
Str!
3891685!
fake brands!
0Boolean! !
#subtype!
true! !
articleFor:!
3876607!
private!
1Str:Str! !
yourself!
3887611!
utility!
0Self! !
#group!
base! !
test:is:!
3887341!
utility!
0Int:[^Boolean]:! !
~~!
3886242!
reflective!
0Object:Boolean! !
unimplemented!
33008974!
private-error handling!
1BottomType! !
isCharacter!
3896086!
bootstrap-temporary!
0Boolean! !
->!
3887019!
utility!
4Y def:VarAssoc[X,Y]! !
actualClass!
3888157!
private-reflective!
1Self class! !
print!
3889125!
printing!
0! !
perform:with:!
3879763!
performing!
0Symbol:BottomType:Object! !
isSymbolOop!
3897664!
bootstrap-temporary!
0Boolean! !
perform:with:with:!
3880631!
performing!
0Symbol:BottomType:BottomType:Object! !
~=!
3876410!
testing!
0Object:Boolean! !
isMemberOf:!
3885759!
reflective!
0Behavior:Boolean! !
perform:with:with:with:!
3881539!
performing!
0Symbol:BottomType:BottomType:BottomType:Object! !
shouldNotImplement!
33008299!
private-error handling!
1BottomType! !
inProduction!
3898002!
private-system testing!
1Boolean! !
shallowCopy!
3878133!
private!
1Instance! !
error:!
33007717!
private-error handling!
1Str:BottomType! !
isMethodOop!
3896785!
bootstrap-temporary!
0Boolean! !
isInteger!
3896610!
bootstrap-temporary!
0Boolean! !
isString!
3897297!
bootstrap-temporary!
0Boolean! !
perform:!
3878930!
performing!
0BottomType:Object! !
sunitChanged:with:!
33929955!
Camp Smalltalk!
0::! !
=!
3875201!
testing!
0Object:Boolean! !
sunitChanged:!
30867359!
Camp Smalltalk!
0:! !
==!
3883376!
reflective!
0Object:Boolean! !
sunitRemoveDependent:!
30867514!
Camp Smalltalk!
0:! !
printOn:!
3889295!
printing!
0CharOutputStream:! !
initialize!
3893256!
private-initialization!
1! !
sunitAddDependent:!
30867194!
Camp Smalltalk!
0:! !
class!
3883626!
reflective!
0Object class! !
assert:!
3876795!
private!
1[^Boolean]:! !
fileOutHeaderOn:!
3894138!
file out!
0Dumper:! !
fileOutBodyOn:!
3893754!
file out!
0Dumper:! !
species!
3886097!
reflective!
0Object class! !
#abstract!
false! !
fileOutSignature!
3895065!
file out!
0Integer! !
isBoolean!
3895911!
bootstrap-temporary!
0Boolean! !
halt!
33007941!
private-error handling!
1! !
isBehavior!
3895734!
bootstrap-temporary!
0Boolean! !
subclassResponsibility!
33008535!
private-error handling!
1BottomType! !
