Class
#categories!
unclassified! !
wrapperBlock!
86179834!
unclassified!
0! !
parser:!
86179988!
unclassified!
0:! !
#superclassTypeString!
NewspeakObject! !
#group!
newspeak! !
CombinatorialParsing_WrappingParser_1_init!
86180155!
unclassified!
0! !
CombinatorialParsing_WrappingParser_superInit_new!
86181456!
unclassified!
0! !
#comment!
Used to transform the output of another parser. A wrapping parser accepts exactly the same input as the wrapped
parser does, and performs the same error handling. The only differenceis that it takes the output of the wrapped
parser and passes it on to a wrapper block which uses it to produce a new result, which is the output of the wrapping
parser. A typical use is to build nodes of an abstract syntax tree.

The output type of the wrapped parser, S, is also the input to the wrapper. The output type of the wrapper is the output of this 
(the wrapping) parser.! !
#revision!
$Revision: 0.0 $! !
wrapperBlock:!
86180383!
unclassified!
0:! !
#classVariableString!
MixinMetadata_CombinatorialParsing_WrappingParser EnclosingObjects_CombinatorialParsing_WrappingParser! !
#instanceVariableString!
 wrapperBlock parser! !
parser!
86180828!
unclassified!
0! !
parse:inContext:ifError:!
86180970!
unclassified!
0:::! !
wrapParser:withWrapper:!
86181238!
unclassified!
0::! !
new!
86180574!
unclassified!
0! !
