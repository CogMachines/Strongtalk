Class
forwardReferenceTable!
84882273!
unclassified!
0! !
#categories!
unclassified! !
bindForwardReferences!
84882828!
unclassified!
0! !
#superclassTypeString!
NewspeakObject! !
#group!
newspeak! !
#revision!
$Revision: 0.0 $! !
setupForwardReferences!
84883734!
unclassified!
0! !
#classVariableString!
MixinMetadata_BlocklessCombinatorialParsing_ExecutableGrammar EnclosingObjects_BlocklessCombinatorialParsing_ExecutableGrammar! !
#instanceVariableString!
 forwardReferenceTable selfMirror! !
finalBindForwardReferences!
84882457!
unclassified!
0! !
BlocklessCombinatorialParsing_ExecutableGrammar_superInit_new!
84884578!
unclassified!
0! !
new!
84885001!
unclassified!
0! !
selfMirror!
84883118!
unclassified!
0! !
BlocklessCombinatorialParsing_ExecutableGrammar_1_init!
84883280!
unclassified!
0! !
#comment!
This class is intended to implement Parser
Combinators. A ExecutableGrammar[T]
returns a value of type T after successful
parsing.

The class is abstract. It does not implement
 the parsing routine parse:ifError: .
 
If parsing fails, parse:ifError: should call the error handling block
passed to it.

Concrete subclasses should implement specific grammars.

Parsing is initiated by calling parse:ifError:. This routine takes a ReadStream[Object] as input.
If parsing fails, it is the caller''s responsibility to set the input stream back to its original position
(Q: is this a good idea?).
If an error occurs, the error block passed in is called.! !
forwardReferenceTable:!
84884339!
unclassified!
0:! !
selfMirror:!
84884806!
unclassified!
0:! !
