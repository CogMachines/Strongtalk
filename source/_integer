Class
#categories!
comparison!
operations!
converting!
accessing!
restricted-double dispatching!
bit operations!
truncation and rounding!
iteration!
printing!
private!
constants!
benchmarking!
restricted-to large integers!
mathematical functions!
proxy operations!
restricted-to integers!
private-proxy double dispatching! !
factorial!
4333498!
mathematical functions!
0Int! !
printHexOn:!
4331268!
printing!
0CharOutputStream:! !
identityHash!
4324280!
accessing!
0Int! !
hexDigitAt:!
4323968!
accessing!
0Int:Character! !
negated!
4324409!
accessing!
0Int! !
zero!
4332497!
constants!
0Integer! !
#extensionsAreSubtypes!
true! !
printBareHexOn:!
4331005!
printing!
0CharOutputStream:! !
bitXor:!
4328514!
bit operations!
4X:Self|X! !
#group!
base! !
lessFromSmallInteger:!
4325719!
restricted-double dispatching!
0SmallInteger:Boolean! !
*!
4320358!
operations!
4Number:X! !
+!
4320638!
operations!
4Number:X! !
-!
4320908!
operations!
4Number:X! !
#branded!
true! !
/!
4321188!
operations!
4Number:X! !
externalBitAnd:!
4333950!
proxy operations!
0ExternalData:ExternalData! !
multiplyFromSmallInteger:!
4326600!
restricted-double dispatching!
0SmallInteger:Integer! !
to:do:!
4330067!
iteration!
0Int:[Int]:Object! !
hash!
4323847!
accessing!
0Int! !
to:intervals:do:!
5981481!
iteration!
0Int:Int:[Int]:Object! !
bitAt:!
5981953!
bit operations!
0Int:Int! !
numerator!
4324545!
accessing!
0Integer! !
#revision!
$Revision: 1.11 $! !
asLargeInteger!
4333004!
restricted-to large integers!
0LargeInteger! !
//!
4321464!
operations!
0Number:Int! !
rawBitShift:!
4329011!
bit operations!
0Int:Int! !
bitAnd:!
4327595!
bit operations!
4X:Self|X! !
to:by:do:!
4329695!
iteration!
0Int:Int:[Int]:Object! !
ceiling!
4322353!
operations!
0Int! !
unit!
5980907!
constants!
0Integer! !
#comment!
%notes:
    - This class implements generalized algorithms that handle both large and small integers.
    -  >,>=,<= are not implemented here for generalized integers; the Magnitude versions
          are fine.  SmallInteger implements its own for efficiency.
    * When the generalized algorithms are written, they should be designed to coerce either or
          both of receiver and argument to largeinteger format if they are smallintegers, because
         the overflow/underflow code in SmallInteger depends on that.

Tags: %BlueBook %User

(c) 1995-1997 Sun Microsystems, Inc. ALL RIGHTS RESERVED. 
Use and distribution of this software is subject to the terms of the attached source license.
! !
gcd:!
4322601!
operations!
0Integer:Integer! !
printOn:radix:!
4331619!
printing!
0CharOutputStream:Int:! !
lessFromInteger:!
4325531!
restricted-double dispatching!
0Integer:Boolean! !
moduloFromInteger:!
5980440!
restricted-double dispatching!
0Integer:Integer! !
@=!
4319706!
comparison!
0ExternalData:Boolean! !
asInteger!
4323590!
converting!
0Integer! !
asExternalProxy!
4323287!
converting!
0ExternalProxy! !
nfib!
5982418!
mathematical functions!
0Int! !
hasBitsSet:!
4334634!
proxy operations!
0ExternalData:Boolean! !
addFromSmallInteger:!
4324880!
restricted-double dispatching!
0SmallInteger:Integer! !
bitAndFromSmallInteger:!
5991143!
private-proxy double dispatching!
1SmallInteger:ExternalData! !
highBit!
4328697!
bit operations!
0SmallInt! !
subtractFromSmallInteger:!
4327031!
restricted-double dispatching!
0SmallInteger:Integer! !
addFromInteger:!
4324693!
restricted-double dispatching!
0Integer:Integer! !
subtractFromInteger:!
4326839!
restricted-double dispatching!
0Integer:Integer! !
allMask:!
4327255!
bit operations!
0Integer:Boolean! !
anyMask:!
4327426!
bit operations!
0Integer:Boolean! !
printBareHexDigits:on:!
5982954!
printing!
0Int:CharOutputStream:! !
sumTo:!
5982199!
benchmarking!
0Int:Int! !
externalBitOr:!
4334292!
proxy operations!
0ExternalData:ExternalData! !
equalFromInteger:!
4325109!
restricted-double dispatching!
0Integer:Boolean! !
bitOr:!
4328176!
bit operations!
4X:Self|X! !
abs!
4322167!
operations!
0Integer! !
truncated!
4323160!
operations!
0Int! !
bitShift:!
4328358!
bit operations!
0Int:Int! !
\\!
4321890!
operations!
4Number:X! !
bitInvert!
4328040!
bit operations!
0Int! !
denominator!
4323720!
accessing!
0Integer! !
#superclassTypeString!
RationalNumber! !
<!
4319239!
comparison!
0Number:Boolean! !
=!
5984001!
comparison!
0Object:Boolean! !
@~=!
4320083!
comparison!
0ExternalData:Boolean! !
printOn:!
4331455!
printing!
0CharOutputStream:! !
equalFromSmallInteger:!
4325298!
restricted-double dispatching!
0SmallInteger:Boolean! !
noMask:!
4328844!
bit operations!
0Integer:Boolean! !
moduloFromSmallInteger:!
4326189!
restricted-double dispatching!
0SmallInteger:Integer! !
timesRepeat:!
4329512!
iteration!
0[]:Object! !
recurse!
4332622!
benchmarking!
0! !
asFloat!
4323452!
converting!
0Float! !
floor!
4322478!
operations!
0Int! !
#subtype!
true! !
multiplyFromInteger:!
4326408!
restricted-double dispatching!
0Integer:Integer! !
benchFib!
33713777!
benchmarking!
0! !
#abstract!
true! !
printNonNegativeOn:radix:!
5979986!
restricted-to integers!
0CharOutputStream:Int:! !
rounded!
4329388!
truncation and rounding!
0Int! !
bitOrFromSmallInteger:!
5990951!
private-proxy double dispatching!
1SmallInteger:Int! !
