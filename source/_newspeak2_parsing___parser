Class
#categories!
unclassified! !
superclassClause!
86550034!
unclassified!
0! !
hereNode!
86523155!
unclassified!
0! !
unaryExpression!
86523390!
unclassified!
0! !
exponent!
86523778!
unclassified!
0! !
charsToString:!
86524060!
unclassified!
0:! !
new!
86524256!
unclassified!
0! !
type!
86524474!
unclassified!
0! !
blockParameters!
86524705!
unclassified!
0! !
defaultConstructorSelector!
86524985!
unclassified!
0! !
moduleDeclaration!
86525142!
unclassified!
0! !
compilationUnit!
86525289!
unclassified!
0! !
tuple!
86525486!
unclassified!
0! !
classComment!
86525774!
unclassified!
0! !
binaryMsgPattern!
86526020!
unclassified!
0! !
classDeclaration!
86526477!
unclassified!
0! !
nonEmptyBlockTypeArgList!
86527255!
unclassified!
0! !
unarySelector!
86527753!
unclassified!
0! !
sideDecl!
86528132!
unclassified!
0! !
radixNum!
86528555!
unclassified!
0! !
slotDecl!
86529630!
unclassified!
0! !
symbol!
86530010!
unclassified!
0! !
typePrimary!
86530294!
unclassified!
0! !
category!
86530811!
unclassified!
0! !
blockReturnType!
86531209!
unclassified!
0! !
#revision!
$Revision: 0.0 $! !
classHeader!
86531402!
unclassified!
0! !
#classVariableString!
MixinMetadata_Newspeak2Parsing_Parser EnclosingObjects_Newspeak2Parsing_Parser! !
number!
86532474!
unclassified!
0! !
blockType!
86532749!
unclassified!
0! !
cascadedMessageExpression!
86533153!
unclassified!
0! !
block!
86534015!
unclassified!
0! !
sendMessages:to:!
86538638!
unclassified!
0::! !
computeFraction:!
86534680!
unclassified!
0:! !
toplevelClass!
86534947!
unclassified!
0! !
returnStatement!
86535226!
unclassified!
0! !
#comment!
Parser for Newsqueak2. Produces a Newsqueak AST. This tree represents syntax only. No attribution information such as scopes/symbol tables, types etc. is present in the tree. The tree  only gives its structure and the source code positions of the nodes.

The parser works by overridding the accessors for most grammar productions in its superclasses. The superclass methods deal with the grammar alone; each production defines a parser that will parse the syntax and return the corresponding set of tokens. The methods here process the output of the superclass methods to yield parsers that will construct ASTs. Hence, the typical method for a production foo is something like

foo

^super foo wrapper:[:w :x :y :z | FooAST new from: x and: y; start: w start; end: z end]

This example assumes that the semantic content of foo is given by x and y. Typically, x and y will be the results of  productions that have also been overridden, to provide  ASTs that will be subtrees of the Foo node. In contarst, w and z are likely to be tokens used in the concrete syntax to delimit the Foo construct. They may (or may not) be used to extract source code position information, and then discarded.! !
typeExpr!
86549582!
unclassified!
0! !
keywordMessages!
86522849!
unclassified!
0! !
cascadeMsg!
86536890!
unclassified!
0! !
nontrivialBinaryMessages!
86537076!
unclassified!
0! !
hereSendFromMsg:!
86544256!
unclassified!
0:! !
classDefinition!
86537819!
unclassified!
0! !
methodDecl!
86537981!
unclassified!
0! !
defaultConstructorCall!
86538361!
unclassified!
0! !
#group!
newspeak! !
string!
86553239!
unclassified!
0! !
unaryMsgPattern!
86538955!
unclassified!
0! !
slotName!
86539352!
unclassified!
0! !
keywordMsg!
86539972!
unclassified!
0! !
classSideDecl!
86540492!
unclassified!
0! !
mixinApplicationOf:on:!
86540879!
unclassified!
0::! !
tupleType!
86541802!
unclassified!
0! !
defaultSuperCallAt:ending:!
86542204!
unclassified!
0::! !
typeArguments!
86542697!
unclassified!
0! !
method!
86542955!
unclassified!
0! !
slotDef!
86543310!
unclassified!
0! !
parenthesizedTypeExpression!
86551582!
unclassified!
0! !
slotDecls!
86544536!
unclassified!
0! !
symbolConstant!
86544827!
unclassified!
0! !
blockParameter!
86545031!
unclassified!
0! !
defaultConstructorPattern!
86545248!
unclassified!
0! !
moduleBody!
86545545!
unclassified!
0! !
furtherStatements!
86545685!
unclassified!
0! !
blockTypeArgList!
86545888!
unclassified!
0! !
newBlockTypeArgList!
86546304!
unclassified!
0! !
keywordMsgPattern!
86546724!
unclassified!
0! !
#superclassTypeString!
NewspeakObject! !
fraction!
86534473!
unclassified!
0! !
binaryExpression!
86547746!
unclassified!
0! !
keywordExpression!
86548229!
unclassified!
0! !
messagePattern!
86548586!
unclassified!
0! !
Newspeak2Parsing_Parser_superInit_new!
86548936!
unclassified!
0! !
computeDigits:!
86549116!
unclassified!
0:! !
nestedClassDecl!
86549388!
unclassified!
0! !
characterConstant!
86535620!
unclassified!
0! !
codeBody!
86535920!
unclassified!
0! !
binaryMsg!
86550532!
unclassified!
0! !
expression!
86550941!
unclassified!
0! !
typeTerm!
86537437!
unclassified!
0! !
Newspeak2Parsing_Parser_1_init!
86551859!
unclassified!
0! !
radix!
86552019!
unclassified!
0! !
returnType!
86552223!
unclassified!
0! !
parse:inContext:ifError:!
86552435!
unclassified!
0:::! !
statementSequence!
86552800!
unclassified!
0! !
decimalNum!
86547322!
unclassified!
0! !
extendedFraction!
86553514!
unclassified!
0! !
parenthesizedExpression!
86553714!
unclassified!
0! !
keywordHereSend!
86553976!
unclassified!
0! !
pseudoVariableNode:!
86554186!
unclassified!
0:! !
