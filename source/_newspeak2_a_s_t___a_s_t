Class
#categories!
unclassified! !
isCascadedSendNode!
86376207!
unclassified!
0! !
concStart!
86376477!
unclassified!
0! !
#group!
newspeak! !
endPosition:!
86371413!
unclassified!
0:! !
end!
86371581!
unclassified!
0! !
#classVariableString!
MixinMetadata_Newspeak2AST_AST EnclosingObjects_Newspeak2AST_AST! !
Newspeak2AST_AST_superInit_new!
86371720!
unclassified!
0! !
new!
86371886!
unclassified!
0! !
isMethodNode!
86372083!
unclassified!
0! !
isCodeBodyNode!
86372218!
unclassified!
0! !
left:!
86372355!
unclassified!
0:! !
isStringNode!
86372651!
unclassified!
0! !
isAssignmentNode!
86372786!
unclassified!
0! !
concreteStart!
86375993!
unclassified!
0! !
startPosition!
86372925!
unclassified!
0! !
isSymbolNode!
86373062!
unclassified!
0! !
right:!
86373197!
unclassified!
0:! !
isTupleNode!
86373484!
unclassified!
0! !
isExpressionNode!
86373618!
unclassified!
0! !
concEnd!
86371288!
unclassified!
0! !
Newspeak2AST_AST_1_init!
86373914!
unclassified!
0! !
isMessagePatternNode!
86374148!
unclassified!
0! !
#superclassTypeString!
NewspeakObject! !
concreteStart:!
86374428!
unclassified!
0:! !
isBlockNode!
86374589!
unclassified!
0! !
#revision!
$Revision: 0.0 $! !
isCharNode!
86374723!
unclassified!
0! !
isLiteralNode!
86374856!
unclassified!
0! !
start!
86374992!
unclassified!
0! !
#instanceVariableString!
 concStart concEnd endPosition startPosition! !
apply:!
86375135!
unclassified!
0:! !
concreteEnd:!
86373757!
unclassified!
0:! !
isClassNode!
86375427!
unclassified!
0! !
isVariableNode!
86374291!
unclassified!
0! !
isMessageNode!
86375561!
unclassified!
0! !
isReturnStatNode!
86375697!
unclassified!
0! !
start:!
86375836!
unclassified!
0:! !
concStart:!
86370975!
unclassified!
0:! !
end:!
86371135!
unclassified!
0:! !
isLeaf!
86376348!
unclassified!
0! !
#comment!
An abstract syntax tree. An AST knows where in the source code the corresponding construct is.  The slots start and end are indices into the source code marking that position.

In some cases, the corresponding construct may be associated with tokens that are not strictly part of the abstract syntax. For example, in

 (foo) 

the parentheses are not part of the abstract syntax but foo is. Nonetheless, it may be useful to know where the parens are, since they are strongly associated withthe AST. We use the slots concStart and concEnd for that purpose.! !
isArrayNode!
86375293!
unclassified!
0! !
endPosition!
86376606!
unclassified!
0! !
isSendNode!
86376739!
unclassified!
0! !
isNormalSendNode!
86376872!
unclassified!
0! !
concreteEnd!
86377011!
unclassified!
0! !
isAST!
86377217!
unclassified!
0! !
isNumberNode!
86377344!
unclassified!
0! !
isVarDeclNode!
86377479!
unclassified!
0! !
isSideNode!
86377615!
unclassified!
0! !
startPosition:!
86377748!
unclassified!
0:! !
concEnd:!
86377924!
unclassified!
0:! !
