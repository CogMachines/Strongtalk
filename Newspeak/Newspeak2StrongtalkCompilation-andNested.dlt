Delta define: #Newspeak2StrongtalkCompilation as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' ReturnStatAST SuperFalseVisitor SendAST LowLevelMirror Set Dictionary InstanceVariableMirror CascadedSendAST VariableAST Parser Newspeak2StrongtalkCompilation_SemanticNode_slot Newspeak2StrongtalkCompilation_Scope_slot MessageAST TupleAST VarDeclAST SystemMetadata FilePath Newspeak2StrongtalkCompilation_MethodMirror_slot Error Newspeak2StrongtalkCompilation_CompiledMixinMirror_slot MethodAST parser LowLevelMixinMirror Newspeak2StrongtalkCompilation_SymbolTableEntry_slot Class setterPool ASTTool SymbolAST AST CodeBodyAST WriteStream Transcript IdentityDictionary ASTCopier CharacterInputOutputConverter MessagePatternAST BlockAST astModule StringAST NumberAST AssignmentAST NormalSendAST getterPool OrderedCollection Collection Number Newspeak2StrongtalkCompilation_SemanticVarDecl_slot Newspeak2StrongtalkCompilation_SemanticMethod_slot Newspeak2StrongtalkCompilation_Compiler_slot')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation EnclosingObjects_Newspeak2StrongtalkCompilation')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation) methodsFor: 'unclassified'!
	WriteStream: WriteStream_val WriteStream := WriteStream_val! 
Class: Class_val Class := Class_val! 
IdentityDictionary: IdentityDictionary_val IdentityDictionary := IdentityDictionary_val! 
ReturnStatAST ^ReturnStatAST! 
getterPool ^getterPool! 
OrderedCollection ^OrderedCollection! 
Number ^Number! 
Set ^Set! 
Dictionary ^Dictionary! 
CascadedSendAST ^CascadedSendAST! 
Parser ^Parser! 
SymbolAST: SymbolAST_val SymbolAST := SymbolAST_val! 
  Newspeak2StrongtalkCompilation_superInit_usingPlatform: platform newspeakParser: ns2Parser mirrorLib: mirrors 

super  new.

^ self.



! 
MessageAST: MessageAST_val MessageAST := MessageAST_val! 
NormalSendAST: NormalSendAST_val NormalSendAST := NormalSendAST_val! 
SemanticMethod
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_SemanticMethod_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation 
			nestedMixins at: #Newspeak2StrongtalkCompilation_SemanticMethod.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation Mirror on: self  SemanticNode)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_SemanticMethod_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_SemanticMethod_slot! 
Error ^Error! 
MethodAST ^MethodAST! 
BlockAST: BlockAST_val BlockAST := BlockAST_val! 
parser ^parser! 
Dictionary: Dictionary_val Dictionary := Dictionary_val! 
  Newspeak2StrongtalkCompilation_1_init_usingPlatform: platform newspeakParser: ns2Parser mirrorLib: mirrors 

 self astModule: ns2Parser ASTModule.

 self Collection: platform Collections Collection.

 self Dictionary: platform Collections Dictionary.

 self IdentityDictionary: platform Collections IdentityDictionary.

 self OrderedCollection: platform Collections OrderedCollection.

 self Set: platform Collections Set.

 self WriteStream: platform Streams CharacterReadWriteStream.

 self Class: platform Kernel Class.

 self Error: platform Exceptions Error.

 self Number: platform Kernel Number.

 self FilePath: platform Files FilePath.

 self CharacterInputOutputConverter: platform Streams CharacterInputOutputConverter.

 self Parser: ns2Parser Parser.

 self ASTTool: self  astModule ASTTool.

 self ASTCopier: self  astModule ASTCopier.

 self SuperFalseVisitor: self  astModule FalseVisitor.

 self AST: self  astModule AST.

 self AssignmentAST: self  astModule AssignmentAST.

 self BlockAST: self  astModule BlockAST.

 self CascadedSendAST: self  astModule CascadedSendAST.

 self CodeBodyAST: self  astModule CodeBodyAST.

 self MessageAST: self  astModule MessageAST.

 self MessagePatternAST: self  astModule MessagePatternAST.

 self MethodAST: self  astModule MethodAST.

 self NormalSendAST: self  astModule NormalSendAST.

 self NumberAST: self  astModule NumberAST.

 self ReturnStatAST: self  astModule ReturnStatAST.

 self SendAST: self  astModule SendAST.

 self SymbolAST: self  astModule SymbolAST.

 self TupleAST: self  astModule TupleAST.

 self VarDeclAST: self  astModule VarDeclAST.

 self VariableAST: self  astModule VariableAST.

 self Transcript: platform Transcript.

 self SystemMetadata: mirrors SystemMetadata.

 self LowLevelMirror: mirrors LowLevelMirror.

 self LowLevelMixinMirror: mirrors LowLevelMixinMirror.

 self InstanceVariableMirror: mirrors InstanceVariableMirror.

 self parser: self  Parser new.

 self getterPool:( self Array new:256).

 self setterPool:( self Array new:256).

 self StringAST: self  astModule StringAST.

^ self.



! 
AssignmentAST: AssignmentAST_val AssignmentAST := AssignmentAST_val! 
ASTTool ^ASTTool! 
  usingPlatform: platform newspeakParser: ns2Parser mirrorLib: mirrors 

 self  Newspeak2StrongtalkCompilation_superInit_usingPlatform: platform newspeakParser: ns2Parser mirrorLib: mirrors.

 self  Newspeak2StrongtalkCompilation_1_init_usingPlatform: platform newspeakParser: ns2Parser mirrorLib: mirrors.

^ self.



! 
CodeBodyAST ^CodeBodyAST! 
Transcript ^Transcript! 
IdentityDictionary ^IdentityDictionary! 
Compiler
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_slot! 
setterPool ^setterPool! 
Scope
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Scope_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Scope.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Scope_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Scope_slot! 
MessagePatternAST ^MessagePatternAST! 
Set: Set_val Set := Set_val! 
setterPool: setterPool_val setterPool := setterPool_val! 
SymbolAST ^SymbolAST! 
astModule ^astModule! 
CharacterInputOutputConverter: CharacterInputOutputConverter_val CharacterInputOutputConverter := CharacterInputOutputConverter_val! 
StringAST: StringAST_val StringAST := StringAST_val! 
ASTCopier ^ASTCopier! 
MessageAST ^MessageAST! 
Collection ^Collection! 
SemanticVarDecl
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_SemanticVarDecl_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation 
			nestedMixins at: #Newspeak2StrongtalkCompilation_SemanticVarDecl.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation Mirror on: self  SymbolTableEntry)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_SemanticVarDecl_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_SemanticVarDecl_slot! 
OrderedCollection: OrderedCollection_val OrderedCollection := OrderedCollection_val! 
LowLevelMixinMirror: LowLevelMixinMirror_val LowLevelMixinMirror := LowLevelMixinMirror_val! 
ASTCopier: ASTCopier_val ASTCopier := ASTCopier_val! 
SuperFalseVisitor: SuperFalseVisitor_val SuperFalseVisitor := SuperFalseVisitor_val! 
SuperFalseVisitor ^SuperFalseVisitor! 
SendAST ^SendAST! 
LowLevelMirror ^LowLevelMirror! 
VarDeclAST ^VarDeclAST! 
InstanceVariableMirror ^InstanceVariableMirror! 
Error: Error_val Error := Error_val! 
VariableAST ^VariableAST! 
ASTTool: ASTTool_val ASTTool := ASTTool_val! 
FilePath ^FilePath! 
NumberAST: NumberAST_val NumberAST := NumberAST_val! 
TupleAST ^TupleAST! 
MethodMirror
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_MethodMirror_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation 
			nestedMixins at: #Newspeak2StrongtalkCompilation_MethodMirror.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation Mirror on: self  LowLevelMirror)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_MethodMirror_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_MethodMirror_slot! 
Number: Number_val Number := Number_val! 
SystemMetadata ^SystemMetadata! 
astModule: astModule_val astModule := astModule_val! 
AST ^AST! 
MessagePatternAST: MessagePatternAST_val MessagePatternAST := MessagePatternAST_val! 
VariableAST: VariableAST_val VariableAST := VariableAST_val! 
SystemMetadata: SystemMetadata_val SystemMetadata := SystemMetadata_val! 
LowLevelMixinMirror ^LowLevelMixinMirror! 
Collection: Collection_val Collection := Collection_val! 
InstanceVariableMirror: InstanceVariableMirror_val InstanceVariableMirror := InstanceVariableMirror_val! 
Class ^Class! 
FilePath: FilePath_val FilePath := FilePath_val! 
Parser: Parser_val Parser := Parser_val! 
MethodAST: MethodAST_val MethodAST := MethodAST_val! 
VarDeclAST: VarDeclAST_val VarDeclAST := VarDeclAST_val! 
CompiledMixinMirror
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_CompiledMixinMirror_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation 
			nestedMixins at: #Newspeak2StrongtalkCompilation_CompiledMixinMirror.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_CompiledMixinMirror_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_CompiledMixinMirror_slot! 
StringAST ^StringAST! 
WriteStream ^WriteStream! 
SendAST: SendAST_val SendAST := SendAST_val! 
SymbolTableEntry
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_SymbolTableEntry_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation 
			nestedMixins at: #Newspeak2StrongtalkCompilation_SymbolTableEntry.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_SymbolTableEntry_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_SymbolTableEntry_slot! 
AST: AST_val AST := AST_val! 
getterPool: getterPool_val getterPool := getterPool_val! 
LowLevelMirror: LowLevelMirror_val LowLevelMirror := LowLevelMirror_val! 
CodeBodyAST: CodeBodyAST_val CodeBodyAST := CodeBodyAST_val! 
ReturnStatAST: ReturnStatAST_val ReturnStatAST := ReturnStatAST_val! 
  encode: comment withoutDoubleQuotesOn: stream 

1  to: comment size do:[ : i | 

( comment at: i) =$"  ifTrue:[ 

 stream nextPut:$'; 

 nextPut:$'.

] ifFalse:[ 

 stream nextPut:( comment at: i).

].

].

^ self.



! 
CascadedSendAST: CascadedSendAST_val CascadedSendAST := CascadedSendAST_val! 
parser: parser_val parser := parser_val! 
Transcript: Transcript_val Transcript := Transcript_val! 
SemanticNode
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_SemanticNode_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation 
			nestedMixins at: #Newspeak2StrongtalkCompilation_SemanticNode.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_SemanticNode_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_SemanticNode_slot! 
AssignmentAST ^AssignmentAST! 
NormalSendAST ^NormalSendAST! 
CharacterInputOutputConverter ^CharacterInputOutputConverter! 
BlockAST ^BlockAST! 
TupleAST: TupleAST_val TupleAST := TupleAST_val! 
NumberAST ^NumberAST! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation := mmd !
	  usingPlatform: platform newspeakParser: ns2Parser mirrorLib: mirrors 

^ self basicNew  usingPlatform: platform newspeakParser: ns2Parser mirrorLib: mirrors.



! 
		 !
	Newspeak2StrongtalkCompilation enclosingObjects: (Array with: nil)!
		Newspeak2StrongtalkCompilation metadata enclosingMixin: nil !
		Newspeak2StrongtalkCompilation mixinMetadata: Newspeak2StrongtalkCompilation metadata !
		Delta define: #Newspeak2StrongtalkCompilation_SymbolTableEntry as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' data sym depth')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_SymbolTableEntry EnclosingObjects_Newspeak2StrongtalkCompilation_SymbolTableEntry')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_SymbolTableEntry) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_SymbolTableEntry) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_SymbolTableEntry) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_SymbolTableEntry) methodsFor: 'unclassified'!
	 isMethodNode 

^ self data isMethodNode.



! 
 isMessagePatternNode 

^ self data isMessagePatternNode.



! 
 for: datum 

 self Newspeak2StrongtalkCompilation_SymbolTableEntry_superInit_for: datum.

 self Newspeak2StrongtalkCompilation_SymbolTableEntry_1_init: datum.

^ self.



! 
data ^data! 
depth ^depth! 
depth: depth_val depth := depth_val! 
 Newspeak2StrongtalkCompilation_SymbolTableEntry_1_init: datum 

 self sym:nil.

 self data: datum first.

 self depth: datum last.

^ self.



! 
sym: sym_val sym := sym_val! 
 Newspeak2StrongtalkCompilation_SymbolTableEntry_superInit_for: datum 

super  new.

^ self.



! 
 isVarDeclNode 

^ self data isVarDeclNode.



! 
sym ^sym! 
data: data_val data := data_val! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_SymbolTableEntry) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_SymbolTableEntry := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_SymbolTableEntry := mmd !
	 for: datum 

^ self basicNew for: datum.



! 
		 !
	Newspeak2StrongtalkCompilation metadata addNestedClass: Newspeak2StrongtalkCompilation_SymbolTableEntry. ! 
	Newspeak2StrongtalkCompilation_SymbolTableEntry metadata enclosingMixin: Newspeak2StrongtalkCompilation !
	Delta define: #Newspeak2StrongtalkCompilation_Scope as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' superScope end bindings')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Scope EnclosingObjects_Newspeak2StrongtalkCompilation_Scope')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Scope) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Scope) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Scope) comment: 'A generic scope facility.

The text below describes the intended scheme for handling closures using the Cog VM''s closure support. It is not yet implemented.

To support efficient compilation of closures, each scope tracks how many temporary variables need to ''''remote''''. 

A remote temporary is one that is closed over by a nested closure, and cannot reliably be copied down into the closure upon closure creation.  Any temporary that might be written to after closure creation is necessarily remote.

Remote temps are allocated in an array rather than directly in their activation. All the remote temps in a given scope are alllocated in a single array, the remote temp vector. Each remote temp is uniquely identified by an index into th eremote temp vector.

Closures nested within the scope get a reference to the remote temp vector. They can and read and write a temporary by modifying the vector using the index associated with the temporary.

Typically, the first instruction in the code of a closure or method allocates the remote temp vector (if one is needed). This is supported by a special byte code, pushArray.

Reads and writes to a remote temp take the form of at: i and at: i put: v sends where i is the index of the remote temp and v is the value being written to it.

A temporary variable is considered remote iff:

a. It is written to in a closure nested within its defining method or closure.
b. It is read in in a closure c nested within its defining method or closure, and written to after the end of c.

'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Scope) methodsFor: 'unclassified'!
	bindings: bindings_val bindings := bindings_val! 
 Newspeak2StrongtalkCompilation_Scope_1_init 

 self superScope:nil.

 self bindings: (EnclosingObjects_Newspeak2StrongtalkCompilation_Scope at: 1)  IdentityDictionary new.

 self end:nil.

^ self.



! 
 within: scope 

 self superScope: scope.

^ self.



! 
superScope: superScope_val superScope := superScope_val! 
 removeKey: key 

 self bindings removeKey: key.

^ self.



! 
 at: key 

^ self  at: key ifAbsent:[ 

 self error:('Key ' , key ,' not found!!').

].



! 
 clear 

 self bindings keys do:[ : k | 

 self bindings removeKey: k.

].

^ self.



! 
 depth 

 self  superScope ifNil:[ 

^0.

].

^ self  superScope depth +1.



! 
  removeKey: key ifAbsent: blk 

 self bindings  removeKey: key ifAbsent: blk.

^ self.



! 
superScope ^superScope! 
 includesIndexLocally: key 

^ self bindings includesKey: key.



! 
 Newspeak2StrongtalkCompilation_Scope_superInit_new 

super  new.

^ self.



! 
end ^end! 
end: end_val end := end_val! 
  at: aKey put: aValue 

^ self bindings  at: aKey put: aValue.



! 
 new 

 self Newspeak2StrongtalkCompilation_Scope_superInit_new.

 self Newspeak2StrongtalkCompilation_Scope_1_init.

^ self.



! 
 includesIndex: key 

^ self bindings includesKey: key.



! 
  at: aKey put: aValue ifThere: aBlock 

|  wasAbsent |

 self  assert:[ 

 aKey isSymbol.

] message:[ 

'Attempt to ok up non-symbol ' , aKey printString ,' in scope'.

].

 wasAbsent :=false.

 self  bindings  at: aKey ifAbsent:[ 

 self  bindings  at: aKey put: aValue.

 wasAbsent :=true.

].

^ wasAbsent  ifTrue:[ 

 aValue.

] ifFalse:[ 

 aBlock value.

].



! 
  at: key ifAbsent: blk 

|  val |

( val := self bindings  at: key ifAbsent:[ 

nil.

]) notNil ifTrue:[ 

^ val.

].

 self superScope isNil ifTrue:[ 

^ blk value.

].

( val := self superScope  at: key ifAbsent:[ 

nil.

]) notNil ifTrue:[ 

^ val.

].

^ blk value.



! 
bindings ^bindings! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Scope) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Scope := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Scope := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation metadata addNestedClass: Newspeak2StrongtalkCompilation_Scope. ! 
	Newspeak2StrongtalkCompilation_Scope metadata enclosingMixin: Newspeak2StrongtalkCompilation !
	Delta define: #Newspeak2StrongtalkCompilation_SemanticVarDecl as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' remoteVector offset remote')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_SemanticVarDecl EnclosingObjects_Newspeak2StrongtalkCompilation_SemanticVarDecl')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticVarDecl) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticVarDecl) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticVarDecl) comment: 'Semantic info for a variable: slot, local or parameter.'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticVarDecl) methodsFor: 'unclassified'!
	remoteVector ^remoteVector! 
offset: offset_val offset := offset_val! 
  setIndex: i InVector: v 

 self  assert: self  remote message:'Var Decl is not remote'.

 self  remoteVector: v.

 self  offset: i.

^ self.



! 
 Newspeak2StrongtalkCompilation_SemanticVarDecl_superInit_decl: d 

super  for: d.

^ self.



! 
offset ^offset! 
remote ^remote! 
 decl: d 

 self Newspeak2StrongtalkCompilation_SemanticVarDecl_superInit_decl: d.

 self Newspeak2StrongtalkCompilation_SemanticVarDecl_1_init: d.

^ self.



! 
 Newspeak2StrongtalkCompilation_SemanticVarDecl_1_init: d 

 self offset:nil.

 self remote:false.

 self remoteVector:nil.

^ self.



! 
remoteVector: remoteVector_val remoteVector := remoteVector_val! 
remote: remote_val remote := remote_val! 
 isTemporaryAST 

^ self data isTemporaryAST.



! 
 variableClass 

^ self data variableClass.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticVarDecl) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_SemanticVarDecl := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_SemanticVarDecl := mmd !
	 decl: d 

^ self basicNew decl: d.



! 
		 !
	Newspeak2StrongtalkCompilation metadata addNestedClass: Newspeak2StrongtalkCompilation_SemanticVarDecl. ! 
	Newspeak2StrongtalkCompilation_SemanticVarDecl metadata enclosingMixin: Newspeak2StrongtalkCompilation !
	Delta define: #Newspeak2StrongtalkCompilation_CompiledMixinMirror as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' header language commentString lowLevelMirror')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_CompiledMixinMirror EnclosingObjects_Newspeak2StrongtalkCompilation_CompiledMixinMirror')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_CompiledMixinMirror) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_CompiledMixinMirror) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_CompiledMixinMirror) comment: 'Represents a compiled (but uninstalled) NS3 class declaration.'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_CompiledMixinMirror) methodsFor: 'unclassified'!
	lowLevelMirror ^lowLevelMirror! 
language: language_val language := language_val! 
header ^header! 
commentString: commentString_val commentString := commentString_val! 
  language: l header: h mirror: llm 

 self  Newspeak2StrongtalkCompilation_CompiledMixinMirror_superInit_language: l header: h mirror: llm.

 self  Newspeak2StrongtalkCompilation_CompiledMixinMirror_1_init_language: l header: h mirror: llm.

^ self.



! 
 comment 

 self  commentString ifNil:[ 

^#''.

].

^ self  commentString.



! 
header: header_val header := header_val! 
 category 

^ self  lowLevelMirror category.



! 
 comment: c 

 self  commentString: c.

^ self.



! 
language ^language! 
  Newspeak2StrongtalkCompilation_CompiledMixinMirror_1_init_language: l header: h mirror: llm 

 self language: l.

 self header: h.

 self lowLevelMirror: llm.

 self commentString:nil.

^ self.



! 
  Newspeak2StrongtalkCompilation_CompiledMixinMirror_superInit_language: l header: h mirror: llm 

super  new.

^ self.



! 
lowLevelMirror: lowLevelMirror_val lowLevelMirror := lowLevelMirror_val! 
commentString ^commentString! 
 name 

^ self  lowLevelMirror name.



! 
 category: c 

 self  lowLevelMirror category: c.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_CompiledMixinMirror) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_CompiledMixinMirror := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_CompiledMixinMirror := mmd !
	  language: l header: h mirror: llm 

^ self basicNew  language: l header: h mirror: llm.



! 
		 !
	Newspeak2StrongtalkCompilation metadata addNestedClass: Newspeak2StrongtalkCompilation_CompiledMixinMirror. ! 
	Newspeak2StrongtalkCompilation_CompiledMixinMirror metadata enclosingMixin: Newspeak2StrongtalkCompilation !
	Delta define: #Newspeak2StrongtalkCompilation_SemanticMethod as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' frameSize')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_SemanticMethod EnclosingObjects_Newspeak2StrongtalkCompilation_SemanticMethod')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticMethod) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticMethod) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticMethod) comment: 'Semantic info for a method declaration. Things like the frame size'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticMethod) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_SemanticMethod_1_init: d 

 self frameSize:nil.

^ self.



! 
frameSize ^frameSize! 
 decl: d 

 self Newspeak2StrongtalkCompilation_SemanticMethod_superInit_decl: d.

 self Newspeak2StrongtalkCompilation_SemanticMethod_1_init: d.

^ self.



! 
frameSize: frameSize_val frameSize := frameSize_val! 
 Newspeak2StrongtalkCompilation_SemanticMethod_superInit_decl: d 

super  onAST: d.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticMethod) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_SemanticMethod := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_SemanticMethod := mmd !
	 decl: d 

^ self basicNew decl: d.



! 
		 !
	Newspeak2StrongtalkCompilation metadata addNestedClass: Newspeak2StrongtalkCompilation_SemanticMethod. ! 
	Newspeak2StrongtalkCompilation_SemanticMethod metadata enclosingMixin: Newspeak2StrongtalkCompilation !
	Delta define: #Newspeak2StrongtalkCompilation_SemanticNode as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' tree')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_SemanticNode EnclosingObjects_Newspeak2StrongtalkCompilation_SemanticNode')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticNode) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticNode) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticNode) comment: 'Represents semantic information about a construct.'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticNode) methodsFor: 'unclassified'!
	tree: tree_val tree := tree_val! 
tree ^tree! 
 onAST: ast 

 self Newspeak2StrongtalkCompilation_SemanticNode_superInit_onAST: ast.

 self Newspeak2StrongtalkCompilation_SemanticNode_1_init: ast.

^ self.



! 
 Newspeak2StrongtalkCompilation_SemanticNode_superInit_onAST: ast 

super  new.

^ self.



! 
 Newspeak2StrongtalkCompilation_SemanticNode_1_init: ast 

 self tree: ast.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_SemanticNode) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_SemanticNode := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_SemanticNode := mmd !
	 onAST: ast 

^ self basicNew onAST: ast.



! 
		 !
	Newspeak2StrongtalkCompilation metadata addNestedClass: Newspeak2StrongtalkCompilation_SemanticNode. ! 
	Newspeak2StrongtalkCompilation_SemanticNode metadata enclosingMixin: Newspeak2StrongtalkCompilation !
	Delta define: #Newspeak2StrongtalkCompilation_MethodMirror as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' selector src method isSynthetic')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_MethodMirror EnclosingObjects_Newspeak2StrongtalkCompilation_MethodMirror')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_MethodMirror) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_MethodMirror) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_MethodMirror) comment: 'A descriptor for a Smalltalk method or accessor.'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_MethodMirror) methodsFor: 'unclassified'!
	method: method_val method := method_val! 
selector: selector_val selector := selector_val! 
method ^method! 
isSynthetic: isSynthetic_val isSynthetic := isSynthetic_val! 
 Newspeak2StrongtalkCompilation_MethodMirror_superInit_named: s 

super  new.

^ self.



! 
src: src_val src := src_val! 
selector ^selector! 
src ^src! 
isSynthetic ^isSynthetic! 
 named: s 

 self Newspeak2StrongtalkCompilation_MethodMirror_superInit_named: s.

 self Newspeak2StrongtalkCompilation_MethodMirror_1_init: s.

^ self.



! 
 name 

^ self  selector.



! 
 Newspeak2StrongtalkCompilation_MethodMirror_1_init: s 

 self selector: s.

 self method:nil.

 self isSynthetic:false.

 self src:nil.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_MethodMirror) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_MethodMirror := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_MethodMirror := mmd !
	 named: s 

^ self basicNew named: s.



! 
		 !
	Newspeak2StrongtalkCompilation metadata addNestedClass: Newspeak2StrongtalkCompilation_MethodMirror. ! 
	Newspeak2StrongtalkCompilation_MethodMirror metadata enclosingMixin: Newspeak2StrongtalkCompilation !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' currentMixinUID Newspeak2StrongtalkCompilation_Compiler_Rewriter_slot literalTable Newspeak2StrongtalkCompilation_Compiler_MixinClassNode_slot scope rewriter currentDepth Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder_slot Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_slot scopeStack input scopeMap methodCompiler')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler) comment: 'The compiler has three main entry points: compileClassSource:Within:, compileClassHeader: within: and compileMethodSource:within:. These compile an entire class declaration, a class header, and a method, respectively. 

The compiler produces a .dlt file that contains the Strongtalk code. Internally, the compiler manufactures low-level mirror representing the results of compilation. These mirrors are then used to produce the output file.

Compilation begins with parsing, followed by a pass on the resulting AST to compute the scope. The scope is stored as a shadow tree of the AST. Specifically, the slot scopeMap stores a dictionary mapping AST nodes to scopes. This mapping is computed by ScopeBuilder.

Optimization note: 
This can be optimized, so that we only compute the scope of a class side, and then use it as a basis for computing the scope of each method. This would prevent us from holding onto the scopes for all methods when compiling a class. Likewise, we can avoid holding onto the scopes of all nested classes. 
** end note

When compiling an individual method, we also rewrite its AST into a lower level AST, and submit that to the AST2SmalltalkCompiler, which produces Smalltalk code.  If we are compiling a class declaration or a class header, we compute the overall structure of the resulting mixin, including any required synthetic members.

The NS2 implementation involves a considerable amount of synthetic code, dealing with accessors, nested classes, slot initialization, superclass initialization and the primary constructor. 

The primary constructor induces a synthetic class method of the same name, which calls a synthetic  instance method of the same name on a freshly created instance. Within that instance method is the code for all the slot initializers, as well as the superclass constructor call. See processConstructorFor:inClass:.

Once a mirror has been produced, the output* routines convert it into a .dlt file suitable as input to Strongtalk. Each class declaration is converted into a  subclass of NewspeakObject. NewspeakObject provides a class instance variable named metadata; in a defining class, the metadata holds information such as the enclosing mixin and nested mixins. 
The output sets up this metadata to connect the different classes produced in accordance with the original nesting structure given by NS2.

Nested classes are distinct for every instance of an outer class. Hence, every outer class has synthetic fields that hold the class objects for its nested classes. These fields are always accessed by a getter method which lazily initializes the field. The name of the getter method is the simple name of the inner class. The field, in contrast, is named X_slot, where X is the fully qualified name of the inner class'' mixin. This is necessary to prevent it from clashing with nested classes with the same simple name elsewhere in the hierarchy. See accessorStringForNestedClassNamed:fullName:superName: .

Classes have a class variable named EnclosingObjects_N, where N is the fully qualified name of the class. This variable holds an array of the classes enclosing objects wrt to its lexically enclosing class declaration D. The first element is the immediately enclosing object, the second, the 2nd enclosing object wrt D, etc. In general, the kth entry is the kth enclosing object wrt D.  The n+1st entry is nil.

Classes also have a class variable named MixinMetadata_N (where, again, N is the fully qualified class name).  This variable points at the metadata of the mixin corresponding to the class. This metadata includes the nested mixins, which are needed to produce the nested classes of a given class. The accessors for nested classes produce these nested classes lazily, and make use of both class variables just described - the metadata to find the mixin they need to invoke, and the enclosing object array in order to set up the new class'' enclosing objects.

See AST2SmalltalkCompiler for more details.

Limitations:

The use of $_ as a synthtic name separator is problematic, as it can occur in legal Newspeak identifiers, and so clashes can occur. 

We rely on access to the Strongtalk Mirror class. If a Newspeak class has a slot named Mirror, the scheme breaks down. We should access Mirror via a synthetic name.
'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler) methodsFor: 'unclassified'!
	methodCompiler ^methodCompiler! 
  nestedMixinWrapperFor: nested in: outerClass 

|  wrapper |

 wrapper := nested shallowCopy.

 wrapper hdr: nested hdr shallowCopy.

 wrapper hdr name:( self   fullyQualifySimpleName: nested name with: outerClass name).

^ wrapper.



! 
 enclosingObjectMsgFromName: nm 

^'enclosingObject' , self  syntheticNameSeparator , nm.



! 
currentMixinUID: currentMixinUID_val currentMixinUID := currentMixinUID_val! 
 hereNode 

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  VariableAST new name:#'_here'; 

 start:0; 

 end:0.



! 
  compileNestedClasses: nestedClasses within: mixinMirror 

|  results |

 results := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  OrderedCollection new.

 nestedClasses do:[ : nc | 

|  nSlotName  nSlot |

 nc hdr category:( mixinMirror category ,'-nested').

 nSlotName := self   slotNameForNestedClassNamed: nc name within: mixinMirror name.

 nSlot := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  InstanceVariableMirror named: nSlotName.

 nSlot metadata  at:#'isSynthetic' put:true.

 mixinMirror instVars addMirror: nSlot.

 results add:( self  classNode:( self   nestedMixinWrapperFor: nc in: mixinMirror)).

 self   createNestedClassAccessorFrom: nc within: mixinMirror.

].

^ results.



! 
 hereSendFrom: arg 

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  NormalSendAST new  to: self  hereNode send:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MessageAST new  send: arg name with:( self Array new:0); 

 start: arg start; 

 end: arg end); 

 start: arg start; 

 end: arg end.



! 
 sendForSub: sub 

|  args |

 args := sub pattern parameters collect:[ : arg | 

 self  hereSendFrom: arg.

].

^( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  NormalSendAST new  to: self  selfNode send:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MessageAST new  send: sub selector with: args; 

 start: sub start; 

 end: sub end)) start: sub start; 

 end: sub end.



! 
scopeMap ^scopeMap! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_1_init.

^ self.



! 
scopeStack: scopeStack_val scopeStack := scopeStack_val! 
AST2SmalltalkCompiler
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  ASTTool)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_slot! 
  outputRep: m to: strm within: enclosing 

 self   outputClass: m first to: strm.

 self   outputNestingHookupForRep: m to: strm within: enclosing.

 m last do:[ : rep | 

 self   outputRep: rep to: strm within: m first.

].

^ self.



! 
literalTable: literalTable_val literalTable := literalTable_val! 
scope: scope_val scope := scope_val! 
  outputNestingHookupForRep: m to: strm within: enclosing 

 enclosing isNil ifTrue:[ 

 strm nextPutAll: m first name.

 strm nextPutAll:' enclosingObjects: (Array with: nil)!!
		'.

 strm nextPutAll: m first name.

 strm nextPutAll:' metadata enclosingMixin: '.

 strm nextPutAll:'nil !!
		'.

 strm nextPutAll: m first name.

 strm nextPutAll:' mixinMetadata: '.

 strm nextPutAll: m first name.

 strm nextPutAll:' metadata !!
		'.

^ self.

].

 strm nextPutAll: enclosing name.

 strm nextPutAll:' metadata addNestedClass: '.

 strm nextPutAll: m first name.

 strm nextPutAll:'. !! 
	'.

 strm nextPutAll: m first name.

 strm nextPutAll:' metadata enclosingMixin: '.

 strm nextPutAll: enclosing name.

 strm nextPutAll:' !!
	'.

^ self.



! 
  outputMethodsOf: m to: strm 

 strm nextPutAll:'!! (Delta mirrorFor: #'.

 strm nextPutAll: m name.

 strm nextPutAll:') methodsFor: ''unclassified''!!
	'.

 m lowLevelMirror methods do:[ : mtd | 

 strm nextChunkPut: mtd method.

 strm nextPutAll:' 
'.

].

 strm nextPutAll:' !!
	'.

^ self.



! 
rewriter: rewriter_val rewriter := rewriter_val! 
  fullyQualifySimpleName: sn with: fqp 

^( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  SystemMetadata  fullyQualifySimpleName: sn with: fqp)  copyReplaceAll:'`' with:'_'.



! 
 syntheticNameSeparatorCharacter 

^$_.



! 
  processClassSideOf: aNode ofMixin: mixinMirror 

|  primaryFactory  factoryAST |

 self   processFactoryFor: aNode in: mixinMirror.

 self   processSide: aNode classSide ofMixin: mixinMirror.

^ self.



! 
  allInitializersFor: aNode in: mixinMirror 

|  start  end  stmts  initHdr  body  slots  subs  copier |

 start := aNode superConstructorCall start.

 end := aNode superConstructorCall end.

 copier := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  ASTCopier new.

 initHdr := aNode constructor apply: copier.

 subs := self  subInitializersFor: aNode.

 slots := aNode slots collect:[ : slot | 

|  aMsg |

 aMsg := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MessageAST new  send:( slot name ,':') asSymbol with:(( self Array new:1)  at:1 put:( slot initializer apply: copier); 

 yourself); 

 start: slot start; 

 end: slot end.

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  NormalSendAST new msg: aMsg; 

 recv:( self  selfNode start: aMsg start; 

 end: aMsg end); 

 start: aMsg start; 

 end: aMsg end.

].

(1 to: slots size)  with: slots do:[ : n : stmt | 

( subs at:( n // self  methodCompiler slotsPerMethod +1)) body statements add: stmt.

].

 stmts := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  OrderedCollection new.

 stmts addFirst:( self  superConstructorCallFor: aNode).

1  to: subs size - 1 do:[ : i | 

 stmts add:( self  sendForSub:( subs at: i)).

].

 stmts addAll:( aNode initExprs collect:[ : ie | 

 ie apply: copier.

]).

 body := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  CodeBodyAST new  temporaries: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  OrderedCollection new statements: stmts; 

 start: start; 

 end: end.

 subs  at: subs size put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MethodAST new  pattern: initHdr body: body visibility:#'public'; 

 start: start; 

 end: end).

^ subs.



! 
ScopeBuilder
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  ASTTool)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder_slot! 
  compileMethodSource: src within: enclosing 

|  tree  result |

 tree := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  parser methodDecl parse: src.

 self  saveInput: src.

 self   setScopeFor: tree in: enclosing.

 result := self  methodNode: tree.

 self  scopeMap: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  Dictionary new.

^ result.



! 
MixinClassNode
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_MixinClassNode_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_MixinClassNode.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  AST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_MixinClassNode_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_MixinClassNode_slot! 
 nestScope: s 

 s superScope: self  currentScope.

 self  pushScope: s.

^ self.



! 
 selectorForMethodAST: aMethodAST 

^ aMethodAST pattern selector.



! 
  setScopeFor: aNode in: enclosing 

|  scopeBuilder |

 self  pushScope: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  Scope new.

 enclosing isNil ifFalse:[ 

 self  nestScope:( self  ScopeBuilder new buildScopeFor: enclosing).

].

 self  currentDepth:( self  currentScope depth - 1).

 scopeBuilder := self  ScopeBuilder  nestedIn: self  currentScope atLevel: self  currentDepth.

 aNode apply: scopeBuilder.

^ self.



! 
currentMixinUID ^currentMixinUID! 
 syntheticNameSeparator 

^'_'.



! 
  subinitializer: n nameFor: aNode 

|  prefix  suffix  fqn |

 prefix := aNode name , self  syntheticNameSeparator , n printString , self  syntheticNameSeparator ,'init'.

 suffix := aNode constructor parameters size =0  ifTrue:[ 

#''.

] ifFalse:[ 

 aNode constructor parameters size =1  ifTrue:[ 

':'.

] ifFalse:[ 

 self  syntheticNameSeparator , aNode constructor selector.

].

].

^( prefix , suffix) asSymbol.



! 
  computeMethod: aNode inScope: s 

|  scopeBuilder |

 scopeBuilder := self  ScopeBuilder  nestedIn: s atLevel: self  currentDepth.

 aNode apply: scopeBuilder.

^ self  methodNode: aNode.



! 
  processMethod: aNode inScope: s in: mixinMirror 

|  method |

 method := self   computeMethod: aNode inScope: s.

 method isSynthetic:true.

 mixinMirror methods addMirror: method.

^ self.



! 
  compileClassHeader: src within: enclosing 

|  tree  mirror |

 tree := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  parser classHeader parse: src.

 self  saveInput: src.

 self   setScopeFor: tree in: enclosing.

 mirror := self  classHeaderNode: tree.

 self  scopeMap: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  Dictionary new.

^ mirror.



! 
  processSide: side ofMixin: mixinMirror 

 side categories do:[ : cat | 

|  mirr |

 cat methods do:[ : m | 

 mirr := self  methodNode: m.

 mirr metadata  at:#'category' put: cat.

 mixinMirror methods addMirror: mirr.

].

].

^ self.



! 
 methodNode: aNode 

|  tree |

 tree := aNode apply: self  rewriter.

 tree apply: self  methodCompiler.

^ self  methodCompiler result src:( self  sourceForNode: aNode).



! 
 computeMixinFrom: aNode 

|  ivNames  mixinMirror  hdrString |

 ivNames := aNode slots collect:[ : s | 

 s name.

].

 mixinMirror := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  LowLevelMixinMirror  named: aNode name isMeta:false.

 ivNames do:[ : iv | 

 mixinMirror instVars addMirror:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  InstanceVariableMirror named: iv).

].

 hdrString := self  input  copyFrom: aNode start to: aNode end.

^( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  CompiledMixinMirror  language: self  language header: hdrString mirror: mixinMirror) category: aNode category; 

 comment:( aNode classComment isNil  ifTrue:[ 

#''.

] ifFalse:[ 

 aNode classComment.

]).



! 
 superConstructorNameFor: aNode 

^( aNode name , self  syntheticNameSeparator ,'superInit' , self  syntheticNameSeparator , aNode constructor selector) asSymbol.



! 
 selfNode 

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  VariableAST new name:#'self'; 

 start:0; 

 end:0.



! 
  processInstanceSideOf: aNode ofMixin: mixinMirror 

|  side |

 self   processInitializerFor: aNode in: mixinMirror.

 side := aNode instanceSide.

 self   processSide: side ofMixin: mixinMirror.

^ self   compileNestedClassesOf: side within: mixinMirror.



! 
 classNode: aNode 

|  mixinMirror  nestedClasses  priorMixinUID |

 self  assert:[ 

 aNode hdr category notNil.

] message:'No category for class header'.

 mixinMirror := self  computeMixinFrom: aNode hdr.

 priorMixinUID := self  currentMixinUID.

 self  currentMixinUID: mixinMirror name.

 self  currentDepth:( self  currentDepth +1).

 nestedClasses := self   processInstanceSideOf: aNode ofMixin: mixinMirror lowLevelMirror.

 self  generateSlotAccessorsFor: mixinMirror lowLevelMirror.

 self   processClassSideOf: aNode ofMixin: mixinMirror lowLevelMirror classMixin.

 self  currentDepth:( self  currentDepth - 1).

 self  currentMixinUID: priorMixinUID.

^( self Array new:2)  at:1 put: mixinMirror; 

  at:2 put: nestedClasses; 

 yourself.



! 
scopeStack ^scopeStack! 
  processInitializerFor: aNode in: mixinMirror 

|  initializerASTs |

 self   processMethod:( self  superConstructorMethodFor: aNode hdr) inScope:( self  scopeMap at: aNode instanceSide) in: mixinMirror.

 initializerASTs := self   allInitializersFor: aNode hdr in: mixinMirror.

 initializerASTs do:[ : init | 

 self   processMethod: init inScope:( self  scopeMap at: aNode instanceSide) in: mixinMirror.

].

^ self.



! 
methodCompiler: methodCompiler_val methodCompiler := methodCompiler_val! 
  slotNameForNestedClassNamed: ncn within: outerName 

^( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  SystemMetadata mixinSlotNameFor:( self   fullyQualifySimpleName: ncn with: outerName))  copyReplaceAll:'`' with:'_'.



! 
scope ^scope! 
 saveInput: src 

 src position:1.

 self  input: src.

^ self.



! 
  accessorForNestedClassNamed: simpleName in: mixinName superName: superAccessor 

|  nestedName  nestedSlot  enclosing  mixinMetadata |

 nestedName := self   fullyQualifySimpleName: simpleName with: mixinName.

 nestedSlot := nestedName , self  syntheticNameSeparator ,'slot'.

 enclosing :='EnclosingObjects' , self  syntheticNameSeparator , mixinName.

 mixinMetadata :='MixinMetadata' , self  syntheticNameSeparator , mixinName.

^ simpleName ,'
	| nestedClass enclosingObjectArray myNested depth |
	' , nestedSlot ,' isNil ifTrue:[ 
		nestedClass := 	' , mixinMetadata ,' 
			nestedMixins at: #' , nestedName ,'.
		myNested := (nestedClass mixin |>  (' , mixinMetadata ,' Mirror on: ' , superAccessor ,')) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := ' , enclosing ,' size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(' , enclosing ,' at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		' , nestedSlot ,' := myNested.
		].
	^' , nestedSlot.



! 
  outputClassMethodsOf: m to: strm 

 strm nextPutAll:'!! (Delta mirrorFor: #'.

 strm nextPutAll: m name.

 strm nextPutAll:') classSide methodsFor: ''unclassified''!!
	'.

 strm nextPutAll:('enclosingObjects: eos EnclosingObjects_' , m name ,' := eos !!
	').

 strm nextPutAll:('mixinMetadata: mmd MixinMetadata_' , m name ,' := mmd !!
	').

 m lowLevelMirror classMixin methods do:[ : mtd | 

 strm nextChunkPut: mtd method.

 strm nextPutAll:' 
		'.

].

 strm nextPutAll:' !!
	'.

^ self.



! 
currentDepth ^currentDepth! 
 Newspeak2StrongtalkCompilation_Compiler_superInit_new 

super  new.

^ self.



! 
 popScope 

^ self  scopeStack removeLast.



! 
 ensureEnclosingObjectAccessFor: mixinMirror 

|  enclosingObjectMsg |

 enclosingObjectMsg := self  enclosingObjectMsgFor: mixinMirror.

 mixinMirror classMixin instVars addMirror:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  InstanceVariableMirror named: enclosingObjectMsg).

^ self.



! 
 enclosingObjectMsgFor: mirror 

^ self  enclosingObjectMsgFromName: mirror name.



! 
literalTable ^literalTable! 
 makePrimaryFactoryFor: hdr 

|  newInstance  calls  body  msgFromConstructor  args  start  end  cons |

 cons := hdr constructor apply: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  ASTCopier new.

 start := cons start.

 end := cons end.

 newInstance := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  NormalSendAST new  to: self  selfNode send:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MessageAST new  send:#'basicNew' with:( self Array new:0); 

 start: start; 

 end: end); 

 start: start; 

 end: end.

 args := hdr constructor parameters collect:[ : vd | 

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  NormalSendAST new  to: self  hereNode send:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MessageAST new  send: vd name with:( self Array new:0); 

 start: vd start; 

 end: vd end); 

 start: vd start; 

 end: vd end.

].

 msgFromConstructor := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MessageAST new  send: cons selector with: args.

 msgFromConstructor start: start; 

 end: end.

 calls := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  OrderedCollection new add:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  ReturnStatAST new expr:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  NormalSendAST new  to: newInstance send: msgFromConstructor; 

 start: start; 

 end: end); 

 start: start; 

 end: end); 

 yourself.

 body := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  CodeBodyAST new  temporaries: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  OrderedCollection new statements: calls; 

 start: start; 

 end: end.

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MethodAST new  pattern: cons body: body visibility:#'public'; 

 start: start; 

 end: end.



! 
  compileClassSource: src within: enclosing 

|  tree  mixinRep  file  strm |

 tree := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  parser classDefinition parse: src.

 self  saveInput: src.

 self   setScopeFor: tree in: enclosing.

 mixinRep := self  classNode: tree.

 self  scopeMap: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  Dictionary new.

 file := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  FilePath for:( mixinRep first name ,'-andNested.dlt').

 strm := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  CharacterInputOutputConverter on: file writeStream.

 self   outputRep: mixinRep to: strm within: enclosing.

 strm close.

 enclosing isNil  ifTrue:[ 

 mixinRep.

] ifFalse:[ 

( self Array new:2)  at:1 put: enclosing; 

  at:2 put: mixinRep; 

 yourself.

].

^ self.



! 
 classHeaderNode: aNode 

|  mixinMirror  t |

 self  assert:[ 

 aNode category notNil.

] message:'No category for class header node '.

 mixinMirror := self  computeMixinFrom: aNode.

 self   processConstructorFor: aNode inMixin: mixinMirror lowLevelMirror.

^ mixinMirror.



! 
  outputClass: m to: strm 

 self   outputClassDecl: m to: strm.

 self   outputMethodsOf: m to: strm.

 self   outputClassMethodsOf: m to: strm.

^ self.



! 
 Newspeak2StrongtalkCompilation_Compiler_1_init 

 self scopeMap: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  Dictionary new.

 self scope:nil.

 self scopeStack: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  OrderedCollection new.

 self literalTable:nil.

 self input:nil.

 self rewriter: self  Rewriter new.

 self methodCompiler: self  AST2SmalltalkCompiler new.

 self currentDepth:nil.

 self currentMixinUID:nil.

^ self.



! 
 currentScope 

^ self  scopeStack last.



! 
rewriter ^rewriter! 
  subInitializer: n for: aNode 

|  initHdr  body |

 initHdr := aNode constructor apply: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  ASTCopier new.

 initHdr selector:( self   subinitializer: n nameFor: aNode).

 body := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  CodeBodyAST new  temporaries: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  OrderedCollection new statements: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  OrderedCollection new; 

 start: aNode start; 

 end: aNode end.

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MethodAST new  pattern: initHdr body: body visibility:#'private'; 

 start: aNode start; 

 end: aNode end.



! 
input ^input! 
input: input_val input := input_val! 
  accessorForSuperclass: aSelector inScope: s 

|  dummyMethod  src  send |

 send := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  ReturnStatAST new expr:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  NormalSendAST new  to: self  hereNode send:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MessageAST new  send: aSelector asSymbol with:( self Array new:0))).

 dummyMethod := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MethodAST new  pattern:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MessagePatternAST new  selector:#'___' parameters:( self Array new:0)) body:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  CodeBodyAST new  temporaries:( self Array new:0) statements:(( self Array new:1)  at:1 put: send; 

 yourself)) visibility:#'private'.

 dummyMethod start:2; 

 end:3.

 self  scopeMap  at: dummyMethod put: self  currentScope; 

  at: dummyMethod body put: self  currentScope; 

  at: dummyMethod pattern put: self  currentScope.

 src :=( self   computeMethod: dummyMethod inScope: s) method.

^ src  copyFrom:10 to: src size - 5.



! 
  superAccessorStringFor: sname inClass: mixinMirror 

|  enclosings  oClass  enclosingMixins  enclosingNames  count |

 count :=0.

( mixinMirror methods includesMirrorNamed: sname asSymbol) ifTrue:[ 

^'self ' , sname.

].

 enclosings :=#''.

 enclosingMixins := mixinMirror enclosingMixins reverse.

 enclosingMixins do:[ : oc | 

( oc methods includesMirrorNamed: sname asSymbol)  ifFalse:[ 

 count := count +1.

] ifTrue:[ 

 enclosingNames := enclosingMixins  collect:[ : c | 

 self  enclosingObjectMsgFor: c.

] from:1 to: count.

 enclosings := enclosingNames fold:[ : ocn1 : ocn2 | 

 ocn1 ,' class ' , ocn2.

].

^'thisContext lexicalClass ' , enclosings ,' ' , sname.

].

].

^'self ' , sname.



! 
 pushScope: s 

 self  scopeStack addLast: s.

^ self.



! 
  processFactoryFor: aNode in: mixinMirror 

|  factory  side  factoryAST  scopeBuilder  savedScopeMap |

 factoryAST := self  makePrimaryFactoryFor: aNode hdr.

 self   processMethod: factoryAST inScope:( self  scopeMap at: aNode classSide) in: mixinMirror.

^ self.



! 
 superConstructorMethodFor: aNode 

|  start  end  stmts  var  initHdr  superMsg  send  body  copier |

 start := aNode superConstructorCall start.

 end := aNode superConstructorCall end.

 copier := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  ASTCopier new.

 initHdr := aNode constructor apply: copier.

 initHdr selector:( self  superConstructorNameFor: aNode).

 stmts := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  OrderedCollection new.

 var := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  VariableAST new name:#'super'; 

 start: start; 

 end: end.

 superMsg := aNode superConstructorCall apply: copier.

 send := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  NormalSendAST new  to: var send: superMsg; 

 start: start; 

 end: end.

 stmts addFirst: send.

 body := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  CodeBodyAST new  temporaries: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  OrderedCollection new statements: stmts; 

 start: start; 

 end: end.

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MethodAST new  pattern: initHdr body: body visibility:#'private'; 

 start: start; 

 end: end.



! 
Rewriter
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  ASTTool)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_slot! 
  processConstructorFor: aNode inMixin: mixinMirror 

|  initializer  primaryFactory |

 initializer := self  methodNode:( self  initializerFor: aNode).

 mixinMirror methods addMirror: initializer.

 primaryFactory := self  methodNode:( self  makePrimaryFactoryFor: aNode).

 mixinMirror classMixin methods addMirror: primaryFactory.

^ self.



! 
  compileNestedClass: nc within: mixinMirror 

^ self   compileNestedClasses:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  OrderedCollection with: nc) within: mixinMirror.



! 
 sourceForNode: node 

^ self String withAll:( self  input  copyFrom: node start to: node end).



! 
  createNestedClassAccessorFrom: classDecl within: mixinMirror 

|  n  accessorString  methodSrc  hdr  accessor |

 hdr := classDecl hdr.

 n := hdr name.

 methodSrc := self   accessorForNestedClassNamed: n in: mixinMirror name superName:( self   accessorForSuperclass: hdr superclassName inScope:( self  scopeMap at: classDecl instanceSide)).

 accessor := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MethodMirror named: classDecl name asSymbol.

 accessor method: methodSrc.

 accessor isSynthetic:true.

 mixinMirror methods addMirror: accessor.

^ self.



! 
currentDepth: currentDepth_val currentDepth := currentDepth_val! 
scopeMap: scopeMap_val scopeMap := scopeMap_val! 
 language 

^#'NewspeakLanguage2'.



! 
 subInitializersFor: aNode 

|  subs  noSubs |

 noSubs := aNode slots size // self  methodCompiler slotsPerMethod +1.

 subs := self Array new:( noSubs +1).

1  to: noSubs do:[ : n | 

 subs  at: n put:( self   subInitializer: n for: aNode).

].

^ subs.



! 
 parserClass 

^ self WrappingNS2Parser.



! 
  compileNestedClassesOf: aNode within: mixinMirror 

^ self   compileNestedClasses: aNode nestedClasses within: mixinMirror.



! 
 getInstanceVariables: aClassHeaderNode 

^ aClassHeaderNode slots  inject:#'' into:[ : s : v | 

 s , v name ,' '.

].



! 
 generateSlotAccessorsFor: m 

|  sn  ivIndices  ivs |

 ivs := m instVars collect:[ : iv | 

 iv.

].

 ivIndices :=1 to: ivs size.

 ivs do:[ : iv | 

|  getter  setter |

( iv metadata  at:#'isSynthetic' ifAbsent:[ 

false.

]) ifFalse:[ 

 sn := iv name.

 getter := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MethodMirror named: sn asSymbol.

 getter method:( sn ,' ^' , sn).

 getter isSynthetic:true.

 m methods addMirror: getter.

 setter := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MethodMirror named:( sn ,':') asSymbol.

 setter method:( sn ,': ' , sn ,'_val ' , sn ,' := ' , sn ,'_val').

 setter isSynthetic:true.

 m methods addMirror: setter.

].

].

^ self.



! 
  outputClassDecl: m to: strm 

 strm nextPutAll:'Delta define: #'.

 strm nextPutAll: m name.

 strm nextPutAll:' as: (
	(Class subclassOf: ''NewspeakObject'' instanceVariables:'''.

 m lowLevelMirror instVars do:[ : ivm | 

 strm nextPutAll:' '.

 strm nextPutAll: ivm name.

].

 strm nextPutAll:''')
	 classVariables: ''MixinMetadata'.

 strm nextPutAll: self  syntheticNameSeparator.

 strm nextPutAll: m name.

 strm nextPutAll:' EnclosingObjects'.

 strm nextPutAll: self  syntheticNameSeparator.

 strm nextPutAll: m name.

 strm nextPutAll:''')!!
	'.

 strm nextPutAll:'(Delta mirrorFor: #'.

 strm nextPutAll: m name.

 strm nextPutAll:') revision: ''$Revision: 0.0 $''!!
	'.

 strm nextPutAll:'(Delta mirrorFor: #'.

 strm nextPutAll: m name.

 strm nextPutAll:') group: ''newspeak''!!
	'.

 strm nextPutAll:'(Delta mirrorFor: #'.

 strm nextPutAll: m name.

 strm nextPutAll:') comment: '.

 strm nextPutAll: m comment printString.

 strm nextPutAll:'!!
	'.

^ self.



! 
 initializerFor: aNode 

|  stmts  var  superMsg  send  start  end  initHdr  body  copier |

 start := aNode superConstructorCall start.

 end := aNode superConstructorCall end.

 copier := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  ASTCopier new.

 initHdr := aNode constructor apply: copier.

 stmts := aNode slots collect:[ : slot | 

|  aMsg |

 aMsg := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MessageAST new  send:( slot name ,':') asSymbol with:(( self Array new:1)  at:1 put:( slot initializer apply: copier); 

 yourself); 

 start: slot start; 

 end: slot end.

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  NormalSendAST new msg: aMsg; 

 recv:( self  selfNode start: aMsg start; 

 end: aMsg end); 

 start: aMsg start; 

 end: aMsg end.

].

 var := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  VariableAST new name:#'super'; 

 start: start; 

 end: end.

 superMsg := aNode superConstructorCall apply: copier.

 send := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  NormalSendAST new  to: var send: superMsg; 

 start: start; 

 end: end.

 stmts addFirst: send.

 stmts addAll:( aNode initExprs collect:[ : ie | 

 ie apply: copier.

]).

 body := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  CodeBodyAST new  temporaries: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  OrderedCollection new statements: stmts; 

 start: start; 

 end: end.

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MethodAST new  pattern: initHdr body: body visibility:#'public'; 

 start: start; 

 end: end.



! 
 superConstructorCallFor: aNode 

|  var  send  start  end  copier  superMsg  args |

 start := aNode superConstructorCall start.

 end := aNode superConstructorCall end.

 copier := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  ASTCopier new.

 var := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  VariableAST new name:#'self'; 

 start: start; 

 end: end.

 args := aNode constructor parameters collect:[ : p | 

 self  hereSendFrom: p.

].

 superMsg := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  MessageAST new  send:( self  superConstructorNameFor: aNode) with: args; 

 start: start; 

 end: end.

 send := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler at: 1)  NormalSendAST new  to: var send: superMsg; 

 start: start; 

 end: end.

^ send.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler. ! 
	Newspeak2StrongtalkCompilation_Compiler metadata enclosingMixin: Newspeak2StrongtalkCompilation !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor_slot readMap Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST_slot scopeStack Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST_slot writeMap Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor_slot scope Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor_slot Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST_slot')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter) comment: 'A visitor that rewrites the AST into a form more suitable for compilation to the Squeak VM.

It may be possible to combine the pass that constructs the scopes with the rewriting pass, but this may be messy once we start inlining blocks etc.'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter) methodsFor: 'unclassified'!
	 messageNode: node 

|  args |

 self assert:[ 

 node isMessageNode.

].

 args := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  OrderedCollection new.

 node args do:[ : arg | 

 args add:( arg apply: self).

].

 self  addLiteral: node sel.

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new  send: node sel with: args; 

 start: node start; 

 end: node end.



! 
 tupleNode: aNode 

|  els  array  len  tup  index |

 len := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NumberAST new val: aNode elements size.

 len start: aNode start; 

 end: aNode end.

 array := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new  to:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new  to: self  selfNode send:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new sel:#'Array'; 

 args:( self Array new:0); 

 start: aNode start; 

 end: aNode end)) send:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new sel:#'new:'; 

 args:(( self Array new:1)  at:1 put: len; 

 yourself); 

 start: aNode start; 

 end: aNode end).

 array start: aNode start; 

 end: aNode end.

 aNode elements size =0 ifTrue:[ 

^ array apply: self.

].

 index :=0.

 tup := aNode elements  inject: array into:[ : r : e | 

|  msg |

 index := index +1.

 msg := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new sel:#'at:put:'; 

 args:(( self Array new:2)  at:1 put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NumberAST new val: index; 

 start: aNode start; 

 end: aNode end); 

  at:2 put: e; 

 yourself).

 msg start: aNode start; 

 end: aNode end.

 index =1  ifTrue:[ 

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new  to: r send: msg; 

 start: aNode start; 

 end: aNode end.

] ifFalse:[ 

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  CascadedSendAST new  to: r cascade: msg; 

 start: aNode start; 

 end: aNode end.

].

].

^(( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  CascadedSendAST new  to: tup cascade:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new sel:#'yourself'; 

 args:( self Array new:0); 

 start: aNode start; 

 end: aNode end)) start: aNode start; 

 end: aNode end) apply: self.



! 
 addLiteralConstant: s 

( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  literalTable includesKey: s) ifFalse:[ 

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  literalTable  at: s put: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  literalTable size.

].

^ self.



! 
ReceiverAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VariableAST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST_slot! 
ParameterAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VarDeclAST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST_slot! 
ContextVisitor
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: self  FalseVisitor)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor_slot! 
 codeBodyNode: node 

|  bodyScope  statements  temps  result |

 self assert:[ 

 node isCodeBodyNode.

].

 self  pushScopeForNode: node.

 temps := node temporaries collect:[ : t | 

( self  TemporaryAST  name: t name type: t type) start: t start; 

 end: t end.

].

 bodyScope := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  scopeMap at: node.

 temps do:[ : t | 

( bodyScope at: t name) data: t.

].

 statements := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  OrderedCollection new.

 node statements do:[ : stat | 

 statements add:( stat apply: self).

].

 result := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  CodeBodyAST new  parameters: node parameters temporaries: temps statements: statements; 

 start: node start; 

 end: node end.

 self  popScope.

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  scopeMap  at: result put: bodyScope.

^ result.



! 
 returnStatNode: node 

 self assert:[ 

 node isReturnStatNode.

].

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  ReturnStatAST new expr:( node expr apply: self); 

 start: node start; 

 end: node end.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_superInit_new 

super  new.

^ self.



! 
readMap ^readMap! 
 segmentOf: t 

^0.



! 
 isInlineableConditional: node 

((( self Array new:4)  at:1 put:#'ifTrue:'; 

  at:2 put:#'ifFalse:'; 

  at:3 put:#'ifTrue:ifFalse:'; 

  at:4 put:#'ifFalse:ifTrue:'; 

 yourself) includes: node msg sel) ifFalse:[ 

^false.

].

 node msg args do:[ : a | 

( self   isRemovableBlock: a withArgs:0) ifFalse:[ 

^false.

].

].

^true.



! 
 ifNode: node 

 self assert:[ 

 node isIfNode.

].

^ node.



! 
scopeStack ^scopeStack! 
 loopNode: node 

^ node.



! 
  isRemovableBlock: block withArgs: nofArgs 

|  s |

 block isBlockNode ifFalse:[ 

^false.

].

 block parameters size = nofArgs ifFalse:[ 

^false.

].

^true.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_1_init.

^ self.



! 
 isInlineableSend: node 

^( self  isInlineableConditional: node) or:[ 

 self  isInlineableLoop: node.

].



! 
 guaranteedNode: node 

 self assert:[ 

 node isGuaranteedNode.

].

^ node expr apply: self.



! 
writeMap ^writeMap! 
 isInlineableLoop: node 

|  selector  args |

 selector := node msg sel.

 args := node msg args.

((( self Array new:5)  at:1 put:#'whileTrue'; 

  at:2 put:#'whileFalse'; 

  at:3 put:#'whileTrue:'; 

  at:4 put:#'whileFalse:'; 

  at:5 put:#'repeat'; 

 yourself) includes: selector) ifTrue:[ 

 args do:[ : a | 

( self   isRemovableBlock: a withArgs:0) ifFalse:[ 

^false.

].

].

^ self   isRemovableBlock: node recv withArgs:0.

].

 selector =#'timesRepeat:' ifTrue:[ 

^ self   isRemovableBlock: args last withArgs:0.

].

((( self Array new:2)  at:1 put:#'to:do:'; 

  at:2 put:#'to:do:by:'; 

 yourself) includes: selector) ifFalse:[ 

^false.

].

( self   isRemovableBlock: args last withArgs:1) ifFalse:[ 

^false.

].

 selector =#'to:do:' ifTrue:[ 

^true.

].

 args size =3 ifFalse:[ 

^false.

].

^ self.



! 
scope: scope_val scope := scope_val! 
 returnInstVarMethodNode: node 

^ node.



! 
SuperVarAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VarDeclAST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST_slot! 
 processOuterSend: aMsg 

|  holder  depth  binding  meMsg |

 self assert:[ 

 aMsg args isEmpty.

].

 binding :=( self  currentScope at:#'outer') at: aMsg sel.

 self assert:[ 

 binding isKindOf: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  Collection.

].

 self assert:[ 

 binding first isKindOf: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  Class.

].

 self assert:[ 

 binding last isKindOf: self Integer.

].

 meMsg := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new sel:#'yourself'; 

 args:( self Array new:0); 

 start: aMsg start; 

 end: aMsg end.

^ self   processOuterSend: meMsg atDepth: binding last.



! 
 enclosingObjectMsgForDepth: n 

|  otable  ec |

 otable := self  currentScope at:#'outer'.

 ec :=( otable values detect:[ : v | 

( v at:2) =( n - 1).

]) at:1.

^( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  Compiler new enclosingObjectMsgFor: ec) asSymbol.



! 
ParameterVariableAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VariableAST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST_slot! 
 genericApplicationExpressionNode: node 

 self assert:[ 

 node isGenericApplicationExpressionNode.

].

^ node target apply: self.



! 
NilAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VariableAST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST_slot! 
 mixinClassNode: node 

^ node.



! 
BlockLocalReturnAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  AST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST_slot! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_1_init 

 self scope:nil.

 self scopeStack: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  OrderedCollection new.

 self readMap: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  Dictionary new.

 self writeMap: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  Dictionary new.

^ self.



! 
InstVarVisitor
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: self  FalseVisitor)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor_slot! 
  variableFrom: aMsg decl: vd 

|  VarClass |

 self assert:[ 

 aMsg args isEmpty.

].

 vd isNil ifTrue:[ 

^( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VariableAST new name: aMsg sel; 

 start: aMsg start; 

 end: aMsg end) apply: self.

].

 vd isTemporaryAST ifTrue:[ 

 self  noteReadOf: vd.

].

^ vd variableClass  name: aMsg sel start: aMsg start end: aMsg end.



! 
 noteReadOf: t 

|  lastRead |

 lastRead := self  readMap  at: t ifAbsent:[ 

 self  readMap  at: t put: self  currentScope end.

^ self.

].

 self  readMap  at: t put:( lastRead min: self  currentScope end).

^ self.



! 
 isHereNode: aNode 

 aNode isVariableNode ifFalse:[ 

^false.

].

( self  isPseudoVariableNode: aNode) ifTrue:[ 

^false.

].

 self assert:[ 

 aNode name =#'_here'.

].

^true.



! 
 methodNode: node 

|  pattern  stmts  rs  body  result |

 self assert:[ 

 node isMethodNode.

].

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  literalTable: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  Dictionary new.

 pattern := node pattern apply: self.

 stmts := node body statements.

 body := node body apply: self.

 body parameters: pattern parameters.

( body statements isEmpty not and:[ 

 body statements last isReturnStatNode.

]) ifFalse:[ 

 body statements addLast:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  ReturnStatAST new expr:( self  ReceiverAST new start: body end; 

 end: body end); 

 start: body end; 

 end: body end).

].

( stmts size =1 and:[ 

 stmts first isReturnStatNode.

]) ifTrue:[ 

 self  pushScopeForNode: node body.

 rs := stmts first apply: self.

 self  popScope.

].

 result := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MethodAST new  pattern: pattern body: body visibility: node visibility.

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  scopeMap  at: result put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  scopeMap at: node).

^ result.



! 
 addNumericLiteral: n 

 self  addLiteralConstant: n.

^ self.



! 
ImplicitRecvrSendAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  SendAST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST_slot! 
 blockNode: node 

|  blok  last |

 blok := self  rewriteInlinedBlockNode: node.

 blok body statements last isReturnStatNode ifFalse:[ 

 last := blok body statements removeLast.

 blok body statements add:( self  BlockLocalReturnAST  expression: last start: last start end: last end).

].

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  scopeMap  at: blok put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  scopeMap at: node).

^ blok.



! 
 selfNode 

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VariableAST new name:#'self'; 

 start:0; 

 end:0.



! 
  oldProcessExplicitOuterSend: aMsg atDepth: n 

|  holder  ctxt  start  end  enclosingObj  nonMeta |

 n =0 ifTrue:[ 

^ self  selfSendFrom: aMsg.

].

 start := aMsg start.

 end := aMsg end.

 ctxt := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VariableAST new name:#'thisContext'; 

 start: start; 

 end: end.

 holder := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new recv: ctxt; 

 msg:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new sel:#'lexicalClass'; 

 args:( self Array new:0)); 

 start: start; 

 end: end.

 nonMeta := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new recv: holder; 

 msg:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new sel:#'theNonMetaClass'; 

 args:( self Array new:0)); 

 start: start; 

 end: end.

 enclosingObj := self   enclosingObjSendOfDepth:1 to: nonMeta start: start end: end.

 enclosingObj :=(2 to: n)  inject: enclosingObj into:[ : r : i | 

|  csend |

 csend := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new recv: r; 

 msg:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new sel:#'class'; 

 args:( self Array new:0); 

 start: start; 

 end: end); 

 start: start; 

 end: end.

 self   enclosingObjSendOfDepth: i to: csend start: start end: end.

].

^( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new recv: enclosingObj; 

 msg: aMsg; 

 start: start; 

 end: end) apply: self.



! 
 charNode: node 

 self  addLiteralConstant: node val.

^ node.



! 
  enclosingObjSendOfDepth: n to: recv start: start end: end 

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new recv: recv; 

 msg:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new sel:( self  enclosingObjectMsgForDepth: n); 

 args:( self Array new:0); 

 start: start; 

 end: end); 

 start: start; 

 end: end.



! 
  at: node error: msg 

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  Transcript show:('error: ' , msg); 

 cr.

 self halt.

^ self.



! 
 selfSendFrom: aMsg 

^( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new msg: aMsg; 

 recv:( self  selfNode start: aMsg start; 

 end: aMsg end); 

 start: aMsg start; 

 end: aMsg end) apply: self.



! 
NilVisitor
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: self  FalseVisitor)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor_slot! 
 normalSendNode: node 

|  recv  msg  sel  nOfArgs  arg1  arg2  arg3 |

 self assert:[ 

 node isNormalSendNode.

].

( self  isHereNode: node recv) ifTrue:[ 

^ self  processHereSend: node msg.

].

( self  isOuterNode: node recv) ifTrue:[ 

^ self  processExplicitOuterReceiver: node msg.

].

( self  isSuperNode: node recv) ifTrue:[ 

^ self  SuperSendAST send:( node msg apply: self).

].

 recv := node recv apply: self.

 msg := node msg apply: self.

 sel := msg sel.

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new  to: recv send: msg; 

 start: node start; 

 end: node end.



! 
  assignmentFrom: aMsg decl: vd 

|  var  varName  args  selector |

 self assert:[ 

 aMsg args size =1.

].

 selector := aMsg sel asString.

 varName := selector copyWithSize:( selector size - 1).

 self assert:[ 

( self  currentScope at: varName asSymbol) isTemporaryAST.

].

 var := self  TemporaryVariableAST  name: varName start: aMsg start end: aMsg end.

 args := aMsg args first apply: self.

 self  noteWriteOf: var.

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  AssignmentAST new  to: var assign: args; 

 start: aMsg start; 

 end: aMsg end.



! 
 readsOf: t 

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  Set new.



! 
 variableNode: aNode 

 aNode name =#'self' ifTrue:[ 

^ self  ReceiverAST new start: aNode start; 

 end: aNode end.

].

 aNode name =#'nil' ifTrue:[ 

^ self  NilAST new start: aNode start; 

 end: aNode end.

].

 aNode name =#'true' ifTrue:[ 

^ self  BoolAST  withValue:true start: aNode start end: aNode end.

].

 aNode name =#'false' ifTrue:[ 

^ self  BoolAST  withValue:false start: aNode start end: aNode end.

].

 aNode name =#'thisContext' ifTrue:[ 

^ self  ContextAST new start: aNode start; 

 end: aNode end.

].

^ aNode.



! 
ExplicitReceiverVisitor
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: self  FalseVisitor)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor_slot! 
 stringNode: node 

 self assert:[ 

 node isStringNode.

].

 self  addLiteralConstant: node val.

^ node.



! 
 blockLocalReturnNode: node 

^ node.



! 
ReceiverVisitor
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: self  FalseVisitor)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor_slot! 
 receiverNode: node 

^ node.



! 
scopeStack: scopeStack_val scopeStack := scopeStack_val! 
 isSuperNode: aNode 

 aNode isVariableNode ifFalse:[ 

^false.

].

^ aNode name =#'super'.



! 
TemporaryVariableAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VariableAST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST_slot! 
 cascadedSendNode: node 

|  prevSend  msg |

 self assert:[ 

 node isCascadedSendNode.

].

 prevSend := node prevSend apply: self.

 msg := node msg apply: self.

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  CascadedSendAST new  to: prevSend cascade: msg.



! 
 popScope 

^ self  scopeStack removeLast.



! 
TemporaryAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VarDeclAST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST_slot! 
 pushScopeForNode: n 

 self  scopeStack addLast:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  scopeMap at: n).

^ self.



! 
SuperSendAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  SendAST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST_slot! 
 rewriteInlinedBlockNode: node 

|  blok  params  bodyScope |

 self assert:[ 

 node isBlockNode.

].

 params := node parameters collect:[ : p | 

( self  ParameterAST  name: p name type: p type) start: p start; 

 end: p end.

].

 bodyScope := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  scopeMap at: node body.

 params do:[ : t | 

( bodyScope at: t name) data: t.

].

 self  addNumericLiteral: node parameters size.

 blok := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  BlockAST new body:( node body apply: self).

 blok body parameters: params.

 node body statements isEmpty ifTrue:[ 

 blok body statements add:( self  NilAST new start: node body start; 

 end: node body end).

].

^ blok.



! 
SuperVarVisitor
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: self  FalseVisitor)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor_slot! 
BoolVisitor
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: self  FalseVisitor)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor_slot! 
ExplicitRecvrAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  AST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST_slot! 
 explicitOuterReceiverNode: node 

 self assert:[ 

 node apply: self  ExplicitReceiverVisitor new.

].

^ node.



! 
  processImplicitOuterSend: aMsg atDepth: n 

|  selectorBinding  depth |

 selectorBinding := self  currentScope at: aMsg sel.

 depth := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  currentDepth -  selectorBinding depth.

 self  addNumericLiteral: depth.

^( self  ImplicitRecvrSendAST  send:( aMsg apply: self) depth: depth) start: aMsg start; 

 end: aMsg end.



! 
 currentScope 

^ self  scopeStack last.



! 
BoolAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VariableAST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST_slot! 
 assignmentNode: node 

 self assert:[ 

 node isAssignmentNode.

].

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  AssignmentAST new  to:( node var apply: self) assign:( node expr apply: self); 

 start: node start; 

 end: node end.



! 
  processVariable: aMsg decl: vd 

^ aMsg sel last =$:  ifTrue:[ 

 self   assignmentFrom: aMsg decl: vd.

] ifFalse:[ 

 self   variableFrom: aMsg decl: vd.

].



! 
  parameters: pars matchArguments: args 

|  i |

 i := pars size.

 pars size = args size ifFalse:[ 

^false.

].

 i := pars size.

[ 

 i >0.

] whileTrue:[ 

( args at: i) isRefNode ifFalse:[ 

^false.

].

( pars at: i) ==( args at: i) decl ifFalse:[ 

^false.

].

 i := i - 1.

].

^true.



! 
 pushScope: s 

 self  scopeStack addLast: s.

^ self.



! 
SuperSendVisitor
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: self  FalseVisitor)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor_slot! 
 superSendNode: node 

 self assert:[ 

 node apply: self  SuperSendVisitor new.

].

^ node.



! 
 lastWriteOf: t 

^0.



! 
 numberNode: node 

 self assert:[ 

 node isNumberNode.

].

 self  addNumericLiteral: node val.

^ node.



! 
ImplicitRecvrVisitor
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: self  FalseVisitor)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor_slot! 
 noteWriteOf: t 

|  lastWrite  prevBlockEnd |

 prevBlockEnd :=( self  writeMap  at: t ifAbsent:[ 

( self Array new:2)  at:1 put:0; 

  at:2 put:0; 

 yourself.

]) last.

 lastWrite := self Array new:2.

 lastWrite  at:1 put: t start.

 lastWrite  at:2 put:( self  currentScope end min: prevBlockEnd).

 self  writeMap  at: t put: lastWrite.

^ self.



! 
 processHereSend: aMsg 

|  binding |

 binding := self  currentScope  at: aMsg sel ifAbsent:[ 

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new.

].

 binding isMessagePatternNode ifTrue:[ 

^ self   processImplicitOuterSend: aMsg atDepth: binding depth.

].

 binding isVarDeclNode ifTrue:[ 

^ self   processVariable: aMsg decl: binding.

].

((( self Array new:3)  at:1 put:#'true'; 

  at:2 put:#'false'; 

  at:3 put:#'nil'; 

 yourself) includes: aMsg sel) ifTrue:[ 

^ self   processVariable: aMsg decl:nil.

].

^ self  selfSendFrom: aMsg.



! 
 processExplicitOuterReceiver: aMsg 

|  selectorBinding  depth |

 self assert:[ 

 aMsg args isEmpty.

].

 selectorBinding := self  currentScope at: aMsg sel.

 depth := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  currentDepth -  selectorBinding depth - 1.

 self  addNumericLiteral: depth.

^( self  ExplicitRecvrAST  send: aMsg sel depth: depth) start: aMsg start; 

 end: aMsg end.



! 
 addLiteral: s 

( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  literalTable includesKey: s) ifFalse:[ 

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  literalTable  at: s put: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  literalTable size.

].

^ self.



! 
 implicitSendNode: node 

 self assert:[ 

 node apply: self  ImplicitRecvrVisitor new.

].

^ node.



! 
 symbolNode: node 

 self assert:[ 

 node isSymbolNode.

].

 self  addLiteralConstant: node val.

^ node.



! 
  setSegmentOf: t to: i 

^ self.



! 
readMap: readMap_val readMap := readMap_val! 
ContextAST
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VariableAST)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST_slot! 
writeMap: writeMap_val writeMap := writeMap_val! 
scope ^scope! 
 messagePatternNode: node 

|  params  patternScope |

 params := node parameters collect:[ : p | 

( self  ParameterAST  name: p name type: p type) start: p start; 

 end: p end.

].

 patternScope := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 1)  scopeMap at: node.

 params do:[ : p | 

( patternScope at: p name) data: p.

].

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessagePatternAST new  selector: node selector parameters: params; 

 start: node start; 

 end: node end.



! 
  processOuterSend: aMsg atDepth: n 

|  holder  ctxt  start  end  enclosingObj  nonMeta |

 n =0 ifTrue:[ 

^ self  selfSendFrom: aMsg.

].

 start := aMsg start.

 end := aMsg end.

 ctxt := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  VariableAST new name:#'thisContext'; 

 start: start; 

 end: end.

 holder := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new recv: ctxt; 

 msg:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new sel:#'lexicalClass'; 

 args:( self Array new:0)); 

 start: start; 

 end: end.

 nonMeta := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new recv: holder; 

 msg:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new sel:#'theNonMetaClass'; 

 args:( self Array new:0)); 

 start: start; 

 end: end.

 enclosingObj := self   enclosingObjSendOfDepth:1 to: nonMeta start: start end: end.

 enclosingObj :=(2 to: n)  inject: enclosingObj into:[ : r : i | 

|  csend |

 csend := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new recv: r; 

 msg:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new sel:#'class'; 

 args:( self Array new:0); 

 start: start; 

 end: end); 

 start: start; 

 end: end.

 self   enclosingObjSendOfDepth: i to: csend start: start end: end.

].

^( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new recv: enclosingObj; 

 msg: aMsg; 

 start: start; 

 end: end) apply: self.



! 
 isPseudoVariableNode: aNode 

^ aNode name =#'self' or:[ 

 aNode name =#'super' or:[ 

 aNode name =#'outer' or:[ 

 aNode name =#'thisContext'.

].

].

].



! 
 processExplicitOuterSend: aMsg 

^ self.



! 
 currentSegment 

^0.



! 
 isOuterNode: aNode 

 aNode isVariableNode ifFalse:[ 

^false.

].

^ aNode name =#'outer'.



! 
 mixinApplication: node 

|  msg |

 msg := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  MessageAST new  send:#'apply:' with:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  OrderedCollection with: node superclassExpr); 

 start: node start; 

 end: node end.

^( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  NormalSendAST new  to: node mixinExpr send: msg; 

 start: node start; 

 end: node end) apply: self.



! 
FalseVisitor
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: 2)  SuperFalseVisitor)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor_slot! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor_superInit_new 

super  new.

^ self.



! 
 superVarNode: node 

^true.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor_1_init.

 self Remove when we remove SuperVarAST , self which is unnecessary.

^ self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor_1_init 

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarVisitor metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' val')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST) methodsFor: 'unclassified'!
	  Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST_superInit_withValue: aBool start: s end: e 

super  new.

^ self.



! 
val ^val! 
  Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST_1_init_withValue: aBool start: s end: e 

 self val: aBool.

^ self.



! 
 apply: aTool 

^ aTool boolNode: self.



! 
val: val_val val := val_val! 
  withValue: aBool start: s end: e 

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST_superInit_withValue: aBool start: s end: e.

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST_1_init_withValue: aBool start: s end: e.

 self start: s.

 self end: e.

^ self.



! 
 name 

^ self  val printString asSymbol.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST := mmd !
	  withValue: aBool start: s end: e 

^ self basicNew  withValue: aBool start: s end: e.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST) methodsFor: 'unclassified'!
	 apply: aTool 

^ aTool parameterDeclNode: self.



! 
 variableClass 

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST at: 1)  ParameterVariableAST.



! 
 printOn: strm 

super  printOn: strm.

 strm nextPutAll:('(' , self name ,')').

^ self.



! 
  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST_superInit_name: n type: t 

super   name: n type: t.

^ self.



! 
  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST_1_init_name: n type: t 

^ self.



! 
  name: n type: t 

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST_superInit_name: n type: t.

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST_1_init_name: n type: t.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST := mmd !
	  name: n type: t 

^ self basicNew  name: n type: t.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' depth outerClassName selector')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST) comment: 'Represents ats the receiver of an explicit outer send.'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST) methodsFor: 'unclassified'!
	 apply: aTool 

^ aTool explicitOuterReceiverNode: self.



! 
  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST_1_init_send: sym depth: d 

 self outerClassName: sym.

 self depth: d.

 self selector:nil.

^ self.



! 
  send: sym depth: d 

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST_superInit_send: sym depth: d.

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST_1_init_send: sym depth: d.

^ self.



! 
selector: selector_val selector := selector_val! 
outerClassName ^outerClassName! 
depth ^depth! 
outerClassName: outerClassName_val outerClassName := outerClassName_val! 
  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST_superInit_send: sym depth: d 

super  new.

^ self.



! 
selector ^selector! 
depth: depth_val depth := depth_val! 
 isExpressionNode 

^true.



! 
 isExplicitRcvrNode 

^true.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST := mmd !
	  send: sym depth: d 

^ self basicNew  send: sym depth: d.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitRecvrAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST) methodsFor: 'unclassified'!
	 apply: aTool 

^ aTool temporaryDeclNode: self.



! 
  name: n type: t 

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST_superInit_name: n type: t.

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST_1_init_name: n type: t.

^ self.



! 
 isTemporaryAST 

^true.



! 
 printOn: strm 

super  printOn: strm.

 strm nextPutAll:('(' , self name ,')').

^ self.



! 
  Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST_superInit_name: n type: t 

super   name: n type: t.

^ self.



! 
  Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST_1_init_name: n type: t 

^ self.



! 
 variableClass 

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST at: 1)  TemporaryVariableAST.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST := mmd !
	  name: n type: t 

^ self basicNew  name: n type: t.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST) comment: 'This node represents reference to a temporary variable.'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST) methodsFor: 'unclassified'!
	  Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST_superInit_name: n start: s end: e 

super  new.

^ self.



! 
  Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST_1_init_name: n start: s end: e 

^ self.



! 
 apply: aTool 

^ aTool temporaryNode: self.



! 
  name: n start: s end: e 

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST_superInit_name: n start: s end: e.

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST_1_init_name: n start: s end: e.

 self name: n.

 self start: s.

 self end: e.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST := mmd !
	  name: n start: s end: e 

^ self basicNew  name: n start: s end: e.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_TemporaryVariableAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST) methodsFor: 'unclassified'!
	  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST_superInit_name: n start: s end: e 

super  new.

^ self.



! 
  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST_1_init_name: n start: s end: e 

^ self.



! 
 apply: aTool 

^ aTool parameterNode: self.



! 
  name: n start: s end: e 

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST_superInit_name: n start: s end: e.

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST_1_init_name: n start: s end: e.

 self name: n.

 self start: s.

 self end: e.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST := mmd !
	  name: n start: s end: e 

^ self basicNew  name: n start: s end: e.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ParameterVariableAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor) methodsFor: 'unclassified'!
	 explicitOuterReceiverNode: aNode 

^true.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor_superInit_new 

super  new.

^ self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor_1_init 

^ self.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ExplicitReceiverVisitor metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor_1_init 

^ self.



! 
 boolNode: node 

^true.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor_superInit_new 

super  new.

^ self.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_BoolVisitor metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor_superInit_new 

super  new.

^ self.



! 
 receiverNode: node 

^true.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor_1_init.

^ self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor_1_init 

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverVisitor metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST_1_init 

^ self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST_superInit_new 

super  new.

^ self.



! 
 apply: aTool 

^ aTool receiverNode: self.



! 
 printOn: strm 

super  printOn: strm.

 strm nextPutAll:'(self)'.

^ self.



! 
 name 

^#'self'.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ReceiverAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor_1_init 

^ self.



! 
 contextNode: node 

^true.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor_superInit_new 

super  new.

^ self.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextVisitor metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor_1_init 

^ self.



! 
 implicitSendNode: aNode 

^true.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor_1_init.

^ self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor_superInit_new 

super  new.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrVisitor metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' depth')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST) comment: '
Represent a send of a message with an implicit receiver (aka a here send).
'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST) methodsFor: 'unclassified'!
	  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST_1_init_send: aMsg depth: d 

 self depth: d.

^ self.



! 
depth: depth_val depth := depth_val! 
  send: aMsg depth: d 

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST_superInit_send: aMsg depth: d.

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST_1_init_send: aMsg depth: d.

^ self.



! 
  Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST_superInit_send: aMsg depth: d 

super  send: aMsg.

^ self.



! 
 isExpressionNode 

^true.



! 
depth ^depth! 
 recv 

^ self  assert:[ 

false.

] message:'There is no receiver node. It is implicit'.



! 
 apply: aTool 

^ aTool implicitSendNode: self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST := mmd !
	  send: aMsg depth: d 

^ self basicNew  send: aMsg depth: d.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ImplicitRecvrSendAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor_1_init 

^ self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor_superInit_new 

super  new.

^ self.



! 
 nilNode: node 

^true.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilVisitor metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor) comment: 'Extends the standard FalseVisitor with methods for dealing with the node types introduced by the rewriter..'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor_1_init 

^ self.



! 
 superSendNode: aNode 

^false.



! 
 contextNode: node 

^false.



! 
 receiverNode: aNode 

^false.



! 
 temporaryNode: aNode 

^false.



! 
 ifNode: aNode 

^false.



! 
 implicitSendNode: aNode 

^false.



! 
 loopNode: aNode 

^false.



! 
 parameterNode: aNode 

^false.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor_1_init.

^ self.



! 
 boolNode: node 

^false.



! 
 nilNode: node 

^false.



! 
 variableNode: aNode 

^false.



! 
 returnInstVarMethodNode: aNode 

^false.



! 
 superVarNode: aNode 

^false.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor_superInit_new 

super  new.

^ self.



! 
 returnSelfMethodNode: aNode 

^false.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_FalseVisitor metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST_1_init 

^ self.



! 
 apply: aTool 

^ aTool superVarNode: self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST_superInit_new 

super   name:#'super' type:nil.

^ self.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperVarAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST) comment: 'Represents uses of thisContext. I expect these to be restricted in future versions. Currently, we use it for outer sends and super sends'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST) methodsFor: 'unclassified'!
	 apply: aTool 

^ aTool contextNode: self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST_1_init 

^ self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST_superInit_new 

super  new.

^ self.



! 
 printOn: strm 

super  printOn: strm.

 strm nextPutAll:'(thisContext)'.

^ self.



! 
 name 

^#'thisContext'.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_ContextAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor_1_init 

^ self.



! 
 instVarNode: node 

^true.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor_superInit_new 

super  new.

^ self.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_InstVarVisitor metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor) methodsFor: 'unclassified'!
	 superSendNode: node 

^true.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor_superInit_new 

super  new.

^ self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor_1_init 

^ self.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendVisitor metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST) comment: 'This code is currently unused.  
Unlike Smalltalk, super calls in Newspeak cannot be statically bound.
Hence, we cannot use the Squeak VM''s  super send byte codes. Currently, super sends are rewritten into a complex call structure by the rewriter, to ensure the correct binding of super.

When the Newspeak VM is modified to support dynamic binding of super sends, we will probably use this node and allied code,  which can easily be processed by the byte code compiler and code generator.'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST_1_init: aMsg 

^ self.



! 
 apply: aTool 

^ aTool superSendNode: self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST_superInit_send: aMsg 

super  send: aMsg.

^ self.



! 
 send: aMsg 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST_superInit_send: aMsg.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST_1_init: aMsg.

^ self.



! 
 recv 

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST at: 1)  SuperVarAST new.



! 
 isExpressionNode 

^true.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST := mmd !
	 send: aMsg 

^ self basicNew send: aMsg.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_SuperSendAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' expr')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST) comment: 'This class represents a ''local return'' (LR) -  a return from a block to its caller, as opposed to the caller of its enclosing method (a ''non-local return'' or NLR).

An actual return statement in a block means an NLR; an LR is implicit in the source language, and occurs on the last statement of the block, unless that statement is a true return (NLR).  However, the back end of the compiler requires that this information be represented explicitly. This node does that.'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST) methodsFor: 'unclassified'!
	 apply: aTool 

^ aTool blockLocalReturnNode: self.



! 
expr ^expr! 
  expression: x start: s end: e 

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST_superInit_expression: x start: s end: e.

 self  Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST_1_init_expression: x start: s end: e.

 self start: s.

 self end: e.

^ self.



! 
expr: expr_val expr := expr_val! 
  Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST_1_init_expression: x start: s end: e 

 self expr: x.

^ self.



! 
  Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST_superInit_expression: x start: s end: e 

super  new.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST := mmd !
	  expression: x start: s end: e 

^ self basicNew  expression: x start: s end: e.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_BlockLocalReturnAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST) methodsFor: 'unclassified'!
	 apply: aTool 

^ aTool nilNode: self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST_1_init 

^ self.



! 
 Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST_superInit_new 

super  new.

^ self.



! 
 name 

^#'nil'.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_Rewriter metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST. ! 
	Newspeak2StrongtalkCompilation_Compiler_Rewriter_NilAST metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_Rewriter !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser_slot scopeStack resultStream currentSelector')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler) comment: 'The compiler is a visitor on an AST that has been processed by the rewriter.
It is a subtype of  ASTTool[Self] - that is, its methods do not return individual results, but instead side effect state within the compiler.

It generates Smalltalk code, subject to certain assumptions about the structure if the enclosing Smalltalk classes.

Among these: 

Each class has a class variable named EnclosingObjects_N, where N is a per mixin unique ID (for now, just its fully qualified name, using _ as the synthetic separator), and provides a setter for it named enclosingObjects:.  For top level classes, this class variable is set to an array of size 1 with an entry set to nil.

Each mixin has metadata that specifies its nested mixins in a map indexed by the fully qualified name of the mixin. The metadata also links to the actual mixin. This metadata is made available to each invocation of the mixin in a class variable named MixinMetadata_N.  The class variable can be set using the setter mixinMetadata:.'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler) methodsFor: 'unclassified'!
	 slotsPerMethod 

^64.



! 
 contextNode: node 

 self  variableNode: node.

^ self.



! 
 stringNode: node 

 self  assert:[ 

 node isStringNode.

] message:'String node expected'.

 self  generate: node val printString.

^ self.



! 
 blockLocalReturnNode: node 

 node expr apply: self.

^ self.



! 
currentSelector ^currentSelector! 
 temporaryDeclNode: node 

 self  variableNode: node.

^ self.



! 
scopeStack: scopeStack_val scopeStack := scopeStack_val! 
 cascadedSendNode: node 

 node prevSend apply: self.

 self  generate:'; '.

 self  newline.

 node msg apply: self.

^ self.



! 
 popScope 

^ self  scopeStack removeLast.



! 
 Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_1_init 

 self resultStream:nil.

 self scopeStack:nil.

 self currentSelector:nil.

^ self.



! 
 newline 

 self  resultStream nextPut: self Character lf; 

 nextPut: self Character cr.

^ self.



! 
 assignmentNode: node 

|  i |

 self  assert:[ 

 node isAssignmentNode.

] message:'Assignment node expected'.

 node var apply: self.

 self  generate:' :='.

 node expr apply: self.

^ self.



! 
scopeStack ^scopeStack! 
 setup 

 self  resultStream:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: 2)  WriteStream on: self String new).

 self  scopeStack: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: 2)  OrderedCollection new.

^ self.



! 
 parameterNode: node 

 self  variableNode: node.

^ self.



! 
 generate: s 

 self  resultStream nextPutAll: s.

^ self.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_1_init.

 self  setup.

^ self.



! 
 explicitOuterReceiverNode: node 

 self  generateLeadingWhitespace: node.

 self  processOuterReceiverAtDepth: node depth.

^ self.



! 
resultStream ^resultStream! 
 nilNode: node 

 self  assert:[ 

 node apply: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: 1)  rewriter NilVisitor new.

] message:'Nil node expected'.

 self  generate:'nil'.

^ self.



! 
 parameterDeclNode: node 

 self  variableNode: node.

^ self.



! 
 codeBodyNode: node 

 node temporaries isEmpty ifFalse:[ 

 self  generate:'| '.

 node temporaries do:[ : t | 

 t apply: self.

 self  generate:' '.

].

 self  generate:'|'.

 self  newline.

].

 node statements do:[ : s | 

 s apply: self.

 self  generate:'.'.

 self  newline.

].

^ self.



! 
 returnStatNode: node 

 self  assert:[ 

 node isReturnStatNode.

] message:'Return node expected'.

 self  generate:'^'.

 node expr apply: self.

^ self.



! 
 currentScope 

^ self  scopeStack last.



! 
resultStream: resultStream_val resultStream := resultStream_val! 
 literalArray 

|  literals |

 literals := self Array new: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: 1)  literalTable size.

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: 1)  literalTable keysAndValuesDo:[ : k : v | 

 literals  at: v +1 put: k.

].

^ literals.



! 
 receiverNode: node 

 self  variableNode: node.

^ self.



! 
 pushScope: s 

 self  scopeStack addLast: s.

^ self.



! 
 currentMethod 

^ self  currentScope at:#'`currentMethod'.



! 
 temporaryNode: node 

 self  variableNode: node.

^ self.



! 
 superSendNode: node 

 self  generate:'super '.

 node msg apply: self.

^ self.



! 
 mixinClassNode: node 

 self  generate:'self actualClass mixin'.

^ self.



! 
MessageParser
	| nestedClass enclosingObjectArray myNested depth |
	Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler 
			nestedMixins at: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser.
		myNested := (nestedClass mixin |>  (MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler Mirror on: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: 2)  Parser)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser_slot := myNested.
		].
	^Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser_slot! 
currentSelector: currentSelector_val currentSelector := currentSelector_val! 
 processBinaryMessageArgument: arg 

|  parenthesesRequired |

 parenthesesRequired :=false.

 arg isAssignmentNode ifTrue:[ 

 parenthesesRequired :=true.

].

 arg isSendNode ifTrue:[ 

 parenthesesRequired :=( self  precedenceOf: arg) >1.

].

 parenthesesRequired ifTrue:[ 

 self  generate:'('.

].

 arg apply: self.

 parenthesesRequired ifTrue:[ 

 self  generate:')'.

].

^ self.



! 
 numberNode: node 

 self  assert:[ 

 node isNumberNode.

] message:'Number node expected'.

 self  generate: node val printString.

^ self.



! 
 precedenceOf: send 

 send isCascadedSendNode ifTrue:[ 

^3.

].

 send msg sel first isLetter ifFalse:[ 

^2.

].

 send msg sel last =$: ifTrue:[ 

^3.

].

^1.



! 
 processKeywordMessageArgument: arg 

|  parenthesesRequired |

 parenthesesRequired :=false.

 arg isAssignmentNode ifTrue:[ 

 parenthesesRequired :=true.

].

 arg isSendNode ifTrue:[ 

 parenthesesRequired :=( self  precedenceOf: arg) =3.

].

 parenthesesRequired ifTrue:[ 

 self  generate:'('.

].

 arg apply: self.

 parenthesesRequired ifTrue:[ 

 self  generate:')'.

].

^ self.



! 
 normalSendNode: node 

|  parenthesesRequired |

 self  assert:[ 

 node isNormalSendNode.

] message:'NormalSendNode expected'.

 parenthesesRequired :=false.

 node recv isAssignmentNode ifTrue:[ 

 parenthesesRequired :=true.

].

 node recv isSendNode ifTrue:[ 

 parenthesesRequired :=( self  precedenceOf: node recv) >( self  precedenceOf: node) or:[ 

( self  precedenceOf: node recv) =3.

].

].

 parenthesesRequired ifTrue:[ 

 self  generate:'('.

].

 node recv apply: self.

 parenthesesRequired ifTrue:[ 

 self  generate:')'.

].

 node msg apply: self.

^ self.



! 
 implicitSendNode: node 

 self  generateLeadingWhitespace: node.

 self  processOuterReceiverAtDepth: node depth.

 node msg apply: self.

^ self.



! 
 symbolNode: node 

 self  assert:[ 

 node isSymbolNode.

] message:'Symbol node expected'.

 self  generate: node val printString.

^ self.



! 
 methodNode: node 

|  argC |

 self  setup.

 self  pushScope:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: 1)  scopeMap at: node).

 node pattern apply: self.

 self  generate:' '.

 self  newline.

 node body apply: self.

 self  newline.

 self  popScope.

^ self.



! 
 superVarNode: node 

 self  variableNode: node.

^ self.



! 
 result 

^( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: 2)  MethodMirror named: self  currentSelector) method: self  resultStream contents.



! 
 boolNode: node 

 self  assert:[ 

 node apply: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: 1)  rewriter BoolVisitor new.

] message:'Boolean node expected'.

 self  generate: node val printString.

^ self.



! 
 processOuterReceiverAtDepth: n 

 n =0 ifTrue:[ 

^ self  generate:'self '.

].

 self  generate:'(EnclosingObjects'.

 self  generate: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: 1)  syntheticNameSeparator.

 self  generate: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: 1)  currentMixinUID.

 self  generate:' at: '.

 self  generate: n printString.

 self  generate:') '.

^ self.



! 
 messagePatternNode: node 

|  kwds |

 self  generateLeadingWhitespace: node.

 self  currentSelector: node selector.

 node parameters isEmpty ifTrue:[ 

^ self  generate: node selector.

].

 node parameters size =1 ifTrue:[ 

 self  generate: node selector.

^ node parameters first apply: self.

].

 kwds := self  MessageParser new kw plus parse: self  currentSelector asString readStream.

 node parameters  with: kwds do:[ : p : kw | 

 self  generate:' '.

 self  generate: kw.

 p apply: self.

].

^ self.



! 
 variableNode: node 

 self  generateLeadingWhitespace: node.

 self  generate: node name.

^ self.



! 
 charNode: node 

 self  generate: node val printString.

^ self.



! 
 messageNode: m 

|  kwds |

 self  generateLeadingWhitespace: m.

 m args isEmpty ifTrue:[ 

^ self  generate: m sel.

].

 m args size =1 ifTrue:[ 

 self  generate: m sel.

 m sel =#'-' ifTrue:[ 

 self  generate:' '.

].

^ self  processBinaryMessageArgument: m args first.

].

 kwds := self  MessageParser new kw plus parse: m sel asString readStream.

 m args  with: kwds do:[ : a : kw | 

 self  generate:' '.

 self  generate: kw.

 self  processKeywordMessageArgument: a.

].

^ self.



! 
 generateLeadingWhitespace: node 

 self  generate:' '.

^ self.



! 
 Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_superInit_new 

super  new.

^ self.



! 
 blockNode: node 

 self  pushScope:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler at: 1)  scopeMap at: node).

 self  generate:'['.

 node parameters do:[ : p | 

 self  generate:' :'.

 p apply: self.

].

 self  generate:' '.

 node parameters isEmpty not ifTrue:[ 

 self  generate:'| '.

].

 self  newline.

 node body apply: self.

 self  generate:']'.

 self  popScope.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler. ! 
	Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser) comment: 'A specialized NS2 parser that can deal with synthetic identifiers.'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser) methodsFor: 'unclassified'!
	 Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser_superInit_new 

super  new.

^ self.



! 
 letter 

^super  letter |( self char:$`).



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser_1_init.

^ self.



! 
 Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser_1_init 

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser. ! 
	Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler_MessageParser metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler_AST2SmalltalkCompiler !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_MixinClassNode as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_MixinClassNode EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_MixinClassNode')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_MixinClassNode) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_MixinClassNode) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_MixinClassNode) comment: 'A special AST node to represent access to the mixin class stored in a method. Recall that outer classes have accessors for their nested classes; these lazily manufacture the class, cache it, and later access the cached value.

To do this, the accessor must apply the mixin of the nested class to the superclass. Said mixin is nested within the mixin that defined the accessor (the mixin of the outer class declaration), and can be accessed via the outer mixin''s metadata slot.

The issue then is how to get the outer mixin.  In Squeak, for example, the outer mixin is stored in the last literal of every one of its methods (what Squeak calls the ''''methodClass''''). To reach it, we must push the last literal of the method on to the operand stack.

However, the accessor method is not specified at the byte code level; that would be tedious, and also tied to a specific implementation (the Squeak byte codes). It is much better to specify the method via an AST that is compiled (we could use source code, but the use of synthetic names makes that problematic). 

In order to specify access to the mixin in the accessor method, we need to provide an AST that corresponds to the idea of ''''accessing my mixin''''. This is what this class does.

The rewriter leaves this node untouched, while the lower layers of the compiler that deal with code generation produce suitable code for it - e.g., Squeak byte codes.

'!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_MixinClassNode) methodsFor: 'unclassified'!
	 apply: aTool 

^ aTool mixinClassNode: self.



! 
 Newspeak2StrongtalkCompilation_Compiler_MixinClassNode_superInit_new 

super  new.

^ self.



! 
 isExpressionNode 

^true.



! 
 Newspeak2StrongtalkCompilation_Compiler_MixinClassNode_1_init 

^ self.



! 
 new 

 self Newspeak2StrongtalkCompilation_Compiler_MixinClassNode_superInit_new.

 self Newspeak2StrongtalkCompilation_Compiler_MixinClassNode_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_MixinClassNode) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_MixinClassNode := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_MixinClassNode := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_MixinClassNode. ! 
	Newspeak2StrongtalkCompilation_Compiler_MixinClassNode metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler !
	Delta define: #Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' scopeStack currentDepth')
	 classVariables: 'MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder')!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder) group: 'newspeak'!
	(Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder) comment: #''!
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder) methodsFor: 'unclassified'!
	 prvtScopeFor: c 

|  s  outerMixins  depth |

 outerMixins := self  enclosingMixinsOf: c.

 self  currentDepth:( outerMixins size - 1).

 depth :=0.

 outerMixins do:[ : o | 

 s := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  Scope new superScope: s.

( self  selectorsFor: o) do:[ : sel | 

 s  at: sel put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  SymbolTableEntry for:(( self Array new:2)  at:1 put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  MessagePatternAST new selector: sel); 

  at:2 put: depth; 

 yourself)).

].

 depth := depth +1.

].

^ s.



! 
 stringNode: aNode 

^ self.



! 
  nestedIn: initialScope atLevel: initialDepth 

 self  Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder_superInit_nestedIn: initialScope atLevel: initialDepth.

 self  Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder_1_init_nestedIn: initialScope atLevel: initialDepth.

 self  pushScope: initialScope.

^ self.



! 
scopeStack: scopeStack_val scopeStack := scopeStack_val! 
currentDepth ^currentDepth! 
 classHeaderNode: aNode 

 aNode constructor apply: self.

 aNode slots do:[ : s | 

 s initializer ifNotNil:[ : i | 

 i apply: self.

].

].

 aNode initExprs do:[ : e | 

 e apply: self.

].

^ self.



! 
 cascadedSendNode: aNode 

 aNode prevSend apply: self.

 aNode msg apply: self.

^ self.



! 
 popScope 

^ self  scopeStack removeLast.



! 
 codeBodyNode: aNode 

|  ts |

 ts := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  Scope new.

 aNode temporaries do:[ : t | 

 ts  at: t name put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  SemanticVarDecl decl:(( self Array new:2)  at:1 put: t slotDecl; 

  at:2 put: self  currentDepth; 

 yourself)); 

  at:( t name asString ,':') asSymbol put: t slotDecl.

].

 ts end: aNode end.

 self  nestScope: ts.

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 1)  scopeMap  at: aNode put: ts.

 aNode statements do:[ : s | 

 s apply: self.

].

 self  popScope.

^ self.



! 
 returnStatNode: aNode 

 aNode expr apply: self.

^ self.



! 
 enclosingMixinsOf: m 

|  e  enclosers |

^ m enclosingClassStencil enclosingClassStencils collect:[ : stencil | 

 stencil mixin.

].



! 
scopeStack ^scopeStack! 
 buildScopeFor: m 

^ self  prvtScopeFor: m.



! 
 selectorsFor: m 

|  result |

 result := m methods asOrderedCollection collect:[ : s | 

 s name.

].

 result addAll:( m slots asOrderedCollection collect:[ : s | 

 s name.

]).

 result addAll:(( m slots asOrderedCollection select:[ : s | 

 s isMutable.

]) collect:[ : s | 

 s name ,':'.

]).

 result addAll:( m classes asOrderedCollection collect:[ : s | 

 s name.

]).

^ result.



! 
 currentScope 

^ self  scopeStack last.



! 
  visitMethod: aNode within: m 

^ self   visitNode: aNode within: m.



! 
 pushScope: s 

 self  scopeStack addLast: s.

^ self.



! 
 mixinClassNode: aNode 

^ self.



! 
  Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder_superInit_nestedIn: initialScope atLevel: initialDepth 

super  new.

^ self.



! 
 numberNode: aNode 

^ self.



! 
currentDepth: currentDepth_val currentDepth := currentDepth_val! 
 symbolNode: aNode 

^ self.



! 
 nestScope: s 

 s superScope: self  currentScope.

 self  pushScope: s.

^ self.



! 
 methodNode: aNode 

 self  currentScope  at: aNode pattern selector put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  SymbolTableEntry for:(( self Array new:2)  at:1 put: aNode pattern; 

  at:2 put: self  currentDepth; 

 yourself)).

 aNode pattern apply: self.

 aNode body apply: self.

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 1)  scopeMap  at: aNode put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 1)  scopeMap at: aNode body).

 self  popScope.

^ self.



! 
 blockNode: aNode 

|  ps |

 ps := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  Scope new.

 aNode parameters do:[ : p | 

 ps  at: p name put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  SemanticVarDecl decl:(( self Array new:2)  at:1 put: p; 

  at:2 put: self  currentDepth; 

 yourself)).

].

 self  nestScope: ps.

 aNode body apply: self.

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 1)  scopeMap  at: aNode put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 1)  scopeMap at: aNode body).

 self  popScope.

^ self.



! 
 messagePatternNode: aNode 

|  ps |

 ps := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  Scope new.

 aNode parameters do:[ : p | 

 ps  at: p name put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  SemanticVarDecl decl:(( self Array new:2)  at:1 put: p; 

  at:2 put: self  currentDepth; 

 yourself)).

].

 self  nestScope: ps.

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 1)  scopeMap  at: aNode put: ps.

^ self.



! 
 variableNode: aNode 

 self  assert:[ 

 aNode name =#'_here' or:[ 

 self  isPseudoVariableNode: aNode.

].

] message:'Unexpected variable name'.

^ self.



! 
 isPseudoVariableNode: aNode 

^ aNode name =#'self' or:[ 

 aNode name =#'super' or:[ 

 aNode name =#'outer' or:[ 

 aNode name =#'thisContext'.

].

].

].



! 
 charNode: aNode 

^ self.



! 
 classNode: aNode 

|  vs |

 self  currentScope  at: aNode name put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  SymbolTableEntry for:(( self Array new:2)  at:1 put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  MessagePatternAST new selector: aNode name); 

  at:2 put: self  currentDepth; 

 yourself)).

 vs := (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  Scope new.

 self  currentDepth:( self  currentDepth +1).

 aNode hdr slots do:[ : v | 

 vs  at: v name put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  SymbolTableEntry for:(( self Array new:2)  at:1 put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  MessagePatternAST new selector: v name); 

  at:2 put: self  currentDepth; 

 yourself)).

 v isMutable ifTrue:[ 

 vs  at:( v name asString ,':') asSymbol put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  SymbolTableEntry for:(( self Array new:2)  at:1 put:( (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  MessagePatternAST new selector:( v name asString ,':') asSymbol); 

  at:2 put: self  currentDepth; 

 yourself)).

].

].

 self nestScope: vs.

 aNode instanceSide apply: self.

 self  popScope.

 aNode classSide apply: self.

 self  currentDepth:( self  currentDepth - 1).

^ self.



! 
 messageNode: aNode 

 aNode args do:[ : a | 

 a apply: self.

].

^ self.



! 
 tupleNode: aNode 

 aNode elements do:[ : e | 

 e apply: self.

].

^ self.



! 
  Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder_1_init_nestedIn: initialScope atLevel: initialDepth 

 self scopeStack: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  OrderedCollection new.

 self currentDepth: initialDepth.

^ self.



! 
 mixinApplication: node 

 node mixinExpr apply: self.

 node superclassExpr apply: self.

^ self.



! 
  visitNode: aNode within: m 

 self  pushScope:( self  buildScopeFor: m).

 aNode apply: self.

^ (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 1)  scopeMap.



! 
 sideNode: aNode 

 (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 1)  scopeMap  at: aNode put: self  currentScope.

 aNode categories do:[ : c | 

 c methods do:[ : m | 

 m apply: self.

].

].

 aNode nestedClasses do:[ : nc | 

 nc apply: self.

].

^ self.



! 
 normalSendNode: aNode 

 aNode recv apply: self.

 aNode msg apply: self.

^ self.



! 
 varDeclNode: aNode 

^ self.



! 
 !
	! (Delta mirrorFor: #Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder := eos !
	mixinMetadata: mmd MixinMetadata_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder := mmd !
	  nestedIn: initialScope atLevel: initialDepth 

^ self basicNew  nestedIn: initialScope atLevel: initialDepth.



! 
		 new 

^ self  nestedIn: (EnclosingObjects_Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder at: 2)  Scope new atLevel:0.



! 
		 !
	Newspeak2StrongtalkCompilation_Compiler metadata addNestedClass: Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder. ! 
	Newspeak2StrongtalkCompilation_Compiler_ScopeBuilder metadata enclosingMixin: Newspeak2StrongtalkCompilation_Compiler !
	