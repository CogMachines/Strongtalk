Delta define: #BrazilMappingForWin32 as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' TimeStamp BrazilMappingForWin32_WindowContentManager_slot BrazilMappingForWin32_AgentWithHandle_slot BrazilMappingForWin32_TextDisplayAgent_slot brazil BrazilMappingForWin32_HyperlinkAgentStateClasses_slot BrazilMappingForWin32_ImageAgent_slot BrazilMappingForWin32_MenuAgent_slot Callback Dictionary hyperlinkAgentStates BrazilMappingForWin32_VerticalVisualSequenceAgent_slot MessageBox BrazilMappingForWin32_EllipseShapeAgent_slot BrazilMappingForWin32_MenuBuilder_slot BrazilMappingForWin32_NullColoredAgent_slot UnhandledError useDoubleBuffering BrazilMappingForWin32_VerticalViewportAgent_slot BrazilMappingForWin32_ActiveImageAgentStateClasses_slot FileStream BrazilMappingForWin32_ListBoxAgent_slot BrazilMappingForWin32_PolygonShapeAgent_slot BrazilMappingForWin32_Agent_slot squeakWindowHandle ModifierKeyState BrazilMappingForWin32_DesktopAgent_slot Error BrazilMappingForWin32_ViewportAgent_slot NsFFISessionManager Font Alien Time BrazilMappingForWin32_AgentFactory_slot BrazilMappingForWin32_TextDecorator_slot Process BrazilMappingForWin32_WindowControlAgent_slot BrazilMappingForWin32_ActiveLabelAgent_slot BrazilMappingForWin32_RectangleShapeAgent_slot BrazilMappingForWin32_LineShapeAgent_slot BrazilMappingForWin32_BoxShapeAgent_slot windowsSession Transcript BrazilMappingForWin32_ActiveImageAgent_slot IdentityDictionary BrazilMappingForWin32_ButtonAgent_slot GenericAgent activeImageAgentStates BrazilMappingForWin32_LabelAgent_slot BlackMarket WorldState BrazilMappingForWin32_HyperlinkAgent_slot agentFactory BrazilMappingForWin32_RichEditControlAgent_slot BrazilMappingForWin32_WindowAgent_slot UnsafeAlien AbstractAgentFactory OrderedCollection BrazilMappingForWin32_BogusAgent_slot BrazilMappingForWin32_NullAgent_slot api BrazilMappingForWin32_SensitiveImageAgent_slot BrazilMappingForWin32_WindowsSession_slot BrazilMappingForWin32_TextViewAgent_slot')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32 EnclosingObjects_BrazilMappingForWin32')!
	(Delta mirrorFor: #BrazilMappingForWin32) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32) comment: 'This is the top-level Brazil Windows mapping module that holds together all the bits and pieces of the mapping, most importantly agent classes and the agent factory.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #BrazilMappingForWin32) methodsFor: 'unclassified'!
	EllipseShapeAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_EllipseShapeAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_EllipseShapeAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  BoxShapeAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_EllipseShapeAgent_slot := myNested.
		].
	^BrazilMappingForWin32_EllipseShapeAgent_slot! 
IdentityDictionary: IdentityDictionary_val IdentityDictionary := IdentityDictionary_val! 
MessageBox: MessageBox_val MessageBox := MessageBox_val! 
ModifierKeyState: ModifierKeyState_val ModifierKeyState := ModifierKeyState_val! 
ButtonAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ButtonAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_ButtonAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  WindowControlAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ButtonAgent_slot := myNested.
		].
	^BrazilMappingForWin32_ButtonAgent_slot! 
WindowsSession
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_WindowsSession_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_WindowsSession.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_WindowsSession_slot := myNested.
		].
	^BrazilMappingForWin32_WindowsSession_slot! 
  dumpError: ex toLog: filename 

|  signaler |

 self   appendToLogWithTimestamp: filename using:[ : stream | 

 signaler := ex signalerContext.

 stream cr; 

 nextPutAll:( self  safePrintStringOf: ex).

100 timesRepeat:[ 

 stream cr; 

 nextPutAll:( self  safePrintStringOf: signaler).

 signaler := signaler sender.

 signaler ifNil:[ 

^ self.

].

].

].

^ self.



! 
BlackMarket ^BlackMarket! 
Callback ^Callback! 
Dictionary ^Dictionary! 
hyperlinkAgentStates ^hyperlinkAgentStates! 
ImageAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ImageAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_ImageAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  NullAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ImageAgent_slot := myNested.
		].
	^BrazilMappingForWin32_ImageAgent_slot! 
Transcript ^Transcript! 
squeakWindowHandle: squeakWindowHandle_val squeakWindowHandle := squeakWindowHandle_val! 
Font: Font_val Font := Font_val! 
UnhandledError ^UnhandledError! 
AbstractAgentFactory: AbstractAgentFactory_val AbstractAgentFactory := AbstractAgentFactory_val! 
useDoubleBuffering: useDoubleBuffering_val useDoubleBuffering := useDoubleBuffering_val! 
ActiveImageAgentStateClasses
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ActiveImageAgentStateClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_ActiveImageAgentStateClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ActiveImageAgentStateClasses_slot := myNested.
		].
	^BrazilMappingForWin32_ActiveImageAgentStateClasses_slot! 
TextDecorator
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_TextDecorator_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_TextDecorator.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_TextDecorator_slot := myNested.
		].
	^BrazilMappingForWin32_TextDecorator_slot! 
agentFactory ^agentFactory! 
ModifierKeyState ^ModifierKeyState! 
NullAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_NullAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_NullAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  Agent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_NullAgent_slot := myNested.
		].
	^BrazilMappingForWin32_NullAgent_slot! 
LabelAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_LabelAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_LabelAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  NullAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_LabelAgent_slot := myNested.
		].
	^BrazilMappingForWin32_LabelAgent_slot! 
Error ^Error! 
GenericAgent: GenericAgent_val GenericAgent := GenericAgent_val! 
NsFFISessionManager ^NsFFISessionManager! 
Font ^Font! 
  withLogFileNamed: filename do: action 

|  file |

 file := self  FileStream fileNamed: filename asFileName.

 file print: self  TimeStamp now; 

 cr.

^[ 

 action value: file.

] ensure:[ 

 file close.

].



! 
Process: Process_val Process := Process_val! 
  appendToLogWithTimestamp: filename using: action 

 self   appendToLog: filename using:[ : file | 

 file cr; 

 nextPutAll:'----------------------------------------------'; 

 cr; 

 nextPutAll: self  TimeStamp now printString; 

 cr; 

 nextPutAll:'----------------------------------------------'.

 action value: file.

].

^ self.



! 
Dictionary: Dictionary_val Dictionary := Dictionary_val! 
BogusAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_BogusAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_BogusAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  NullAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_BogusAgent_slot := myNested.
		].
	^BrazilMappingForWin32_BogusAgent_slot! 
RectangleShapeAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_RectangleShapeAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_RectangleShapeAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  BoxShapeAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_RectangleShapeAgent_slot := myNested.
		].
	^BrazilMappingForWin32_RectangleShapeAgent_slot! 
Process ^Process! 
AgentFactory
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_AgentFactory_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_AgentFactory.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  AbstractAgentFactory)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_AgentFactory_slot := myNested.
		].
	^BrazilMappingForWin32_AgentFactory_slot! 
UnhandledError: UnhandledError_val UnhandledError := UnhandledError_val! 
 STILL_LEFT_TO_DO 

 self error:'documentation only'.

^ self.



! 
windowsSession ^windowsSession! 
Time ^Time! 
IdentityDictionary ^IdentityDictionary! 
GenericAgent ^GenericAgent! 
TimeStamp: TimeStamp_val TimeStamp := TimeStamp_val! 
ViewportAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ViewportAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_ViewportAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  Agent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ViewportAgent_slot := myNested.
		].
	^BrazilMappingForWin32_ViewportAgent_slot! 
HyperlinkAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_HyperlinkAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_HyperlinkAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  ActiveLabelAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_HyperlinkAgent_slot := myNested.
		].
	^BrazilMappingForWin32_HyperlinkAgent_slot! 
Agent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_Agent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_Agent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  GenericAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_Agent_slot := myNested.
		].
	^BrazilMappingForWin32_Agent_slot! 
ListBoxAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ListBoxAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_ListBoxAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  WindowControlAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ListBoxAgent_slot := myNested.
		].
	^BrazilMappingForWin32_ListBoxAgent_slot! 
MenuAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_MenuAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_MenuAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_MenuAgent_slot := myNested.
		].
	^BrazilMappingForWin32_MenuAgent_slot! 
ActiveImageAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ActiveImageAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_ActiveImageAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  ImageAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ActiveImageAgent_slot := myNested.
		].
	^BrazilMappingForWin32_ActiveImageAgent_slot! 
UnsafeAlien ^UnsafeAlien! 
AbstractAgentFactory ^AbstractAgentFactory! 
ActiveLabelAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ActiveLabelAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_ActiveLabelAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  LabelAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ActiveLabelAgent_slot := myNested.
		].
	^BrazilMappingForWin32_ActiveLabelAgent_slot! 
OrderedCollection: OrderedCollection_val OrderedCollection := OrderedCollection_val! 
WindowAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_WindowAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_WindowAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  AgentWithHandle)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_WindowAgent_slot := myNested.
		].
	^BrazilMappingForWin32_WindowAgent_slot! 
WindowControlAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_WindowControlAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_WindowControlAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  AgentWithHandle)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_WindowControlAgent_slot := myNested.
		].
	^BrazilMappingForWin32_WindowControlAgent_slot! 
api: api_val api := api_val! 
Callback: Callback_val Callback := Callback_val! 
LineShapeAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_LineShapeAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_LineShapeAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  NullAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_LineShapeAgent_slot := myNested.
		].
	^BrazilMappingForWin32_LineShapeAgent_slot! 
TimeStamp ^TimeStamp! 
NullColoredAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_NullColoredAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_NullColoredAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  NullAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_NullColoredAgent_slot := myNested.
		].
	^BrazilMappingForWin32_NullColoredAgent_slot! 
 platform: platform 

 self BrazilMappingForWin32_superInit_platform: platform.

 self BrazilMappingForWin32_1_init: platform.

^ self.



! 
SensitiveImageAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_SensitiveImageAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_SensitiveImageAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  ImageAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_SensitiveImageAgent_slot := myNested.
		].
	^BrazilMappingForWin32_SensitiveImageAgent_slot! 
FileStream: FileStream_val FileStream := FileStream_val! 
brazil ^brazil! 
activeImageAgentStates: activeImageAgentStates_val activeImageAgentStates := activeImageAgentStates_val! 
AgentWithHandle
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_AgentWithHandle_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_AgentWithHandle.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  Agent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_AgentWithHandle_slot := myNested.
		].
	^BrazilMappingForWin32_AgentWithHandle_slot! 
Error: Error_val Error := Error_val! 
WindowContentManager
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_WindowContentManager_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_WindowContentManager.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_WindowContentManager_slot := myNested.
		].
	^BrazilMappingForWin32_WindowContentManager_slot! 
MessageBox ^MessageBox! 
RichEditControlAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_RichEditControlAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_RichEditControlAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  WindowControlAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_RichEditControlAgent_slot := myNested.
		].
	^BrazilMappingForWin32_RichEditControlAgent_slot! 
useDoubleBuffering ^useDoubleBuffering! 
 resetForNewImageSession 

 self  api resetForNewImageSession.

 self  windowsSession resetForNewImageSession.

^ self.



! 
FileStream ^FileStream! 
WorldState: WorldState_val WorldState := WorldState_val! 
brazil: brazil_val brazil := brazil_val! 
 appendStackToLog: filename 

|  signaler |

 self   appendToLogWithTimestamp: filename using:[ : stream | 

100 timesRepeat:[ 

 stream cr; 

 nextPutAll:( self  safePrintStringOf: signaler).

 signaler := signaler sender.

 signaler ifNil:[ 

^ self.

].

].

].

^ self.



! 
squeakWindowHandle ^squeakWindowHandle! 
VerticalVisualSequenceAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_VerticalVisualSequenceAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_VerticalVisualSequenceAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  NullColoredAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_VerticalVisualSequenceAgent_slot := myNested.
		].
	^BrazilMappingForWin32_VerticalVisualSequenceAgent_slot! 
HyperlinkAgentStateClasses
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_HyperlinkAgentStateClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_HyperlinkAgentStateClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_HyperlinkAgentStateClasses_slot := myNested.
		].
	^BrazilMappingForWin32_HyperlinkAgentStateClasses_slot! 
TextDisplayAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_TextDisplayAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_TextDisplayAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  RichEditControlAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_TextDisplayAgent_slot := myNested.
		].
	^BrazilMappingForWin32_TextDisplayAgent_slot! 
Alien ^Alien! 
PolygonShapeAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_PolygonShapeAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_PolygonShapeAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  BoxShapeAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_PolygonShapeAgent_slot := myNested.
		].
	^BrazilMappingForWin32_PolygonShapeAgent_slot! 
hyperlinkAgentStates: hyperlinkAgentStates_val hyperlinkAgentStates := hyperlinkAgentStates_val! 
DesktopAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_DesktopAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_DesktopAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_DesktopAgent_slot := myNested.
		].
	^BrazilMappingForWin32_DesktopAgent_slot! 
 BrazilMappingForWin32_1_init: platform 

 self Dictionary: platform Collections Dictionary.

 self IdentityDictionary: platform Collections IdentityDictionary.

 self OrderedCollection: platform Collections OrderedCollection.

 self Error: platform Exceptions Error.

 self Alien: platform NsFFI Alien.

 self UnsafeAlien: platform NsFFI UnsafeAlien.

 self Callback: platform NsFFI Callback.

 self NsFFISessionManager: platform NativeSession NsFFISessionManager.

 self Transcript: platform Transcript.

 self FileStream: platform Files FileStream.

 self TimeStamp: platform Kernel TimeStamp.

 self Time: platform Kernel Time.

 self UnhandledError: platform Exceptions UnhandledError.

 self Process: platform Kernel Process.

 self BlackMarket: platform.

 self WorldState: platform Morphic WorldState.

 self brazil: platform NsPlatform soleInstance brazil.

 self MessageBox: self  brazil tools MessageBox.

 self AbstractAgentFactory: self  brazil mapping AbstractAgentFactory.

 self GenericAgent: self  brazil mapping BrazilMappingAgent.

 self Font: self  brazil plumbing Font.

 self ModifierKeyState: self  brazil plumbing ModifierKeyState.

 self api:( platform Win32API Win32API platform: platform).

 self agentFactory: self  AgentFactory new.

 self windowsSession: self  WindowsSession new.

 self squeakWindowHandle:nil.

 self useDoubleBuffering:false.

 self activeImageAgentStates: self  ActiveImageAgentStateClasses new.

 self hyperlinkAgentStates: self  HyperlinkAgentStateClasses new.

^ self.



! 
OrderedCollection ^OrderedCollection! 
WorldState ^WorldState! 
agentFactory: agentFactory_val agentFactory := agentFactory_val! 
  appendToLog: filename using: action 

|  file |

 file := self  FileStream fileNamed: filename asFileName.

 file setToEnd.

^[ 

 action value: file.

] ensure:[ 

 file close.

].



! 
Time: Time_val Time := Time_val! 
NsFFISessionManager: NsFFISessionManager_val NsFFISessionManager := NsFFISessionManager_val! 
BlackMarket: BlackMarket_val BlackMarket := BlackMarket_val! 
 safePrintStringOf: object 

^[ 

 object printString.

]  on: self  Error do:[ : ex | 

 ex return:'<printString error>'.

].



! 
VerticalViewportAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_VerticalViewportAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_VerticalViewportAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  ViewportAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_VerticalViewportAgent_slot := myNested.
		].
	^BrazilMappingForWin32_VerticalViewportAgent_slot! 
windowsSession: windowsSession_val windowsSession := windowsSession_val! 
Transcript: Transcript_val Transcript := Transcript_val! 
UnsafeAlien: UnsafeAlien_val UnsafeAlien := UnsafeAlien_val! 
Alien: Alien_val Alien := Alien_val! 
TextViewAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_TextViewAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_TextViewAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  RichEditControlAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_TextViewAgent_slot := myNested.
		].
	^BrazilMappingForWin32_TextViewAgent_slot! 
 BrazilMappingForWin32_superInit_platform: platform 

super  new.

^ self.



! 
  appendToLogWithMs: filename using: action 

 self   appendToLog: filename using:[ : file | 

 file cr; 

 nextPutAll: self  Time millisecondClockValue printString; 

 space.

 action value: file.

].

^ self.



! 
activeImageAgentStates ^activeImageAgentStates! 
BoxShapeAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_BoxShapeAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_BoxShapeAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self  NullAgent)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_BoxShapeAgent_slot := myNested.
		].
	^BrazilMappingForWin32_BoxShapeAgent_slot! 
api ^api! 
MenuBuilder
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_MenuBuilder_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32 
			nestedMixins at: #BrazilMappingForWin32_MenuBuilder.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32 Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32 size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32 at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_MenuBuilder_slot := myNested.
		].
	^BrazilMappingForWin32_MenuBuilder_slot! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32 := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32 := mmd !
	 platform: platform 

^ self basicNew platform: platform.



! 
		 !
	BrazilMappingForWin32 enclosingObjects: (Array with: nil)!
		BrazilMappingForWin32 metadata enclosingMixin: nil !
		BrazilMappingForWin32 mixinMetadata: BrazilMappingForWin32 metadata !
		Delta define: #BrazilMappingForWin32_LineShapeAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_LineShapeAgent EnclosingObjects_BrazilMappingForWin32_LineShapeAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_LineShapeAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_LineShapeAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_LineShapeAgent) comment: 'Maps LineShapes.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_LineShapeAgent) methodsFor: 'unclassified'!
	  contributeToWM_PAINTOn: hdc inside: parentRelativeUpdateRect translatedBy: parentOrigin 

( self  needsPaintingRect: parentRelativeUpdateRect) ifTrue:[ 

|  from  to  pen  oldPen |

 from := self visual area startPoint + parentOrigin.

 to := self visual area endPoint + parentOrigin.

 pen := (EnclosingObjects_BrazilMappingForWin32_LineShapeAgent at: 1)  api CreatePen  unsignedValue:0 value: self visual width value: self visual color asColorref.

 oldPen := (EnclosingObjects_BrazilMappingForWin32_LineShapeAgent at: 1)  api SelectObject  value: hdc value: pen.

 (EnclosingObjects_BrazilMappingForWin32_LineShapeAgent at: 1)  api MoveToEx  value: hdc value: from x value: from y value:0.

 (EnclosingObjects_BrazilMappingForWin32_LineShapeAgent at: 1)  api LineTo  value: hdc value: to x value: to y.

 (EnclosingObjects_BrazilMappingForWin32_LineShapeAgent at: 1)  api SelectObject  value: hdc value: oldPen.

 (EnclosingObjects_BrazilMappingForWin32_LineShapeAgent at: 1)  api DeleteObject value: pen.

].

^ self.



! 
 needsPaintingRect: parentRelativeRect 

^ self  needsPainting and:[ 

 self visual bounds intersects: parentRelativeRect.

].



! 
 BrazilMappingForWin32_LineShapeAgent_1_init: v 

^ self.



! 
 connectOwnArtifacts 

super  connectOwnArtifacts.

 self  map: self visual colorA to:[ : ignored | 

 self invalidate.

].

 self  map: self visual widthA to:[ : ignoder | 

 self invalidate.

].

^ self.



! 
 needsPainting 

^ self visual visible and:[ 

 self visual color notNil and:[ 

 self visual color asColor isTransparent not.

].

].



! 
 BrazilMappingForWin32_LineShapeAgent_superInit_forVisual: v 

super  forVisual: v.

^ self.



! 
 forVisual: v 

 self BrazilMappingForWin32_LineShapeAgent_superInit_forVisual: v.

 self BrazilMappingForWin32_LineShapeAgent_1_init: v.

^ self.



! 
 findConsumerForMouseEventAt: point 

^nil.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_LineShapeAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_LineShapeAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_LineShapeAgent := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_LineShapeAgent. ! 
	BrazilMappingForWin32_LineShapeAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_RectangleShapeAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_RectangleShapeAgent EnclosingObjects_BrazilMappingForWin32_RectangleShapeAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_RectangleShapeAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_RectangleShapeAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_RectangleShapeAgent) comment: 'Specializes the superclass to paint a rectangle when needed.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_RectangleShapeAgent) methodsFor: 'unclassified'!
	 BrazilMappingForWin32_RectangleShapeAgent_superInit_forVisual: v 

super  forVisual: v.

^ self.



! 
 BrazilMappingForWin32_RectangleShapeAgent_1_init: v 

^ self.



! 
  paintShapeOn: hdc in: boundingBox 

( self isColor: self visual color)  ifTrue:[ 

 self   paintSolidShapeOn: hdc in: boundingBox.

] ifFalse:[ 

 self   paintGradientShapeOn: hdc in: boundingBox.

].

^ self.



! 
  paintGradientShapeOn: hdc in: boundingBox 

 self  fillRectangle: boundingBox on: hdc withGradient: self visual color.

 self  setupNullBrushIn: hdc while:[ 

 self  setupOutlinePenIn: hdc while:[ 

 (EnclosingObjects_BrazilMappingForWin32_RectangleShapeAgent at: 1)  api Rectangle  value: hdc value: boundingBox left value: boundingBox top value: boundingBox right value: boundingBox bottom.

].

].

^ self.



! 
  paintSolidShapeOn: hdc in: boundingBox 

 self  setupFillBrushIn: hdc while:[ 

 self  setupOutlinePenIn: hdc while:[ 

 (EnclosingObjects_BrazilMappingForWin32_RectangleShapeAgent at: 1)  api Rectangle  value: hdc value: boundingBox left value: boundingBox top value: boundingBox right value: boundingBox bottom.

].

].

^ self.



! 
 forVisual: v 

 self BrazilMappingForWin32_RectangleShapeAgent_superInit_forVisual: v.

 self BrazilMappingForWin32_RectangleShapeAgent_1_init: v.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_RectangleShapeAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_RectangleShapeAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_RectangleShapeAgent := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_RectangleShapeAgent. ! 
	BrazilMappingForWin32_RectangleShapeAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_ActiveImageAgentStateClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState_slot BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState_slot BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState_slot BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState_slot BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState_slot')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses')!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses) comment: 'This is a nested module defining the classes of ActiveImageAgent states, to avoid having a unique set of those in each ActiveImageAgent instance.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses) methodsFor: 'unclassified'!
	PressedState
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses 
			nestedMixins at: #BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses Mirror on: self  AgentState)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState_slot := myNested.
		].
	^BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState_slot! 
HoverState
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses 
			nestedMixins at: #BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses Mirror on: self  AgentState)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState_slot := myNested.
		].
	^BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState_slot! 
 BrazilMappingForWin32_ActiveImageAgentStateClasses_1_init 

^ self.



! 
AgentState
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses 
			nestedMixins at: #BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState_slot := myNested.
		].
	^BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState_slot! 
 BrazilMappingForWin32_ActiveImageAgentStateClasses_superInit_new 

super  new.

^ self.



! 
WarmState
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses 
			nestedMixins at: #BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses Mirror on: self  NormalState)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState_slot := myNested.
		].
	^BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState_slot! 
 new 

 self BrazilMappingForWin32_ActiveImageAgentStateClasses_superInit_new.

 self BrazilMappingForWin32_ActiveImageAgentStateClasses_1_init.

^ self.



! 
NormalState
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses 
			nestedMixins at: #BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses Mirror on: self  AgentState)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState_slot := myNested.
		].
	^BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState_slot! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_ActiveImageAgentStateClasses. ! 
	BrazilMappingForWin32_ActiveImageAgentStateClasses metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState')!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState) comment: 'Represents the state when the mouse is outside the bounds of the visual.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState) methodsFor: 'unclassified'!
	 forAgent: theAgent 

 self BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState_superInit_forAgent: theAgent.

 self BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState_1_init: theAgent.

^ self.



! 
 respondToMouseEntry 

 self agent enterState: (EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState at: 2)  activeImageAgentStates HoverState.

^ self.



! 
 BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState_1_init: theAgent 

^ self.



! 
 BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState_superInit_forAgent: theAgent 

super  forAgent: theAgent.

^ self.



! 
 image 

^ self visual enabled  ifTrue:[ 

 self visual image.

] ifFalse:[ 

 self visual disabledImage ifNil:[ 

 self visual image.

].

].



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState := mmd !
	 forAgent: theAgent 

^ self basicNew forAgent: theAgent.



! 
		 !
	BrazilMappingForWin32_ActiveImageAgentStateClasses metadata addNestedClass: BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState. ! 
	BrazilMappingForWin32_ActiveImageAgentStateClasses_NormalState metadata enclosingMixin: BrazilMappingForWin32_ActiveImageAgentStateClasses !
	Delta define: #BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' agent')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState')!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState) comment: 'This is the abstract superclass of all other other active image state classes.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState) methodsFor: 'unclassified'!
	 BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState_1_init: theAgent 

 self agent: theAgent.

^ self.



! 
 BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState_superInit_forAgent: theAgent 

super  new.

^ self.



! 
agent: agent_val agent := agent_val! 
 respondToMouseMove 

^ self.



! 
 respondToMouseExit 

 self  agent enterState: (EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState at: 2)  activeImageAgentStates NormalState.

^ self.



! 
 forAgent: theAgent 

 self BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState_superInit_forAgent: theAgent.

 self BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState_1_init: theAgent.

^ self.



! 
 respondToMouseEntry 

^ self.



! 
 respondToMouseUpLeft 

^ self.



! 
 visual 

^ self  agent visual.



! 
agent ^agent! 
 respondToMouseDownLeft 

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState := mmd !
	 forAgent: theAgent 

^ self basicNew forAgent: theAgent.



! 
		 !
	BrazilMappingForWin32_ActiveImageAgentStateClasses metadata addNestedClass: BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState. ! 
	BrazilMappingForWin32_ActiveImageAgentStateClasses_AgentState metadata enclosingMixin: BrazilMappingForWin32_ActiveImageAgentStateClasses !
	Delta define: #BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState')!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState) comment: 'Represents the state when the mouse is within the bounds of the visual but no buttons are pressed.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState) methodsFor: 'unclassified'!
	 forAgent: theAgent 

 self BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState_superInit_forAgent: theAgent.

 self BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState_1_init: theAgent.

^ self.



! 
 BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState_1_init: theAgent 

^ self.



! 
 BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState_superInit_forAgent: theAgent 

super  forAgent: theAgent.

^ self.



! 
 image 

^( self visual enabled  ifTrue:[ 

 self visual hoverImage.

] ifFalse:[ 

 self visual disabledImage.

]) ifNil:[ 

 self visual image.

].



! 
 respondToMouseExit 

 self agent enterState: (EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState at: 2)  activeImageAgentStates NormalState.

^ self.



! 
 respondToMouseDownLeft 

 self visual enabled ifTrue:[ 

 self visual actOnMouseDown  ifTrue:[ 

 self visual doAction.

] ifFalse:[ 

 self agent enterState: (EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState at: 2)  activeImageAgentStates PressedState.

].

].

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState := mmd !
	 forAgent: theAgent 

^ self basicNew forAgent: theAgent.



! 
		 !
	BrazilMappingForWin32_ActiveImageAgentStateClasses metadata addNestedClass: BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState. ! 
	BrazilMappingForWin32_ActiveImageAgentStateClasses_HoverState metadata enclosingMixin: BrazilMappingForWin32_ActiveImageAgentStateClasses !
	Delta define: #BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState')!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState) comment: 'Describes the state of the button when it was initially pressed and then the cursor left its bounds. It now displays itself as normal but will switch to being pressed again if the cursor reenters.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState) methodsFor: 'unclassified'!
	 forAgent: theAgent 

 self BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState_superInit_forAgent: theAgent.

 self BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState_1_init: theAgent.

^ self.



! 
 respondToMouseEntry 

 self agent enterState:( self agent isLeftButtonDown  ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState at: 2)  activeImageAgentStates PressedState.

] ifFalse:[ 

 (EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState at: 2)  activeImageAgentStates HoverState.

]).

^ self.



! 
 BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState_1_init: theAgent 

^ self.



! 
 BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState_superInit_forAgent: theAgent 

super  forAgent: theAgent.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState := mmd !
	 forAgent: theAgent 

^ self basicNew forAgent: theAgent.



! 
		 !
	BrazilMappingForWin32_ActiveImageAgentStateClasses metadata addNestedClass: BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState. ! 
	BrazilMappingForWin32_ActiveImageAgentStateClasses_WarmState metadata enclosingMixin: BrazilMappingForWin32_ActiveImageAgentStateClasses !
	Delta define: #BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState')!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState) comment: 'Represents the state when the mouse is within the bounds of the visual and a button is pressed.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState) methodsFor: 'unclassified'!
	 forAgent: theAgent 

 self BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState_superInit_forAgent: theAgent.

 self BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState_1_init: theAgent.

^ self.



! 
 BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState_1_init: theAgent 

^ self.



! 
 respondToMouseUpLeft 

 self agent enterState: (EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState at: 2)  activeImageAgentStates HoverState.

( self visual enabled and:[ 

 self visual actOnMouseDown not.

]) ifTrue:[ 

 self visual doAction.

].

^ self.



! 
 BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState_superInit_forAgent: theAgent 

super  forAgent: theAgent.

^ self.



! 
 image 

^( self visual enabled  ifTrue:[ 

 self visual downImage.

] ifFalse:[ 

 self visual disabledImage.

]) ifNil:[ 

 self visual image.

].



! 
 respondToMouseExit 

 self agent enterState: (EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState at: 2)  activeImageAgentStates WarmState.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState := mmd !
	 forAgent: theAgent 

^ self basicNew forAgent: theAgent.



! 
		 !
	BrazilMappingForWin32_ActiveImageAgentStateClasses metadata addNestedClass: BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState. ! 
	BrazilMappingForWin32_ActiveImageAgentStateClasses_PressedState metadata enclosingMixin: BrazilMappingForWin32_ActiveImageAgentStateClasses !
	Delta define: #BrazilMappingForWin32_HyperlinkAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' state isTrackingButtonPress')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_HyperlinkAgent EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgent) comment: 'Represents Brazil Hyperlinks. For now we are handling these as soft widgets because the story of Windows command link buttons and syslink widgets is unclear.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgent) methodsFor: 'unclassified'!
	isTrackingButtonPress: isTrackingButtonPress_val isTrackingButtonPress := isTrackingButtonPress_val! 
state: state_val state := state_val! 
 processMouseMove 

 self  isTrackingButtonPress  ifTrue:[ 

 self visual containsMouse  ifTrue:[ 

 self  state isPressed ifFalse:[ 

 self  enterState: (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  hyperlinkAgentStates PressedState.

].

] ifFalse:[ 

 self  state isNormal ifFalse:[ 

 self  enterState: (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  hyperlinkAgentStates NormalState.

].

].

] ifFalse:[ 

 self  state isHover ifFalse:[ 

 self  enterState: (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  hyperlinkAgentStates HoverState.

].

].

 self visual dragTracker ifNotNil:[ : it | 

 it respondToMouseMove.

].

^ self.



! 
 processMouseDownLeft 

 self  isTrackingButtonPress:true.

 self  enterState: (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  hyperlinkAgentStates PressedState.

 self visual dragTracker ifNotNil:[ : it | 

 it respondToMouseDown.

].

^ self.



! 
 processMouseEntry 

^ self.



! 
state ^state! 
 enterState: stateClass 

 self  state:( stateClass forAgent: self).

 self invalidate.

^ self.



! 
isTrackingButtonPress ^isTrackingButtonPress! 
  paintUnderlineOn: hdc inside: box 

|  right  bottom  pen  oldPen |

 bottom := box top + self naturalExtent y - 1 min: box bottom.

 right := box left + self naturalExtent x min: box right.

 pen := (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  api CreatePen  unsignedValue:0 value:1 value: self  state color asColorref.

 oldPen := (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  api SelectObject  value: hdc value: pen.

 (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  api MoveToEx  value: hdc value: box left value: bottom value:0.

 (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  api LineTo  value: hdc value: right value: bottom.

 (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  api SelectObject  value: hdc value: oldPen.

 (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  api DeleteObject value: pen.

^ self.



! 
  contributeToWM_PAINTOn: hdc inside: parentRelativeUpdateRect translatedBy: parentOrigin 

super   contributeToWM_PAINTOn: hdc inside: parentRelativeUpdateRect translatedBy: parentOrigin.

 self  state shouldShowUnderline ifTrue:[ 

 self   paintUnderlineOn: hdc inside:( self visual bounds translateBy: parentOrigin).

].

^ self.



! 
 forVisual: visual 

 self BrazilMappingForWin32_HyperlinkAgent_superInit_forVisual: visual.

 self BrazilMappingForWin32_HyperlinkAgent_1_init: visual.

^ self.



! 
 selectProperColorInto: hdc 

 (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  api SetTextColor  value: hdc value: self  state color asColorref.

^ self.



! 
 processMouseExit 

 self  enterState: (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  hyperlinkAgentStates NormalState.

^ self.



! 
 BrazilMappingForWin32_HyperlinkAgent_1_init: visual 

 self state:( (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  hyperlinkAgentStates NormalState forAgent: self).

 self isTrackingButtonPress:false.

^ self.



! 
 BrazilMappingForWin32_HyperlinkAgent_superInit_forVisual: visual 

super  forVisual: visual.

^ self.



! 
 processMouseUpLeft 

|  wasDragInProgress |

 self  isTrackingButtonPress:false.

 wasDragInProgress :=false.

 self visual dragTracker notNil ifTrue:[ 

 wasDragInProgress := self visual dragTracker isDragging.

 self visual dragTracker respondToMouseUp.

].

 self  state respondToButtonRelease.

 self  enterState:( self visual containsMouse  ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  hyperlinkAgentStates HoverState.

] ifFalse:[ 

 (EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent at: 1)  hyperlinkAgentStates NormalState.

]).

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_HyperlinkAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_HyperlinkAgent := mmd !
	 forVisual: visual 

^ self basicNew forVisual: visual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_HyperlinkAgent. ! 
	BrazilMappingForWin32_HyperlinkAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_ButtonAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' cachedNaturalExtent')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ButtonAgent EnclosingObjects_BrazilMappingForWin32_ButtonAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_ButtonAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ButtonAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ButtonAgent) comment: 'Describe the class in this comment.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ButtonAgent) methodsFor: 'unclassified'!
	 naturalExtent 

^ self  cachedNaturalExtent ifNil:[ 

 self  cachedNaturalExtent: self  measureNaturalExtent.

 self  cachedNaturalExtent.

].



! 
 finalExtentFrom: stringExtent 

|  extra |

 extra := stringExtent y.

^ stringExtent +(2 * extra @ extra).



! 
 connectOwnArtifacts 

 self  map: self visual labelA to: self ~#'setWindowText:'.

 self  map: self visual enabledA to: self ~#'enableWindow:'.

super  connectOwnArtifacts.

^ self.



! 
 controlClassName 

^'BUTTON'.



! 
 setWindowText: newText 

 self  cachedNaturalExtent:nil.

super  setWindowText: newText asString.

^ self.



! 
 selectProperFontInto: hdc 

|  hfont |

 hfont := (EnclosingObjects_BrazilMappingForWin32_ButtonAgent at: 1)  windowsSession fontMapper defaultControlFontHandle.

 (EnclosingObjects_BrazilMappingForWin32_ButtonAgent at: 1)  api SelectObject  value: hdc value: hfont.

^ self.



! 
 BrazilMappingForWin32_ButtonAgent_superInit_forVisual: visual 

super  forVisual: visual.

^ self.



! 
 processCommand: code 

 code = (EnclosingObjects_BrazilMappingForWin32_ButtonAgent at: 1)  api BN_CLICKED ifTrue:[ 

 self visual doAction.

].

^0.



! 
cachedNaturalExtent: cachedNaturalExtent_val cachedNaturalExtent := cachedNaturalExtent_val! 
 measureNaturalExtent 

^ self  getDCWhile:[ : hdc | 

 self  selectProperFontInto: hdc.

 self  finalExtentFrom:( self   measureString: self visual label asString using: hdc).

] ifNotMapped:[ 

0 @0.

].



! 
 BrazilMappingForWin32_ButtonAgent_1_init: visual 

 self cachedNaturalExtent:nil.

^ self.



! 
  measureString: aString using: hdc 

|  result |

^ (EnclosingObjects_BrazilMappingForWin32_ButtonAgent at: 1)  api POINT newC freeAfter:[ : sizeBuffer | 

 result := (EnclosingObjects_BrazilMappingForWin32_ButtonAgent at: 1)  api GetTextExtentPoint32  unsignedValue: hdc value:( (EnclosingObjects_BrazilMappingForWin32_ButtonAgent at: 1)  UnsafeAlien forPointerTo: aString) value: aString size value: sizeBuffer address.

 result =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_ButtonAgent at: 1)  api reportError:'GetTextExtentPoint32() failed'.

].

 sizeBuffer asPoint.

].



! 
 controlWindowTitle 

^ self visual label.



! 
cachedNaturalExtent ^cachedNaturalExtent! 
 forVisual: visual 

 self BrazilMappingForWin32_ButtonAgent_superInit_forVisual: visual.

 self BrazilMappingForWin32_ButtonAgent_1_init: visual.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ButtonAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ButtonAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ButtonAgent := mmd !
	 forVisual: visual 

^ self basicNew forVisual: visual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_ButtonAgent. ! 
	BrazilMappingForWin32_ButtonAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_BoxShapeAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_BoxShapeAgent EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_BoxShapeAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_BoxShapeAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_BoxShapeAgent) comment: 'This is the abstract superclass of agents for those shape visuals that are defined by their bounding box, i.e. rectangles and ellipses.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_BoxShapeAgent) methodsFor: 'unclassified'!
	 needsPainting 

^ self visual visible and:[ 

 self visual color asColor isTransparent not or:[ 

 self visual borderWidth >0.

].

].



! 
 connectOwnArtifacts 

super  connectOwnArtifacts.

 self  map: self visual colorA to:[ : ignored | 

 self invalidate.

].

 self  map: self visual borderColorA to:[ : ignored | 

 self invalidate.

].

 self  map: self visual borderWidthA to:[ : ignored | 

 self invalidate.

].

^ self.



! 
 processMouseEntry 

 self visual respondToMouseEntry.

^ self.



! 
 BrazilMappingForWin32_BoxShapeAgent_1_init: v 

^ self.



! 
  setupFillBrushIn: hdc while: action 

|  oldBrush |

 oldBrush := (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api SelectObject  unsignedValue: hdc value:( (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api GetStockObject unsignedValue: (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api DC_BRUSH).

 (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api SetDCBrushColor  unsignedValue: hdc value:( self  asColor: self visual color) asColorref.

^ action ensure:[ 

 (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api SelectObject  value: hdc value: oldBrush.

].



! 
 isColor: color 

^ color asColor == color.



! 
 processMouseDownLeft 

 self visual respondToMouseDownLeft.

^ self.



! 
  setupNullPenIn: hdc while: action 

|  oldPen |

 oldPen := (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api SelectObject  unsignedValue: hdc value:( (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api GetStockObject unsignedValue:8).

^ action ensure:[ 

 (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api SelectObject  value: hdc value: oldPen.

].



! 
 asColor: color 

^ color isColor  ifTrue:[ 

 color.

] ifFalse:[ 

 color startColor  mixed:1/2 with: color endColor.

].



! 
 forVisual: v 

 self BrazilMappingForWin32_BoxShapeAgent_superInit_forVisual: v.

 self BrazilMappingForWin32_BoxShapeAgent_1_init: v.

^ self.



! 
 findConsumerForMouseEventAt: parentRelativePoint 

^( self visual bounds containsPoint: parentRelativePoint)  ifTrue:[ 

 self.

] ifFalse:[ 

nil.

].



! 
  setupContextPenIn: hdc while: action 

|  oldPen |

 oldPen := (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api SelectObject  unsignedValue: hdc value:( (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api GetStockObject unsignedValue: (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api DC_PEN).

 (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api SetDCPenColor  unsignedValue: hdc value: self visual borderColor asColorref.

^ action ensure:[ 

 (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api SelectObject  value: hdc value: oldPen.

].



! 
  setupNullBrushIn: hdc while: action 

|  oldBrush |

 oldBrush := (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api SelectObject  unsignedValue: hdc value:( (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api GetStockObject unsignedValue:5).

^ action ensure:[ 

 (EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent at: 1)  api SelectObject  value: hdc value: oldBrush.

].



! 
 needsPaintingRect: parentRelativeRect 

^ self  needsPainting and:[ 

 self visual bounds intersects: parentRelativeRect.

].



! 
 BrazilMappingForWin32_BoxShapeAgent_superInit_forVisual: v 

super  forVisual: v.

^ self.



! 
  contributeToWM_PAINTOn: hdc inside: parentRelativeUpdateRect translatedBy: parentOrigin 

( self  needsPaintingRect: parentRelativeUpdateRect) ifTrue:[ 

 self   paintShapeOn: hdc in:( self visual bounds translateBy: parentOrigin).

].

^ self.



! 
 destroyOwnArtifacts 

super  destroyOwnArtifacts.

 self invalidate.

^ self.



! 
  paintShapeOn: hdc in: boundsBox 

 self subclassResponsibility.

^ self.



! 
  setupOutlinePenIn: hdc while: action 

^( self visual borderWidth >0 and:[ 

 self visual borderColor isTransparent not.

])  ifTrue:[ 

 self   setupContextPenIn: hdc while: action.

] ifFalse:[ 

 self   setupNullPenIn: hdc while: action.

].



! 
 processMouseExit 

 self visual respondToMouseExit.

^ self.



! 
 processMouseMove 

 self visual respondToMouseMove.

^ self.



! 
 processMouseUpLeft 

 self visual respondToMouseUpLeft.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_BoxShapeAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_BoxShapeAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_BoxShapeAgent := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_BoxShapeAgent. ! 
	BrazilMappingForWin32_BoxShapeAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_TextDisplayAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_TextDisplayAgent EnclosingObjects_BrazilMappingForWin32_TextDisplayAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_TextDisplayAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_TextDisplayAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_TextDisplayAgent) comment: 'Responsible for materializing TextDisplays as native Windows RichEdit controls (read-only).'!
	! (Delta mirrorFor: #BrazilMappingForWin32_TextDisplayAgent) methodsFor: 'unclassified'!
	 dwExStyle 

^ (EnclosingObjects_BrazilMappingForWin32_TextDisplayAgent at: 1)  api WS_EX_TRANSPARENT.



! 
 dwStyle 

^super  dwStyle | (EnclosingObjects_BrazilMappingForWin32_TextDisplayAgent at: 1)  api ES_READONLY.



! 
 BrazilMappingForWin32_TextDisplayAgent_1_init: visual 

^ self.



! 
 BrazilMappingForWin32_TextDisplayAgent_superInit_forVisual: visual 

super  forVisual: visual.

^ self.



! 
 createOwnArtifacts 

super  createOwnArtifacts.

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_TextDisplayAgent at: 1)  api EM_SHOWSCROLLBAR wParam: (EnclosingObjects_BrazilMappingForWin32_TextDisplayAgent at: 1)  api SB_VERT lParam:0.

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_TextDisplayAgent at: 1)  api EM_SHOWSCROLLBAR wParam: (EnclosingObjects_BrazilMappingForWin32_TextDisplayAgent at: 1)  api SB_HORZ lParam:0.

^ self.



! 
 forVisual: visual 

 self BrazilMappingForWin32_TextDisplayAgent_superInit_forVisual: visual.

 self BrazilMappingForWin32_TextDisplayAgent_1_init: visual.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_TextDisplayAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_TextDisplayAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_TextDisplayAgent := mmd !
	 forVisual: visual 

^ self basicNew forVisual: visual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_TextDisplayAgent. ! 
	BrazilMappingForWin32_TextDisplayAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_EllipseShapeAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_EllipseShapeAgent EnclosingObjects_BrazilMappingForWin32_EllipseShapeAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_EllipseShapeAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_EllipseShapeAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_EllipseShapeAgent) comment: 'Specializes the superclass to paint an ellipse when needed.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_EllipseShapeAgent) methodsFor: 'unclassified'!
	 BrazilMappingForWin32_EllipseShapeAgent_superInit_forVisual: v 

super  forVisual: v.

^ self.



! 
  paintShapeOn: hdc in: boundingBox 

 self  setupFillBrushIn: hdc while:[ 

 self  setupOutlinePenIn: hdc while:[ 

 (EnclosingObjects_BrazilMappingForWin32_EllipseShapeAgent at: 1)  api Ellipse  value: hdc value: boundingBox left value: boundingBox top value: boundingBox right value: boundingBox bottom.

].

].

^ self.



! 
 BrazilMappingForWin32_EllipseShapeAgent_1_init: v 

^ self.



! 
 forVisual: v 

 self BrazilMappingForWin32_EllipseShapeAgent_superInit_forVisual: v.

 self BrazilMappingForWin32_EllipseShapeAgent_1_init: v.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_EllipseShapeAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_EllipseShapeAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_EllipseShapeAgent := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_EllipseShapeAgent. ! 
	BrazilMappingForWin32_EllipseShapeAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_VerticalVisualSequenceAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_VerticalVisualSequenceAgent EnclosingObjects_BrazilMappingForWin32_VerticalVisualSequenceAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_VerticalVisualSequenceAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_VerticalVisualSequenceAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_VerticalVisualSequenceAgent) comment: 'Takes care of vertical visual sequences, most importantly to optimize their display by only painting those children that intersect the update rectangle.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_VerticalVisualSequenceAgent) methodsFor: 'unclassified'!
	  contributeToWM_PAINTOn: hdc inside: parentRelativeUpdateRect translatedBy: parentOrigin 

|  myUpdateRect  updateTop  updateBottom  myOrigin |

( self needsPaintingRect: parentRelativeUpdateRect) ifTrue:[ 

|  rectToPaint |

 rectToPaint := self visual bounds intersect: parentRelativeUpdateRect.

( self isColor: self visual color)  ifTrue:[ 

 self  paintSolid: rectToPaint on: hdc translatedBy: parentOrigin.

] ifFalse:[ 

 self  paintGradient: rectToPaint on: hdc translatedBy: parentOrigin.

].

].

 myUpdateRect := parentRelativeUpdateRect translateBy: self visual origin negated.

 updateTop := myUpdateRect top.

 updateBottom := myUpdateRect bottom.

 myOrigin := parentOrigin + self visual origin.

 self childrenDo:[ : each | 

|  eachBounds |

 eachBounds := each visual bounds.

 eachBounds bottom > updateTop ifTrue:[ 

 eachBounds top > updateBottom ifTrue:[ 

^ self.

].

 each  contributeToWM_PAINTOn: hdc inside: myUpdateRect translatedBy: myOrigin.

].

].

^ self.



! 
 BrazilMappingForWin32_VerticalVisualSequenceAgent_superInit_forVisual: v 

super  forVisual: v.

^ self.



! 
 forVisual: v 

 self BrazilMappingForWin32_VerticalVisualSequenceAgent_superInit_forVisual: v.

 self BrazilMappingForWin32_VerticalVisualSequenceAgent_1_init: v.

^ self.



! 
 BrazilMappingForWin32_VerticalVisualSequenceAgent_1_init: v 

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_VerticalVisualSequenceAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_VerticalVisualSequenceAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_VerticalVisualSequenceAgent := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_VerticalVisualSequenceAgent. ! 
	BrazilMappingForWin32_VerticalVisualSequenceAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_SensitiveImageAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_SensitiveImageAgent EnclosingObjects_BrazilMappingForWin32_SensitiveImageAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_SensitiveImageAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_SensitiveImageAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_SensitiveImageAgent) comment: 'Handles the SensitiveIcon Brazil visual.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_SensitiveImageAgent) methodsFor: 'unclassified'!
	 processMouseEntry 

 self visual respondToMouseEntry.

^ self.



! 
 processMouseDownLeft 

 self visual respondToMouseDownLeft.

^ self.



! 
 BrazilMappingForWin32_SensitiveImageAgent_1_init: v 

^ self.



! 
 forVisual: v 

 self BrazilMappingForWin32_SensitiveImageAgent_superInit_forVisual: v.

 self BrazilMappingForWin32_SensitiveImageAgent_1_init: v.

^ self.



! 
 processMouseUpLeft 

 self visual respondToMouseUpLeft.

^ self.



! 
 processMouseExit 

 self visual respondToMouseExit.

^ self.



! 
 BrazilMappingForWin32_SensitiveImageAgent_superInit_forVisual: v 

super  forVisual: v.

^ self.



! 
 processMouseMove 

 self visual respondToMouseMove.

^ self.



! 
 findConsumerForMouseEventAt: parentRelativePoint 

^( self visual bounds containsPoint: parentRelativePoint)  ifTrue:[ 

 self.

] ifFalse:[ 

nil.

].



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_SensitiveImageAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_SensitiveImageAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_SensitiveImageAgent := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_SensitiveImageAgent. ! 
	BrazilMappingForWin32_SensitiveImageAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_PolygonShapeAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_PolygonShapeAgent EnclosingObjects_BrazilMappingForWin32_PolygonShapeAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_PolygonShapeAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_PolygonShapeAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_PolygonShapeAgent) comment: 'Represents Brazil PolygonShape by painting them inside the host window. A polygon isn''t really a box shape, but the some of the inherited behavior is useful.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_PolygonShapeAgent) methodsFor: 'unclassified'!
	  contributeToWM_PAINTOn: hdc inside: parentRelativeUpdateRect translatedBy: parentOrigin 

( self needsPaintingRect: parentRelativeUpdateRect) ifTrue:[ 

 self   paintShapeOn: hdc translatedBy: parentOrigin.

].

^ self.



! 
 hostRelativeVerticesTranslatedBy: parentOrigin 

^ self visual area vertices collect:[ : each | 

 each + parentOrigin.

].



! 
 BrazilMappingForWin32_PolygonShapeAgent_1_init: v 

^ self.



! 
 BrazilMappingForWin32_PolygonShapeAgent_superInit_forVisual: v 

super  forVisual: v.

^ self.



! 
  paintShapeOn: hdc translatedBy: parentOrigin 

 self  setupFillBrushIn: hdc while:[ 

 self  setupOutlinePenIn: hdc while:[ 

|  vertices  pointSize  cVertices  address |

 vertices := self  hostRelativeVerticesTranslatedBy: parentOrigin.

 pointSize := (EnclosingObjects_BrazilMappingForWin32_PolygonShapeAgent at: 1)  api POINT dataSize.

 cVertices := (EnclosingObjects_BrazilMappingForWin32_PolygonShapeAgent at: 1)  Alien rawNewC:( vertices size * pointSize).

 address := cVertices address.

 vertices do:[ : vertex | 

( (EnclosingObjects_BrazilMappingForWin32_PolygonShapeAgent at: 1)  api POINT atAddress: address) initializeFromPoint: vertex.

 address := address + pointSize.

].

 (EnclosingObjects_BrazilMappingForWin32_PolygonShapeAgent at: 1)  api Polygon  value: hdc value: cVertices address value: vertices size.

 cVertices free.

].

].

^ self.



! 
 forVisual: v 

 self BrazilMappingForWin32_PolygonShapeAgent_superInit_forVisual: v.

 self BrazilMappingForWin32_PolygonShapeAgent_1_init: v.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_PolygonShapeAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_PolygonShapeAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_PolygonShapeAgent := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_PolygonShapeAgent. ! 
	BrazilMappingForWin32_PolygonShapeAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_WindowsSession as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' paraformatWithStandardTabStops BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager_slot viewportWindowClass gdiPlus BrazilMappingForWin32_WindowsSession_WindowClass_slot textMeasurer dragCueWindow richEdit20Handle standardTopLevelWindowClass textMeasurerWindowClass fontMapper BrazilMappingForWin32_WindowsSession_TextMeasurer_slot BrazilMappingForWin32_WindowsSession_SystemMetrics_slot imageMapper applicationInstanceHandle_ doubleBufferingSurfaceManager lastActivity systemMetrics draggedImageWindowClass BrazilMappingForWin32_WindowsSession_FontMapper_slot BrazilMappingForWin32_WindowsSession_ImageMapper_slot BrazilMappingForWin32_WindowsSession_DragCueWindow_slot viewportContentCarrierWindowClass')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_WindowsSession EnclosingObjects_BrazilMappingForWin32_WindowsSession')!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession) comment: 'Manages session-specific information such as the current application instance handle the handles of various system DLLs such as the RichEdit control. Also manages window classes.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession) methodsFor: 'unclassified'!
	paraformatWithStandardTabStops ^paraformatWithStandardTabStops! 
paraformatWithStandardTabStops: paraformatWithStandardTabStops_val paraformatWithStandardTabStops := paraformatWithStandardTabStops_val! 
ImageMapper
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_WindowsSession_ImageMapper_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_WindowsSession 
			nestedMixins at: #BrazilMappingForWin32_WindowsSession_ImageMapper.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_WindowsSession Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_WindowsSession size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_WindowsSession at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_WindowsSession_ImageMapper_slot := myNested.
		].
	^BrazilMappingForWin32_WindowsSession_ImageMapper_slot! 
systemMetrics: systemMetrics_val systemMetrics := systemMetrics_val! 
dragCueWindow: dragCueWindow_val dragCueWindow := dragCueWindow_val! 
DoubleBufferingSurfaceManager
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_WindowsSession 
			nestedMixins at: #BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_WindowsSession Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_WindowsSession size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_WindowsSession at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager_slot := myNested.
		].
	^BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager_slot! 
 logError: ex 

|  signaler |

 signaler := ex signalerContext.

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession at: 1)  Transcript cr; 

 nextPutAll: (EnclosingObjects_BrazilMappingForWin32_WindowsSession at: 1)  Time now printString; 

 nextPutAll:': '; 

 nextPutAll:( (EnclosingObjects_BrazilMappingForWin32_WindowsSession at: 1)  safePrintStringOf: ex); 

 nextPutAll:' (dumped to log file)'.

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession at: 1)   dumpError: ex toLog:'brazilErrors.log'.

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession at: 1)  Transcript flush.

^ self.



! 
SystemMetrics
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_WindowsSession_SystemMetrics_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_WindowsSession 
			nestedMixins at: #BrazilMappingForWin32_WindowsSession_SystemMetrics.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_WindowsSession Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_WindowsSession size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_WindowsSession at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_WindowsSession_SystemMetrics_slot := myNested.
		].
	^BrazilMappingForWin32_WindowsSession_SystemMetrics_slot! 
textMeasurer ^textMeasurer! 
viewportContentCarrierWindowClass ^viewportContentCarrierWindowClass! 
standardTopLevelWindowClass: standardTopLevelWindowClass_val standardTopLevelWindowClass := standardTopLevelWindowClass_val! 
draggedImageWindowClass: draggedImageWindowClass_val draggedImageWindowClass := draggedImageWindowClass_val! 
 getStockWhiteBrush 

^ self  api GetStockObject unsignedValue: self  api WHITE_BRUSH.



! 
viewportWindowClass ^viewportWindowClass! 
fontMapper ^fontMapper! 
 new 

 self BrazilMappingForWin32_WindowsSession_superInit_new.

 self BrazilMappingForWin32_WindowsSession_1_init.

 self  gdiPlus startup.

 self  textMeasurer startup.

^ self.



! 
 resetForNewImageSession 

 self  applicationInstanceHandle_:nil.

 self  richEdit20Handle:0.

 self  gdiPlus resetForNewImageSession.

 self  standardTopLevelWindowClass resetForNewImageSession.

 self  viewportWindowClass resetForNewImageSession.

 self  viewportContentCarrierWindowClass resetForNewImageSession.

 self  textMeasurerWindowClass resetForNewImageSession.

 self  draggedImageWindowClass resetForNewImageSession.

 self  imageMapper resetForNewImageSession.

 self  fontMapper resetForNewImageSession.

 self  doubleBufferingSurfaceManager resetForNewImageSession.

 self  dragCueWindow ifNotNil:[ : it | 

 it resetForNewImageSession.

].

 self  dragCueWindow:nil.

^ self.



! 
 createParaformatWithStandardTabStops 

|  twipsPerStop  totalStops  paraformat |

 twipsPerStop :=360.

 totalStops :=32.

 paraformat := self  api PARAFORMAT new.

 paraformat dwMask: self  api PFM_TABSTOPS; 

 cTabCount: totalStops.

1  to: totalStops do:[ : index | 

 paraformat  rgxTabsAt: index put: index * twipsPerStop.

].

^ paraformat.



! 
imageMapper ^imageMapper! 
 ensureRichEdit20Loaded 

 self  richEdit20Handle =0 ifTrue:[ 

( (EnclosingObjects_BrazilMappingForWin32_WindowsSession at: 1)  Alien newCString:'Riched20.dll') freeAfter:[ : dllName | 

 self  richEdit20Handle:( self  api LoadLibrary unsignedValue: dllName address).

].

].

 self  richEdit20Handle =0 ifTrue:[ 

 self error:'failed to load Riched20.dll'.

].

^ self.



! 
 api 

^ (EnclosingObjects_BrazilMappingForWin32_WindowsSession at: 1)  api.



! 
 BrazilMappingForWin32_WindowsSession_superInit_new 

super  new.

^ self.



! 
doubleBufferingSurfaceManager ^doubleBufferingSurfaceManager! 
lastActivity ^lastActivity! 
imageMapper: imageMapper_val imageMapper := imageMapper_val! 
systemMetrics ^systemMetrics! 
TextMeasurer
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_WindowsSession_TextMeasurer_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_WindowsSession 
			nestedMixins at: #BrazilMappingForWin32_WindowsSession_TextMeasurer.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_WindowsSession Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_WindowsSession size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_WindowsSession at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_WindowsSession_TextMeasurer_slot := myNested.
		].
	^BrazilMappingForWin32_WindowsSession_TextMeasurer_slot! 
 loadArrowCursor 

^ self  api LoadCursor  unsignedValue:0 value: self  api IDC_ARROW.



! 
 loadApplicationIcon 

^ self  api LoadIcon  unsignedValue:0 value: self  api IDI_APPLICATION.



! 
FontMapper
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_WindowsSession_FontMapper_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_WindowsSession 
			nestedMixins at: #BrazilMappingForWin32_WindowsSession_FontMapper.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_WindowsSession Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_WindowsSession size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_WindowsSession at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_WindowsSession_FontMapper_slot := myNested.
		].
	^BrazilMappingForWin32_WindowsSession_FontMapper_slot! 
textMeasurerWindowClass: textMeasurerWindowClass_val textMeasurerWindowClass := textMeasurerWindowClass_val! 
applicationInstanceHandle_ ^applicationInstanceHandle_! 
fontMapper: fontMapper_val fontMapper := fontMapper_val! 
 enableAll 

|  isWindow  isWindowVisible |

 isWindow := self  api IsWindow.

 isWindowVisible := self  api IsWindowVisible.

 self  topLevelWindowsDo:[ : hwnd | 

(( isWindow boolValue: hwnd) and:[ 

 isWindowVisible boolValue: hwnd.

]) ifTrue:[ 

 self  api EnableWindow  boolValue: hwnd value:1.

].

].

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession at: 1)  squeakWindowHandle ifNotNil:[ : hwnd | 

 self  api EnableWindow  boolValue: hwnd value:1.

].

^ self.



! 
applicationInstanceHandle_: applicationInstanceHandle__val applicationInstanceHandle_ := applicationInstanceHandle__val! 
 disableAll 

|  isWindow  isWindowVisible |

 isWindow := self  api IsWindow.

 isWindowVisible := self  api IsWindowVisible.

 self  topLevelWindowsDo:[ : hwnd | 

(( isWindow boolValue: hwnd) and:[ 

 isWindowVisible boolValue: hwnd.

]) ifTrue:[ 

 self  api EnableWindow  boolValue: hwnd value:0.

].

].

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession at: 1)  squeakWindowHandle ifNotNil:[ : hwnd | 

 self  api EnableWindow  boolValue: hwnd value:0.

].

^ self.



! 
  placeDragCue: image at: topLeft 

 self  dragCueWindow ifNotNil:[ 

 self  dragCueWindow close.

].

 self  dragCueWindow:( self  DragCueWindow  image: image at: topLeft).

 self  dragCueWindow open.

^ self.



! 
 BrazilMappingForWin32_WindowsSession_1_init 

 self applicationInstanceHandle_:nil.

 self standardTopLevelWindowClass:(( self  WindowClass  name:'BrazilWindow' style: self  api CS_HREDRAW | self  api CS_VREDRAW bg:0) iconIdOrName:2).

 self viewportWindowClass:( self  WindowClass  name:'BrazilViewport' style:0 bg:0).

 self viewportContentCarrierWindowClass:( self  WindowClass  name:'BrazilViewportContent' style:0 bg:0).

 self textMeasurerWindowClass:( self  WindowClass  name:'BrazilTextMeasurer' style:0 bg:1).

 self draggedImageWindowClass:( self  WindowClass  name:'BrazilDraggedImage' style:0 bg:0).

 self richEdit20Handle:0.

 self gdiPlus: self  api GDIplus new.

 self imageMapper: self  ImageMapper new.

 self systemMetrics:( self  SystemMetrics usingApi: self  api).

 self fontMapper:( self  FontMapper usingApi: self  api).

 self doubleBufferingSurfaceManager: self  DoubleBufferingSurfaceManager new.

 self textMeasurer: self  TextMeasurer new.

 self paraformatWithStandardTabStops: self  createParaformatWithStandardTabStops.

 self dragCueWindow:nil.

 self lastActivity:0.

^ self.



! 
 removeDragCue 

 self  dragCueWindow ifNotNil:[ 

 self  dragCueWindow close.

 self  dragCueWindow:nil.

].

^ self.



! 
viewportContentCarrierWindowClass: viewportContentCarrierWindowClass_val viewportContentCarrierWindowClass := viewportContentCarrierWindowClass_val! 
richEdit20Handle ^richEdit20Handle! 
WindowClass
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_WindowsSession_WindowClass_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_WindowsSession 
			nestedMixins at: #BrazilMappingForWin32_WindowsSession_WindowClass.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_WindowsSession Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_WindowsSession size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_WindowsSession at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_WindowsSession_WindowClass_slot := myNested.
		].
	^BrazilMappingForWin32_WindowsSession_WindowClass_slot! 
textMeasurerWindowClass ^textMeasurerWindowClass! 
textMeasurer: textMeasurer_val textMeasurer := textMeasurer_val! 
gdiPlus: gdiPlus_val gdiPlus := gdiPlus_val! 
lastActivity: lastActivity_val lastActivity := lastActivity_val! 
dragCueWindow ^dragCueWindow! 
standardTopLevelWindowClass ^standardTopLevelWindowClass! 
gdiPlus ^gdiPlus! 
draggedImageWindowClass ^draggedImageWindowClass! 
DragCueWindow
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_WindowsSession_DragCueWindow_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_WindowsSession 
			nestedMixins at: #BrazilMappingForWin32_WindowsSession_DragCueWindow.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_WindowsSession Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_WindowsSession size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_WindowsSession at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_WindowsSession_DragCueWindow_slot := myNested.
		].
	^BrazilMappingForWin32_WindowsSession_DragCueWindow_slot! 
richEdit20Handle: richEdit20Handle_val richEdit20Handle := richEdit20Handle_val! 
 topLevelWindowsDo: action 

 self  standardTopLevelWindowClass agentsByHandle keysDo: action.

^ self.



! 
viewportWindowClass: viewportWindowClass_val viewportWindowClass := viewportWindowClass_val! 
doubleBufferingSurfaceManager: doubleBufferingSurfaceManager_val doubleBufferingSurfaceManager := doubleBufferingSurfaceManager_val! 
 moveDragCueTo: point 

 self  dragCueWindow ifNotNil:[ 

 self  dragCueWindow moveTo: point.

].

^ self.



! 
 applicationInstanceHandle 

^ self  applicationInstanceHandle_ ifNil:[ 

 self  applicationInstanceHandle_:( self  api GetModuleHandle unsignedValue:0).

 self  applicationInstanceHandle_.

].



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_WindowsSession := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_WindowsSession := mmd !
	 new 

^ self basicNew new.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_WindowsSession. ! 
	BrazilMappingForWin32_WindowsSession metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_WindowsSession_SystemMetrics as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' api')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_WindowsSession_SystemMetrics EnclosingObjects_BrazilMappingForWin32_WindowsSession_SystemMetrics')!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_SystemMetrics) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_SystemMetrics) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_SystemMetrics) comment: 'Provides access to system metrics such as scrollbar sizes etc.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_SystemMetrics) methodsFor: 'unclassified'!
	 usingApi: api_ 

 self BrazilMappingForWin32_WindowsSession_SystemMetrics_superInit_usingApi: api_.

 self BrazilMappingForWin32_WindowsSession_SystemMetrics_1_init: api_.

^ self.



! 
 virtualDesktopBounds 

|  width  height |

 width := self  api GetSystemMetrics unsignedValue: self  api SM_CXVIRTUALSCREEN.

 height := self  api GetSystemMetrics unsignedValue: self  api SM_CYVIRTUALSCREEN.

^0 @0 extent:( width @ height).



! 
 BrazilMappingForWin32_WindowsSession_SystemMetrics_superInit_usingApi: api_ 

super  new.

^ self.



! 
 scrollbarWidth 

|  result |

 result := self  api GetSystemMetrics signedValue: self  api SM_CXVSCROLL.

 result =0 ifTrue:[ 

^ self  api reportError:'GetSystemMetrics() failed'.

].

^ result.



! 
 workArea 

^ self  api RECT newC freeAfter:[ : rect | 

|  result |

 result := self  api SystemParametersInfo  unsignedValue: self  api SPI_GETWORKAREA value:0 value: rect address value:0.

 result =0  ifTrue:[ 

 self  api reportError:'SystemParametersInfo() failed'.

0 @0 extent:(1024 @768).

] ifFalse:[ 

 rect asRectangle.

].

].



! 
 BrazilMappingForWin32_WindowsSession_SystemMetrics_1_init: api_ 

 self api: api_.

^ self.



! 
 scrollbarHeight 

|  result |

 result := self  api GetSystemMetrics signedValue: self  api SM_CYHSCROLL.

 result =0 ifTrue:[ 

^ self  api reportError:'GetSystemMetrics() failed'.

].

^ result.



! 
 desktopBounds 

|  width  height |

 width := self  api GetSystemMetrics unsignedValue: self  api SM_CXSCREEN.

 height := self  api GetSystemMetrics unsignedValue: self  api SM_CYSCREEN.

^0 @0 extent:( width @ height).



! 
api ^api! 
api: api_val api := api_val! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_SystemMetrics) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_WindowsSession_SystemMetrics := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_WindowsSession_SystemMetrics := mmd !
	 usingApi: api_ 

^ self basicNew usingApi: api_.



! 
		 !
	BrazilMappingForWin32_WindowsSession metadata addNestedClass: BrazilMappingForWin32_WindowsSession_SystemMetrics. ! 
	BrazilMappingForWin32_WindowsSession_SystemMetrics metadata enclosingMixin: BrazilMappingForWin32_WindowsSession !
	Delta define: #BrazilMappingForWin32_WindowsSession_ImageMapper as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' bitmapsByImage')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_WindowsSession_ImageMapper EnclosingObjects_BrazilMappingForWin32_WindowsSession_ImageMapper')!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_ImageMapper) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_ImageMapper) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_ImageMapper) comment: 'Translates Squeak Image instances to GDI+ cached bitmaps and maintains a cache of translated bitmaps. Only supports 32-bit ARGB images.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_ImageMapper) methodsFor: 'unclassified'!
	 resetForNewImageSession 

 self  bitmapsByImage:( (EnclosingObjects_BrazilMappingForWin32_WindowsSession_ImageMapper at: 2)  IdentityDictionary new:100).

^ self.



! 
 BrazilMappingForWin32_WindowsSession_ImageMapper_1_init 

 self bitmapsByImage:( (EnclosingObjects_BrazilMappingForWin32_WindowsSession_ImageMapper at: 2)  IdentityDictionary new:100).

^ self.



! 
bitmapsByImage: bitmapsByImage_val bitmapsByImage := bitmapsByImage_val! 
bitmapsByImage ^bitmapsByImage! 
  map: image forGraphics: graphics 

^ self  bitmapsByImage  at: image ifAbsentPut:[ 

 self   translateToBitmap: image using: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_ImageMapper at: 1)  gdiPlus.

].



! 
  translateToBitmap: image using: gdip 

|  byteSize  staticBits  imageBits  result |

 image depth ~=32 ifTrue:[ 

 self error:'Invalid image depth'.

].

 image unhibernate.

 imageBits := image bits.

 byteSize := imageBits byteSize.

 staticBits := (EnclosingObjects_BrazilMappingForWin32_WindowsSession_ImageMapper at: 2)  Alien rawNewC: byteSize.

 staticBits  replaceFrom:1 to: byteSize with: imageBits startingAt:1.

 result := gdip Bitmap  width: image width height: image height stride: image width *4 format:2498570 bits: staticBits.

^ result.



! 
 BrazilMappingForWin32_WindowsSession_ImageMapper_superInit_new 

super  new.

^ self.



! 
  translateImage: image forGraphics: graphics 

|  gdip  bitmap  cached |

 gdip := (EnclosingObjects_BrazilMappingForWin32_WindowsSession_ImageMapper at: 1)  gdiPlus.

 bitmap := self   translateToBitmap: image using: gdip.

 cached := gdip CachedBitmap  bitmap: bitmap graphics: graphics.

 bitmap release.

^ cached.



! 
 new 

 self BrazilMappingForWin32_WindowsSession_ImageMapper_superInit_new.

 self BrazilMappingForWin32_WindowsSession_ImageMapper_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_ImageMapper) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_WindowsSession_ImageMapper := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_WindowsSession_ImageMapper := mmd !
	 new 

^ self basicNew new.



! 
		 !
	BrazilMappingForWin32_WindowsSession metadata addNestedClass: BrazilMappingForWin32_WindowsSession_ImageMapper. ! 
	BrazilMappingForWin32_WindowsSession_ImageMapper metadata enclosingMixin: BrazilMappingForWin32_WindowsSession !
	Delta define: #BrazilMappingForWin32_WindowsSession_DragCueWindow as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' handle topLeft image paintstruct')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_WindowsSession_DragCueWindow EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow')!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_DragCueWindow) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_DragCueWindow) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_DragCueWindow) comment: 'Instances of this class are created to show and manage the transparent window that displays the dragged object during a drag-and-drop operation.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_DragCueWindow) methodsFor: 'unclassified'!
	 dwStyle 

^ (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api WS_POPUP.



! 
 extent 

^ self  image extent.



! 
handle: handle_val handle := handle_val! 
paintstruct ^paintstruct! 
 processWM_PAINT: args 

|  hdc  graphics  bitmap  result |

 hdc := (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api BeginPaint  unsignedValue: self  handle value: self  paintstruct address.

 graphics := (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 2)  windowsSession gdiPlus Graphics fromHDC: hdc.

 bitmap := (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 2)  windowsSession imageMapper  map: self  image forGraphics: graphics.

 result := graphics  drawImage: bitmap at:0 @0.

 graphics release.

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api EndPaint  value: self  handle value: self  paintstruct address.

^0.



! 
image ^image! 
 processWindowsMessage: args 

|  message |

 message := args message.

 message = (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api WM_ERASEBKGND ifTrue:[ 

^ self  processWM_ERASEBKGND: args.

].

 message = (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api WM_PAINT ifTrue:[ 

^ self  processWM_PAINT: args.

].

^ self  invokeDefWindowProc: args.



! 
 initialWindowBounds 

^ self  topLeft - ( self  extent //2) extent: self  extent.



! 
 dwExStyle 

^ (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api WS_EX_LAYERED | (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api WS_EX_TRANSPARENT | (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api WS_EX_TOPMOST | (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api WS_EX_NOACTIVATE.



! 
 processWM_ERASEBKGND: args 

^1.



! 
 open 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  draggedImageWindowClass createWindowForAgent: self.

 self  handle =0 ifTrue:[ 

^ (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api reportError:'DragCue window creation failed'.

].

 self  paintstruct: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api PAINTSTRUCT newC.

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api ShowWindow  value: self  handle value: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api SW_SHOW.

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api SetLayeredWindowAttributes  value: self  handle value:0 value:160 value:1.

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api UpdateWindow value: self  handle.

^ self.



! 
  image: theImage at: initialTopLeft 

 self  BrazilMappingForWin32_WindowsSession_DragCueWindow_superInit_image: theImage at: initialTopLeft.

 self  BrazilMappingForWin32_WindowsSession_DragCueWindow_1_init_image: theImage at: initialTopLeft.

^ self.



! 
paintstruct: paintstruct_val paintstruct := paintstruct_val! 
image: image_val image := image_val! 
  BrazilMappingForWin32_WindowsSession_DragCueWindow_1_init_image: theImage at: initialTopLeft 

 self image: theImage.

 self topLeft: initialTopLeft.

 self handle:0.

 self paintstruct:nil.

^ self.



! 
 isOpen 

^ self  handle ~=0.



! 
 resetForNewImageSession 

 self  handle:0.

 self  paintstruct:0.

^ self.



! 
topLeft ^topLeft! 
 title 

^#''.



! 
 moveTo: newTopLeft 

 self  topLeft: newTopLeft.

 self  isOpen ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api MoveWindow  value: self  handle value: self  topLeft x - ( self  image width //2) value: self  topLeft y - ( self  image height //2) value: self  image width value: self  image height value:1.

].

^ self.



! 
  BrazilMappingForWin32_WindowsSession_DragCueWindow_superInit_image: theImage at: initialTopLeft 

super  new.

^ self.



! 
handle ^handle! 
 invokeDefWindowProc: args 

^ (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api DefWindowProc  unsignedValue: args hwnd value: args message value: args wParam value: args lParam.



! 
 parentHandle 

^0.



! 
topLeft: topLeft_val topLeft := topLeft_val! 
 close 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow at: 1)  api DestroyWindow signedValue: self  handle.

 self  handle:0.

 self  paintstruct ifNotNil:[ 

 self  paintstruct free.

 self  paintstruct:nil.

].

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_DragCueWindow) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_WindowsSession_DragCueWindow := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_WindowsSession_DragCueWindow := mmd !
	  image: theImage at: initialTopLeft 

^ self basicNew  image: theImage at: initialTopLeft.



! 
		 !
	BrazilMappingForWin32_WindowsSession metadata addNestedClass: BrazilMappingForWin32_WindowsSession_DragCueWindow. ! 
	BrazilMappingForWin32_WindowsSession_DragCueWindow metadata enclosingMixin: BrazilMappingForWin32_WindowsSession !
	Delta define: #BrazilMappingForWin32_WindowsSession_FontMapper as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' arialFont charSet georgiaFont consolasFont verdanaFont fontHandlesBySize BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference_slot preferredSize api defaultFont')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_WindowsSession_FontMapper EnclosingObjects_BrazilMappingForWin32_WindowsSession_FontMapper')!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_FontMapper) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_FontMapper) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_FontMapper) comment: 'Manages Windows font handles corresponding to Brazil fonts.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_FontMapper) methodsFor: 'unclassified'!
	 createFontHandleForSize: size 

|  hfont |

#'BOGUS' yourself.

( (EnclosingObjects_BrazilMappingForWin32_WindowsSession_FontMapper at: 2)  Alien newCString: self  defaultFont faceName) freeAfter:[ : faceName | 

 hfont := self  api CreateFont unsignedValueWithArguments:(( self Array new:14)  at:1 put: size negated; 

  at:2 put:0; 

  at:3 put:0; 

  at:4 put:0; 

  at:5 put:0; 

  at:6 put:0; 

  at:7 put:0; 

  at:8 put:0; 

  at:9 put: self  defaultCharsetId; 

  at:10 put:0; 

  at:11 put:0; 

  at:12 put: self  api NONANTIALIASED_QUALITY; 

  at:13 put:0; 

  at:14 put: faceName address; 

 yourself).

 hfont =0 ifTrue:[ 

^ self  api reportError:'CreateFont() failed'.

].

].

^ hfont.



! 
 BrazilMappingForWin32_WindowsSession_FontMapper_superInit_usingApi: api_ 

super  new.

^ self.



! 
 BrazilMappingForWin32_WindowsSession_FontMapper_1_init: api_ 

 self api: api_.

 self fontHandlesBySize: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_FontMapper at: 2)  Dictionary new.

 self arialFont:( self  FontPreference  forFaceNamed:'Arial' sizes:(( self Array new:5)  at:1 put:10; 

  at:2 put:11; 

  at:3 put:13; 

  at:4 put:16; 

  at:5 put:20; 

 yourself)).

 self verdanaFont:( self  FontPreference  forFaceNamed:'Verdana' sizes:(( self Array new:5)  at:1 put:9; 

  at:2 put:10; 

  at:3 put:11; 

  at:4 put:13; 

  at:5 put:16; 

 yourself)).

 self georgiaFont:( self  FontPreference  forFaceNamed:'Georgia' sizes:(( self Array new:5)  at:1 put:10; 

  at:2 put:11; 

  at:3 put:13; 

  at:4 put:16; 

  at:5 put:20; 

 yourself)).

 self consolasFont:( self  FontPreference  forFaceNamed:'Consolas' sizes:(( self Array new:5)  at:1 put:10; 

  at:2 put:11; 

  at:3 put:13; 

  at:4 put:16; 

  at:5 put:20; 

 yourself)).

 self defaultFont: self  arialFont.

 self preferredSize:#'regular'.

 self charSet:nil.

^ self.



! 
charSet ^charSet! 
consolasFont ^consolasFont! 
verdanaFont ^verdanaFont! 
 fontSizesMap 

^ self  defaultFontSizesMap.



! 
 defaultControlFontHandle 

^ self  handleForFont: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_FontMapper at: 2)  Font normal.



! 
api ^api! 
fontHandlesBySize ^fontHandlesBySize! 
 defaultCharsetId 

|  codepage |

 self  charSet isNil ifTrue:[ 

 codepage := self  api KernelDLL GetACP unsignedValue.

 self  charSet:((( self Array new:9)  at:1 put:1250 ->238; 

  at:2 put:1251 ->204; 

  at:3 put:1253 ->161; 

  at:4 put:1254 ->162; 

  at:5 put:1255 ->177; 

  at:6 put:1256 ->178; 

  at:7 put:1257 ->186; 

  at:8 put:1258 ->222; 

  at:9 put:874 ->163; 

 yourself)  detect:[ : elt | 

 elt key = codepage.

] ifNone:[ 

0 ->0.

]) value.

].

^ self  charSet.



! 
georgiaFont: georgiaFont_val georgiaFont := georgiaFont_val! 
preferredSize ^preferredSize! 
defaultFont ^defaultFont! 
verdanaFont: verdanaFont_val verdanaFont := verdanaFont_val! 
 resetForNewImageSession 

 self  charSet:nil.

 self  fontHandlesBySize keys do:[ : each | 

 self  fontHandlesBySize removeKey: each.

].

^ self.



! 
arialFont ^arialFont! 
 handleForFont: font 

|  translatedSize |

 translatedSize := self  fontSizesMap at: font sizeX.

^ self  fontHandlesBySize  at: translatedSize ifAbsentPut:[ 

 self  createFontHandleForSize: translatedSize.

].



! 
defaultFont: defaultFont_val defaultFont := defaultFont_val! 
fontHandlesBySize: fontHandlesBySize_val fontHandlesBySize := fontHandlesBySize_val! 
georgiaFont ^georgiaFont! 
consolasFont: consolasFont_val consolasFont := consolasFont_val! 
FontPreference
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_WindowsSession_FontMapper 
			nestedMixins at: #BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_WindowsSession_FontMapper Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_WindowsSession_FontMapper size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_WindowsSession_FontMapper at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference_slot := myNested.
		].
	^BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference_slot! 
preferredSize: preferredSize_val preferredSize := preferredSize_val! 
arialFont: arialFont_val arialFont := arialFont_val! 
 usingApi: api_ 

 self BrazilMappingForWin32_WindowsSession_FontMapper_superInit_usingApi: api_.

 self BrazilMappingForWin32_WindowsSession_FontMapper_1_init: api_.

^ self.



! 
charSet: charSet_val charSet := charSet_val! 
 defaultFontSizesMap 

^ self  defaultFont fontSizes.



! 
api: api_val api := api_val! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_FontMapper) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_WindowsSession_FontMapper := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_WindowsSession_FontMapper := mmd !
	 usingApi: api_ 

^ self basicNew usingApi: api_.



! 
		 !
	BrazilMappingForWin32_WindowsSession metadata addNestedClass: BrazilMappingForWin32_WindowsSession_FontMapper. ! 
	BrazilMappingForWin32_WindowsSession_FontMapper metadata enclosingMixin: BrazilMappingForWin32_WindowsSession !
	Delta define: #BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' faceName fontSizes')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference EnclosingObjects_BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference')!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference) comment: 'Describe the class in this comment.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference) methodsFor: 'unclassified'!
	 hugeFontSizes 

^ self  fontSizes *3/2 collect:[ : i | 

 i rounded.

].



! 
faceName ^faceName! 
 preferredSizes 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference at: 1)  preferredSize =#'large' ifTrue:[ 

^ self  largeFontSizes.

].

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference at: 1)  preferredSize =#'huge' ifTrue:[ 

^ self  hugeFontSizes.

].

^ self  fontSizes.



! 
  BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference_superInit_forFaceNamed: fn sizes: sizes 

super  new.

^ self.



! 
fontSizes: fontSizes_val fontSizes := fontSizes_val! 
faceName: faceName_val faceName := faceName_val! 
  BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference_1_init_forFaceNamed: fn sizes: sizes 

 self faceName: fn.

 self fontSizes: sizes.

^ self.



! 
 largeFontSizes 

^ self  fontSizes *6/5 collect:[ : i | 

 i rounded.

].



! 
fontSizes ^fontSizes! 
  forFaceNamed: fn sizes: sizes 

 self  BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference_superInit_forFaceNamed: fn sizes: sizes.

 self  BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference_1_init_forFaceNamed: fn sizes: sizes.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference := mmd !
	  forFaceNamed: fn sizes: sizes 

^ self basicNew  forFaceNamed: fn sizes: sizes.



! 
		 !
	BrazilMappingForWin32_WindowsSession_FontMapper metadata addNestedClass: BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference. ! 
	BrazilMappingForWin32_WindowsSession_FontMapper_FontPreference metadata enclosingMixin: BrazilMappingForWin32_WindowsSession_FontMapper !
	Delta define: #BrazilMappingForWin32_WindowsSession_WindowClass as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' classStruct agentBeingCreated style bgBrush lastAgent lastHandle agentsByHandle className windowProc iconIdOrName createWindowEx defWindowProc name classAtom')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_WindowsSession_WindowClass EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass')!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_WindowClass) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_WindowClass) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_WindowClass) comment: 'Represents a Windows window class, manages its registration and dispatches Windows notifications to agent instances open as windows of this class.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_WindowClass) methodsFor: 'unclassified'!
	 setupClassStruct 

 self  classStruct: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api WNDCLASS newC.

 self  classStruct style: self  style; 

 lpfnWndProc: self  windowProc thunk asUnsignedLong; 

 hInstance: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  applicationInstanceHandle; 

 hIcon: self  loadIcon; 

 hCursor: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  loadArrowCursor; 

 hbrBackground: self  bgBrush; 

 lpszClassName: self  className address.

^ self.



! 
  BrazilMappingForWin32_WindowsSession_WindowClass_superInit_name: theName style: styleBits bg: theBrush 

super  new.

^ self.



! 
 setupWindowProc 

 self  windowProc:( (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api Callback  block:[ : args : result | 

 result returnInteger:( self  dispatchMessage: args).

] stdcallArgsClass: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api WindowProc).

^ self.



! 
  name: theName style: styleBits bg: theBrush 

 self  BrazilMappingForWin32_WindowsSession_WindowClass_superInit_name: theName style: styleBits bg: theBrush.

 self  BrazilMappingForWin32_WindowsSession_WindowClass_1_init_name: theName style: styleBits bg: theBrush.

^ self.



! 
defWindowProc ^defWindowProc! 
 createWindowForAgent: agent 

|  title  bounds  handle |

 self  ensureRegistration.

 self  agentBeingCreated: agent.

 title := agent title asAlien.

 bounds := agent initialWindowBounds.

 handle := self  createWindowEx  unsignedValue: agent dwExStyle value: self  className address value: title address value: agent dwStyle value: bounds left value: bounds top value: bounds width value: bounds height value: agent parentHandle value:0 value: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  applicationInstanceHandle value:0.

 title free.

 handle =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api reportError:'CreateWindowEx failed'.

].

^ self.



! 
lastAgent ^lastAgent! 
createWindowEx ^createWindowEx! 
 dispatchMessageUnsafe: args 

|  handle |

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  lastActivity: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 2)  Time millisecondClockValue.

 handle := args hwnd.

 self  lastHandle = handle ifTrue:[ 

^ self  lastAgent processWindowsMessage: args.

].

( self  agentsByHandle  at: handle ifAbsent:[ 

nil.

]) ifNotNil:[ : agent | 

 self  lastHandle: handle.

 self  lastAgent: agent.

^ agent processWindowsMessage: args.

].

( self  agentBeingCreated notNil and:[ 

 args message =129.

]) ifTrue:[ 

 self  lastHandle: handle.

 self  lastAgent: self  agentBeingCreated.

 self  agentsByHandle  at: handle put: self  agentBeingCreated.

 self  agentBeingCreated handle: handle.

 self  agentBeingCreated:nil.

^ self  lastAgent processWindowsMessage: args.

].

^ self  defWindowProc  unsignedValue: args hwnd value: args message value: args wParam value: args lParam.



! 
 resetForNewImageSession 

 self  classAtom:0.

 self  className:nil.

 self  windowProc:nil.

 self  classStruct:nil.

 self  agentsByHandle do:[ : each | 

 each resetForNewImageSession.

].

 self  agentsByHandle:( (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 2)  Dictionary new:10).

 self  agentBeingCreated:nil.

 self  lastHandle:nil.

 self  lastAgent:nil.

^ self.



! 
 ensureRegistration 

 self  isRegistered ifFalse:[ 

 self  setupClassName.

 self  setupWindowProc.

 self  setupClassStruct.

 self  registerWindowClass.

].

^ self.



! 
lastAgent: lastAgent_val lastAgent := lastAgent_val! 
 unregisterWindowForAgent: agent 

 self  agentsByHandle  removeKey: agent handle ifAbsent:[ 

^ self.

].

 agent handle:nil.

^ self.



! 
windowProc: windowProc_val windowProc := windowProc_val! 
 registerWindowClass 

|  result |

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api UnregisterClass  value: self  className address value: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  applicationInstanceHandle.

 result := (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api RegisterClass unsignedValue: self  classStruct address.

 result =0 ifTrue:[ 

^ (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api reportError:'RegisterClass failed'.

].

 self  classAtom: result.

^ self.



! 
name: name_val name := name_val! 
  BrazilMappingForWin32_WindowsSession_WindowClass_1_init_name: theName style: styleBits bg: theBrush 

 self name: theName.

 self style: styleBits.

 self bgBrush: theBrush.

 self iconIdOrName:nil.

 self classAtom:0.

 self className:nil.

 self windowProc:nil.

 self classStruct:nil.

 self agentsByHandle:( (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 2)  Dictionary new:10).

 self lastHandle:nil.

 self lastAgent:nil.

 self agentBeingCreated:nil.

 self defWindowProc: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api DefWindowProc.

 self createWindowEx: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api CreateWindowEx.

^ self.



! 
classAtom ^classAtom! 
classStruct ^classStruct! 
lastHandle: lastHandle_val lastHandle := lastHandle_val! 
classAtom: classAtom_val classAtom := classAtom_val! 
bgBrush: bgBrush_val bgBrush := bgBrush_val! 
 setupClassName 

 self  className:( (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 2)  Alien newCString: self  name).

^ self.



! 
style ^style! 
createWindowEx: createWindowEx_val createWindowEx := createWindowEx_val! 
agentBeingCreated: agentBeingCreated_val agentBeingCreated := agentBeingCreated_val! 
iconIdOrName: iconIdOrName_val iconIdOrName := iconIdOrName_val! 
agentsByHandle ^agentsByHandle! 
classStruct: classStruct_val classStruct := classStruct_val! 
 loadIconWithName: iconName 

^( (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 2)  Alien newCString: iconName) freeAfter:[ : cString | 

|  iconHandle |

 iconHandle := (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api LoadIcon  unsignedValue: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  applicationInstanceHandle value: cString.

 iconHandle =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api reportError:'LoadIcon failed'.

].

 iconHandle.

].



! 
 isRegistered 

^ self  classAtom ~=0.



! 
className ^className! 
 dispatchMessage: args 

^ self  dispatchMessageUnsafe: args.



! 
iconIdOrName ^iconIdOrName! 
style: style_val style := style_val! 
 loadIcon 

^ self  iconIdOrName  ifNil:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  loadApplicationIcon.

] ifNotNil:[ 

 self  iconIdOrName isString  ifTrue:[ 

 self  loadIconWithName: self  iconIdOrName.

] ifFalse:[ 

 self  loadIconWithId: self  iconIdOrName.

].

].



! 
name ^name! 
agentBeingCreated ^agentBeingCreated! 
bgBrush ^bgBrush! 
className: className_val className := className_val! 
lastHandle ^lastHandle! 
defWindowProc: defWindowProc_val defWindowProc := defWindowProc_val! 
windowProc ^windowProc! 
 loadIconWithId: iconId 

|  iconHandle |

 iconHandle := (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api LoadIcon  unsignedValue: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  applicationInstanceHandle value:( iconId bitAnd:65535).

 iconHandle =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass at: 1)  api reportError:'LoadIcon failed'.

].

^ iconHandle.



! 
agentsByHandle: agentsByHandle_val agentsByHandle := agentsByHandle_val! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_WindowClass) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_WindowsSession_WindowClass := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_WindowsSession_WindowClass := mmd !
	  name: theName style: styleBits bg: theBrush 

^ self basicNew  name: theName style: styleBits bg: theBrush.



! 
		 !
	BrazilMappingForWin32_WindowsSession metadata addNestedClass: BrazilMappingForWin32_WindowsSession_WindowClass. ! 
	BrazilMappingForWin32_WindowsSession_WindowClass metadata enclosingMixin: BrazilMappingForWin32_WindowsSession !
	Delta define: #BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' extents inUse bitmaps')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager EnclosingObjects_BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager')!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager) comment: 'Responsible for managing double buffering bitmaps we use for painting things. Holds onto one bitmap and its extent. A client requests a bitmap to use by sending #withBitmapOfExtent:for:do:.

The action block is evaluated with a Bitmap instance of the extent at least equal to the requested. If the existing bitmap is large enough, it is reused. If not, the old one is released and a new one is created. The instance has an ''inUse'' lock. An error is signalled if a buffer is requested while the action block of a prior #withBitmapOfExtent:for:do: request is still running.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager) methodsFor: 'unclassified'!
	 resetForNewImageSession 

 self  bitmaps:nil.

 self  extents:nil.

 self  inUse:false.

^ self.



! 
bitmaps ^bitmaps! 
  withBitmapOfExtent: requestedExtent do: action 

|  result  bitmap |

 bitmap := self  createBitmapOfExtent: requestedExtent.

^[ 

 action value: bitmap.

] ensure:[ 

 bitmap release.

].



! 
 BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager_superInit_new 

super  new.

^ self.



! 
inUse ^inUse! 
  ORIGwithBitmapOfExtent: requestedExtent do: action 

 self  inUse ifTrue:[ 

^ self error:'nested call to double buffering manager - bitmap in use'.

].

 self  inUse:true.

( self bitmap isNil or:[ 

 self extent < requestedExtent.

]) ifTrue:[ 

 self bitmap notNil ifTrue:[ 

 self bitmap release.

].

 self  createBitmapOfExtent: requestedExtent.

].

^[ 

 action value: self bitmap.

] ensure:[ 

 self  inUse:false.

].



! 
 createBitmapOfExtent: requestedExtent 

^ (EnclosingObjects_BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager at: 1)  gdiPlus Bitmap  width: requestedExtent x height: requestedExtent y format:2498570.



! 
  NOCACHEwithBitmapOfExtent: requestedExtent do: action 

 self  inUse ifTrue:[ 

^ self error:'nested call to double buffering manager - bitmap in use'.

].

 self  inUse:true.

 self  createBitmapOfExtent: requestedExtent.

^[ 

 action value: self bitmap.

] ensure:[ 

 self bitmap release.

 self bitmap:nil.

 self  inUse:false.

].



! 
inUse: inUse_val inUse := inUse_val! 
bitmaps: bitmaps_val bitmaps := bitmaps_val! 
 BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager_1_init 

 self bitmaps:nil.

 self extents:nil.

 self inUse:false.

^ self.



! 
extents ^extents! 
extents: extents_val extents := extents_val! 
 new 

 self BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager_superInit_new.

 self BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager := mmd !
	 new 

^ self basicNew new.



! 
		 !
	BrazilMappingForWin32_WindowsSession metadata addNestedClass: BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager. ! 
	BrazilMappingForWin32_WindowsSession_DoubleBufferingSurfaceManager metadata enclosingMixin: BrazilMappingForWin32_WindowsSession !
	Delta define: #BrazilMappingForWin32_WindowsSession_TextMeasurer as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' requestResizeContinuation handle textEditorHandle')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_WindowsSession_TextMeasurer EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer')!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_TextMeasurer) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_TextMeasurer) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_TextMeasurer) comment: 'Manages an invisible window with a text control that we use to measure natural extent of rich edit controls. An instance used for that is maintained by WindowsSession.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_TextMeasurer) methodsFor: 'unclassified'!
	 dwStyle 

^ (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api WS_OVERLAPPEDWINDOW.



! 
requestResizeContinuation: requestResizeContinuation_val requestResizeContinuation := requestResizeContinuation_val! 
  sendMessage: msg wParam: wParam lParam: lParam 

^ (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api SendMessage  unsignedValue: self  textEditorHandle value: msg value: wParam value: lParam.



! 
 processWM_NOTIFY: args 

|  header  requested |

 header := (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api NMHDR atAddress: args lParam.

 header code = (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api EN_REQUESTRESIZE ifTrue:[ 

 self  requestResizeContinuation notNil ifTrue:[ 

 requested :=( (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api REQRESIZE atAddress: header address) asRectangle.

 self  requestResizeContinuation value: requested.

].

].

^0.



! 
 setEditorText: newText 

( (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 2)  Alien newCString: newText asString) freeAfter:[ : cString | 

 self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api WM_SETTEXT wParam:0 lParam: cString address.

].

 newText isText ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 2)  TextDecorator  decorateControlWithHandle: self  textEditorHandle accordingTo: newText.

].

^ self.



! 
  measureText: text heightForWidth: width 

 self  setEditorText: text.

 self  setEditorWidth: width.

^ self  requestEditorCurrentNaturalHeight.



! 
 processWindowsMessage: args 

 args message = (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api WM_NOTIFY ifTrue:[ 

^ self  processWM_NOTIFY: args.

].

^ self  invokeDefWindowProc: args.



! 
 initialWindowBounds 

^0 @0 extent:(10000 @10000).



! 
 BrazilMappingForWin32_WindowsSession_TextMeasurer_1_init 

 self handle:0.

 self textEditorHandle:0.

 self requestResizeContinuation:nil.

^ self.



! 
textEditorHandle: textEditorHandle_val textEditorHandle := textEditorHandle_val! 
 dwExStyle 

^0.



! 
 setEditorWidth: width 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api MoveWindow  value: self  textEditorHandle value:0 value:0 value: width value:10000 value:0.

^ self.



! 
textEditorHandle ^textEditorHandle! 
handle: handle_val handle := handle_val! 
 BrazilMappingForWin32_WindowsSession_TextMeasurer_superInit_new 

super  new.

^ self.



! 
 new 

 self BrazilMappingForWin32_WindowsSession_TextMeasurer_superInit_new.

 self BrazilMappingForWin32_WindowsSession_TextMeasurer_1_init.

^ self.



! 
 resetForNewImageSession 

 self handle:0.

 self textEditorHandle:0.

 self  requestResizeContinuation:nil.

^ self.



! 
requestResizeContinuation ^requestResizeContinuation! 
 title 

^'BrazilTextMeasurer'.



! 
handle ^handle! 
 createTextEditor 

|  eventMask  hfont |

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  ensureRichEdit20Loaded.

( (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 2)  Alien newCString:'RICHEDIT20A') freeAfter:[ : className | 

 self textEditorHandle:( (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api CreateWindowEx unsignedValueWithArguments:(( self Array new:12)  at:1 put: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api WS_EX_CLIENTEDGE; 

  at:2 put: className address; 

  at:3 put:0; 

  at:4 put: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api WS_VISIBLE | (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api WS_CHILD | (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api ES_MULTILINE; 

  at:5 put:0; 

  at:6 put:0; 

  at:7 put:10000; 

  at:8 put:10000; 

  at:9 put: self  handle; 

  at:10 put:0; 

  at:11 put: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  applicationInstanceHandle; 

  at:12 put:0; 

 yourself)).

].

 self  textEditorHandle =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api reportError:'TextMeasurer control creation failed'.

].

 eventMask := self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api EM_GETEVENTMASK wParam:0 lParam:0.

 self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api EM_SETEVENTMASK wParam:0 lParam: eventMask | (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api ENM_REQUESTRESIZE | (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api ENM_CHANGE | (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api ENM_KEYEVENTS.

 hfont := (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  fontMapper defaultControlFontHandle.

 self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api WM_SETFONT wParam: hfont lParam:1.

^ self.



! 
 invokeDefWindowProc: args 

^ (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api DefWindowProc  unsignedValue: args hwnd value: args message value: args wParam value: args lParam.



! 
 parentHandle 

^0.



! 
 requestEditorCurrentNaturalHeight 

|  answer |

 answer :=0.

 self  requestResizeContinuation:[ : desiredRect | 

 answer := desiredRect height.

].

 self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api EM_REQUESTRESIZE wParam:0 lParam:0.

 self  requestResizeContinuation:nil.

^ answer.



! 
 startup 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  textMeasurerWindowClass createWindowForAgent: self.

 self  handle =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer at: 1)  api reportError:'TextMeasurer window creation failed'.

].

 self  createTextEditor.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowsSession_TextMeasurer) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_WindowsSession_TextMeasurer := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_WindowsSession_TextMeasurer := mmd !
	 new 

^ self basicNew new.



! 
		 !
	BrazilMappingForWin32_WindowsSession metadata addNestedClass: BrazilMappingForWin32_WindowsSession_TextMeasurer. ! 
	BrazilMappingForWin32_WindowsSession_TextMeasurer metadata enclosingMixin: BrazilMappingForWin32_WindowsSession !
	Delta define: #BrazilMappingForWin32_NullAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' lastMouseEventConsumer')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_NullAgent EnclosingObjects_BrazilMappingForWin32_NullAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_NullAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_NullAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_NullAgent) comment: 'This is an agent of a visual that does not map to a Windows artifact. Its important feature is that the #handle it reports upon request is the handle of the parent, so that any descendents can obtain the handle of the window artifact they belong to.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_NullAgent) methodsFor: 'unclassified'!
	 isNull 

^true.



! 
 handle 

^ self parent handle.



! 
 connectArtifactsOfChild: childAgent 

 self parent connectArtifactsOfChild: childAgent.

^ self.



! 
 createOwnArtifacts 

^ self.



! 
lastMouseEventConsumer: lastMouseEventConsumer_val lastMouseEventConsumer := lastMouseEventConsumer_val! 
 matchVisualsBounds 

^ self.



! 
lastMouseEventConsumer ^lastMouseEventConsumer! 
 BrazilMappingForWin32_NullAgent_1_init: visual 

 self lastMouseEventConsumer:nil.

^ self.



! 
 destroyOwnArtifacts 

super  destroyOwnArtifacts.

 self invalidate.

^ self.



! 
 noteBeginningOfBoundsChangeAndProvideEndContinuation 

 self areBoundsChanging:true.

^ self areBoundsInAncestorsChanging  ifTrue:[ 

[ 

 self areBoundsChanging:false.

].

] ifFalse:[ 

|  originalBounds |

 originalBounds := self visual bounds.

[ 

 self parent ifNotNil:[ : it | 

 it invalidateRectangle: originalBounds.

].

 self invalidate.

 self areBoundsChanging:false.

].

].



! 
 BrazilMappingForWin32_NullAgent_superInit_forVisual: visual 

super  forVisual: visual.

^ self.



! 
 forVisual: visual 

 self BrazilMappingForWin32_NullAgent_superInit_forVisual: visual.

 self BrazilMappingForWin32_NullAgent_1_init: visual.

^ self.



! 
 findConsumerForMouseEventAt: point 

|  pointRelativeToSelf |

( self visual bounds containsPoint: point) ifFalse:[ 

^nil.

].

 pointRelativeToSelf := point translateBy: self visual origin negated.

 self childrenReverseDo:[ : each | 

( each findConsumerForMouseEventAt: pointRelativeToSelf) ifNotNil:[ : consumer | 

 self  lastMouseEventConsumer: each.

^ consumer.

].

].

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_NullAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_NullAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_NullAgent := mmd !
	 forVisual: visual 

^ self basicNew forVisual: visual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_NullAgent. ! 
	BrazilMappingForWin32_NullAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_LabelAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' naturalExtent_')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_LabelAgent EnclosingObjects_BrazilMappingForWin32_LabelAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_LabelAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_LabelAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_LabelAgent) comment: 'Handles the Label visuals. This agent does not create a Windows control and instead contributes to WM_PAINT messages to display its visual. The agent is also passive with respect to mouse input.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_LabelAgent) methodsFor: 'unclassified'!
	  getDCWhile: action ifNotMapped: unmappedAction 

|  hwnd  hdc |

 hwnd := self windowHandle.

 hwnd isNil ifTrue:[ 

^ unmappedAction value.

].

 hdc := (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  api GetDC unsignedValue: hwnd.

 hdc =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  api reportError:'GetDC() failed'.

].

^[ 

 action value: hdc.

] ensure:[ 

 (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  api ReleaseDC  value: hwnd value: hdc.

].



! 
 naturalExtent 

 self  naturalExtent_ isNil ifTrue:[ 

 self   getDCWhile:[ : hdc | 

 self  naturalExtent_:( self  measureLabelUsing: hdc).

] ifNotMapped:[ 

^0 @0.

].

].

^ self  naturalExtent_.



! 
 connectOwnArtifacts 

 self  map: self visual textA to: self ~#'matchVisualsText:'.

 self  map: self visual colorA to: self ~#'matchVisualsColor:'.

super  connectOwnArtifacts.

^ self.



! 
 matchVisualsColor: newColor 

 self invalidate.

^ self.



! 
  contributeToWM_PAINTOn: hdc inside: parentRelativeUpdateRect translatedBy: parentOrigin 

|  windowRelativeBounds |

( self visual visible and:[ 

 self visual bounds intersects: parentRelativeUpdateRect.

]) ifTrue:[ 

 windowRelativeBounds := self visual bounds translateBy: parentOrigin.

 self   configureDC: hdc around:[ 

 self   paintOn: hdc inside: windowRelativeBounds.

].

].

^ self.



! 
 measureLabelUsing: hdc 

|  text  result |

 text := self visual text asString.

 self  selectProperFontInto: hdc.

^ (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  api POINT newC freeAfter:[ : sizeBuffer | 

 result := (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  api GetTextExtentPoint32  unsignedValue: hdc value:( (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  UnsafeAlien forPointerTo: text) value: text size value: sizeBuffer address.

 result =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  api reportError:'GetTextExtentPoint32() failed'.

].

 sizeBuffer asPoint.

].



! 
naturalExtent_ ^naturalExtent_! 
 selectProperFontInto: hdc 

|  hfont |

 hfont := (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  windowsSession fontMapper handleForFont: self visual font.

 (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  api SelectObject  value: hdc value: hfont.

^ self.



! 
 forVisual: v 

 self BrazilMappingForWin32_LabelAgent_superInit_forVisual: v.

 self BrazilMappingForWin32_LabelAgent_1_init: v.

^ self.



! 
 BrazilMappingForWin32_LabelAgent_superInit_forVisual: v 

super  forVisual: v.

^ self.



! 
naturalExtent_: naturalExtent__val naturalExtent_ := naturalExtent__val! 
  configureDC: hdc around: action 

|  oldMode |

 oldMode := (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  api SetBkMode  unsignedValue: hdc value:1.

 self  selectProperColorInto: hdc.

 self  selectProperFontInto: hdc.

^ action ensure:[ 

 (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  api SetBkMode  unsignedValue: hdc value: oldMode.

].



! 
 flushLayoutCaches 

 self  naturalExtent_:nil.

^ self.



! 
 destroyOwnArtifacts 

super  destroyOwnArtifacts.

 self invalidate.

^ self.



! 
 BrazilMappingForWin32_LabelAgent_1_init: v 

 self naturalExtent_:nil.

^ self.



! 
 matchVisualsText: newText 

 self invalidate.

 self  flushLayoutCaches.

 self invalidate.

^ self.



! 
  paintOn: hdc inside: box 

|  visualsText  success |

 visualsText := self visual text asString.

( (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  Alien newCString: visualsText) freeAfter:[ : buffer | 

 success := (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  api TextOut  boolValue: hdc value: box left value: box top value: buffer address value: visualsText size.

].

 success ifFalse:[ 

 (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  api reportError:'TextOut() failed'.

].

^ self.



! 
 selectProperColorInto: hdc 

 (EnclosingObjects_BrazilMappingForWin32_LabelAgent at: 1)  api SetTextColor  value: hdc value: self visual color asColorref.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_LabelAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_LabelAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_LabelAgent := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_LabelAgent. ! 
	BrazilMappingForWin32_LabelAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_WindowControlAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' currentBounds lastHostRelativeBounds')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_WindowControlAgent EnclosingObjects_BrazilMappingForWin32_WindowControlAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowControlAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowControlAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowControlAgent) comment: 'This is the abstract superclass of agents that represent Windows controls such as buttons and list boxes. It provides the behavior required to register the agent with the top-level window so that WM_COMMAND notifications are passed from the window to the control agent. It also implements #matchVisualsBounds to move the Windows control to match the bounds of the visual.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowControlAgent) methodsFor: 'unclassified'!
	 dwStyle 

^ (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  api WS_TABSTOP | (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  api WS_CHILD | (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  api WS_CLIPSIBLINGS.



! 
 BrazilMappingForWin32_WindowControlAgent_superInit_forVisual: visual 

super  forVisual: visual.

^ self.



! 
 connectOwnArtifacts 

super  connectOwnArtifacts.

 self  map: self visual visibleA to: self ~#'matchVisualsVisibility:'.

^ self.



! 
 selectControlFontInto: hdc 

|  hfont |

 hfont := (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  windowsSession fontMapper defaultControlFontHandle.

 (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  api SelectObject  value: hdc value: hfont.

^ self.



! 
 matchVisualsVisibility: shouldBeVisible 

 self handle ifNotNil:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  api ShowWindow  value: self handle value:( shouldBeVisible  ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  api SW_SHOW.

] ifFalse:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  api SW_HIDE.

]).

].

^ self.



! 
 createOwnArtifacts 

|  className  title  windowRelativeBounds |

 className := (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  Alien newCString: self  controlClassName.

 title := (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  Alien newCString: self  controlWindowTitle asString.

 windowRelativeBounds := self visual bounds  translateFrom: self visual parent to: self visual window.

 self handle:( (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  api CreateWindowEx unsignedValueWithArguments:(( self Array new:12)  at:1 put: self  dwExStyle; 

  at:2 put: className address; 

  at:3 put: title address; 

  at:4 put: self  dwStyle; 

  at:5 put: windowRelativeBounds left; 

  at:6 put: windowRelativeBounds top; 

  at:7 put: windowRelativeBounds width; 

  at:8 put: windowRelativeBounds height; 

  at:9 put: self parent handle; 

  at:10 put:0; 

  at:11 put: (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  windowsSession applicationInstanceHandle; 

  at:12 put:0; 

 yourself)).

 className free.

 title free.

 self handle =0  ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  api reportError:( self  controlClassName ,' creation failed').

] ifFalse:[ 

 self  setControlFont.

].

^ self.



! 
 dwExStyle 

^0.



! 
 setControlFont 

|  hfont |

 hfont := (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  windowsSession fontMapper defaultControlFontHandle.

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  api WM_SETFONT wParam: hfont lParam:1.

^ self.



! 
currentBounds ^currentBounds! 
 forVisual: visual 

 self BrazilMappingForWin32_WindowControlAgent_superInit_forVisual: visual.

 self BrazilMappingForWin32_WindowControlAgent_1_init: visual.

^ self.



! 
lastHostRelativeBounds: lastHostRelativeBounds_val lastHostRelativeBounds := lastHostRelativeBounds_val! 
currentBounds: currentBounds_val currentBounds := currentBounds_val! 
 collectControlsByHandleInto: aDictionary 

 self handle notNil ifTrue:[ 

 aDictionary  at: self handle put: self.

].

^ self.



! 
 BrazilMappingForWin32_WindowControlAgent_1_init: visual 

 self currentBounds:(0 @0 extent:(0 @0)).

 self lastHostRelativeBounds:nil.

^ self.



! 
 controlClassName 

 self subclassResponsibility.

^ self.



! 
 processCommand: code 

^0.



! 
  processNotification: code data: lparam 

^0.



! 
 destroyOwnArtifacts 

super  destroyOwnArtifacts.

 self handle ifNotNil:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  api DestroyWindow value: self handle.

 self handle:nil.

].

^ self.



! 
lastHostRelativeBounds ^lastHostRelativeBounds! 
 controlWindowTitle 

^#''.



! 
 matchVisualsBounds 

 self handle notNil ifTrue:[ 

 self currentBounds:( self parent rectangleRelativeToHostWindow: self visual bounds).

 self  lastHostRelativeBounds = self  currentBounds ifTrue:[ 

^ self.

].

 self  lastHostRelativeBounds: self  currentBounds.

 (EnclosingObjects_BrazilMappingForWin32_WindowControlAgent at: 1)  api MoveWindow valueWithArguments:(( self Array new:6)  at:1 put: self handle; 

  at:2 put: self  currentBounds left asInteger; 

  at:3 put: self  currentBounds top asInteger; 

  at:4 put: self  currentBounds width asInteger; 

  at:5 put: self  currentBounds height asInteger; 

  at:6 put:1; 

 yourself).

].

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowControlAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_WindowControlAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_WindowControlAgent := mmd !
	 forVisual: visual 

^ self basicNew forVisual: visual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_WindowControlAgent. ! 
	BrazilMappingForWin32_WindowControlAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_RichEditControlAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' knownControlContents cachedNaturalHeightWidth cachedNaturalHeightForWidth cachedNaturalExtent')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_RichEditControlAgent EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_RichEditControlAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_RichEditControlAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_RichEditControlAgent) comment: 'The abstract superclass of agents that map to Rich Edit controls, such as text views and text displays. Implements the bulk of the machinery that has to do with measuring text extent.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_RichEditControlAgent) methodsFor: 'unclassified'!
	 dwStyle 

^ (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api WS_CHILD | (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api ES_MULTILINE | (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api ES_WANTRETURN.



! 
 processEN_CHANGE 

|  controlText |

 controlText := self getWindowTextIfNone:[ 

^0.

].

( controlText size ~= self  knownControlContents size or:[ 

 controlText ~= self  knownControlContents.

]) ifTrue:[ 

 self  knownControlContents: controlText.

 self visual acceptTextFromAgent: controlText.

].

^0.



! 
 clearEventMaskBits: bitsToClear 

|  eventMask |

 eventMask := self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EM_GETEVENTMASK wParam:0 lParam:0.

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EM_SETEVENTMASK wParam:0 lParam:( eventMask bitClear: bitsToClear).

^ self.



! 
 processEN_MSGFILTER: lparam 

^0.



! 
 createOwnArtifacts 

 (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  windowsSession ensureRichEdit20Loaded.

super  createOwnArtifacts.

 self  setEventMaskBits:( (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api ENM_CHANGE | (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api ENM_KEYEVENTS).

 self flag:#'BOGUS'.

 self  setTabStops:((1 to:32) collect:[ : i | 

 i *360.

]).

^ self.



! 
 BrazilMappingForWin32_RichEditControlAgent_superInit_forVisual: visual 

super  forVisual: visual.

^ self.



! 
 dwExStyle 

^ (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api WS_EX_CLIENTEDGE.



! 
 withSelectionIndicesDo: block 

|  min  max |

 (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api CHARRANGE newC freeAfter:[ : rangeBuffer | 

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EM_EXGETSEL wParam:0 lParam: rangeBuffer address.

 min := rangeBuffer cpMin.

 max := rangeBuffer cpMax.

].

^ block  value: min +1 value: max.



! 
 selectProperFontInto: hdc 

|  hfont |

 hfont := (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  windowsSession fontMapper handleForFont: self visual font.

 (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api SelectObject  value: hdc value: hfont.

^ self.



! 
 ignoreEN_CHANGEWhile: action 

 self  clearEventMaskBits: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api ENM_CHANGE.

^ action ensure:[ 

 self  setEventMaskBits: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api ENM_CHANGE.

].



! 
 currentLineRange 

|  start  stop |

 start := self  currentLineCharacterStart +1.

 stop := start + self  currentLineLength.

^( self Array new:2)  at:1 put: start; 

  at:2 put: stop; 

 yourself.



! 
knownControlContents ^knownControlContents! 
 currentLineCharacterStart 

^ self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EM_LINEINDEX wParam: self  currentLineIndex lParam:0.



! 
 selectAll 

^ self   selectFrom:1 to: self visual text size.



! 
knownControlContents: knownControlContents_val knownControlContents := knownControlContents_val! 
 currentLineIndex 

^ self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EM_LINEFROMCHAR wParam:-1 lParam:0.



! 
 BrazilMappingForWin32_RichEditControlAgent_1_init: visual 

 self cachedNaturalExtent:nil.

 self cachedNaturalHeightWidth:nil.

 self cachedNaturalHeightForWidth:nil.

 self knownControlContents:#''.

^ self.



! 
  computeNaturalHeightForWidth: width orIfUnmapped: aBlock 

^( (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  windowsSession textMeasurer  measureText: self visual text heightForWidth: width) +10.



! 
 controlClassName 

^'RICHEDIT20A'.



! 
 measureWidth 

^ self  getDCWhile:[ : hdc | 

 self  measureWidthUsing: hdc.

] ifNotMapped:[ 

0 @0.

].



! 
 flushLayoutCaches 

 self  cachedNaturalExtent:nil.

 self  cachedNaturalHeightWidth:nil.

^ self.



! 
 setStandardTabStops 

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EM_SETPARAFORMAT wParam:0 lParam:( (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  UnsafeAlien forPointerTo: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  windowsSession paraformatWithStandardTabStops).

^ self.



! 
 selectionRange 

^ self  withSelectionIndicesDo:[ : min : max | 

( self Array new:2)  at:1 put: min; 

  at:2 put: max; 

 yourself.

].



! 
  selectFrom: startIndex to: endIndex 

 (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api CHARRANGE newC freeAfter:[ : rangeBuffer | 

 rangeBuffer cpMin:( startIndex - 1); 

 cpMax: endIndex.

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EM_EXSETSEL wParam:0 lParam: rangeBuffer address.

].

^ self.



! 
 reemphasizeText: text 

 text isText ifTrue:[ 

 self  setTextAttributesFrom: text.

].

^ self.



! 
 naturalHeightForWidth: width 

^ self  cachedNaturalHeightWidth = width  ifTrue:[ 

 self  cachedNaturalHeightForWidth.

] ifFalse:[ 

|  height |

 height := self   computeNaturalHeightForWidth: width orIfUnmapped:[ 

^25.

].

 self  cachedNaturalHeightWidth: width.

 self  cachedNaturalHeightForWidth: height.

 self  cachedNaturalHeightForWidth.

].



! 
 naturalExtent 

^ self  cachedNaturalExtent ifNil:[ 

 self  cachedNaturalExtent:( self  computeNaturalExtentOrIfUnmapped:[ 

^100 @25.

]).

 self  cachedNaturalExtent.

].



! 
 connectOwnArtifacts 

 self  map: self visual textA to:[ : text | 

 self  setControlText: text.

].

super  connectOwnArtifacts.

^ self.



! 
cachedNaturalHeightForWidth: cachedNaturalHeightForWidth_val cachedNaturalHeightForWidth := cachedNaturalHeightForWidth_val! 
cachedNaturalHeightWidth ^cachedNaturalHeightWidth! 
 setTabStops: tabStops 

|  paraformat |

 tabStops size >32 ifTrue:[ 

 self error:'too many tabstops'.

].

 paraformat := (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api PARAFORMAT newC.

 paraformat dwMask: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api PFM_TABSTOPS; 

 cTabCount: tabStops size.

 tabStops keysAndValuesDo:[ : index : each | 

 paraformat  rgxTabsAt: index put: each.

].

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EM_SETPARAFORMAT wParam:0 lParam: paraformat address.

 paraformat free.

^ self.



! 
 processCommand: code 

 code = (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EN_CHANGE ifTrue:[ 

^ self  processEN_CHANGE.

].

^0.



! 
 forVisual: visual 

 self BrazilMappingForWin32_RichEditControlAgent_superInit_forVisual: visual.

 self BrazilMappingForWin32_RichEditControlAgent_1_init: visual.

^ self.



! 
 currentLineLength 

^ self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EM_LINELENGTH wParam: self  currentLineCharacterStart lParam:0.



! 
 selectedText 

^ self  withSelectionIndicesDo:[ : min : max | 

 self visual text  copyFrom: min to:( self visual text size min: max).

].



! 
cachedNaturalHeightWidth: cachedNaturalHeightWidth_val cachedNaturalHeightWidth := cachedNaturalHeightWidth_val! 
cachedNaturalHeightForWidth ^cachedNaturalHeightForWidth! 
cachedNaturalExtent ^cachedNaturalExtent! 
 computeNaturalExtentOrIfUnmapped: aBlock 

|  originalWidth  presumedWidth  answer |

 self flag:#'BOGUS'.

 self handle isNil ifTrue:[ 

^ aBlock value.

].

 originalWidth := self currentBounds width.

 self flag:#'BOGUS'.

 presumedWidth := self  measureWidth +18.

 answer := (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  windowsSession textMeasurer  measureText: self visual text heightForWidth: presumedWidth.

^ presumedWidth @ answer +10.



! 
  processNotification: code data: lparam 

 code = (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EN_MSGFILTER ifTrue:[ 

^ self  processEN_MSGFILTER: lparam.

].

^0.



! 
cachedNaturalExtent: cachedNaturalExtent_val cachedNaturalExtent := cachedNaturalExtent_val! 
 hasUnacceptedEdits 

^true.



! 
 setEventMaskBits: newBits 

|  eventMask |

 eventMask := self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EM_GETEVENTMASK wParam:0 lParam:0.

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api EM_SETEVENTMASK wParam:0 lParam: eventMask | newBits.

^ self.



! 
 measureWidthUsing: hdc 

|  text  result |

 text := self visual text asString.

 self  selectProperFontInto: hdc.

 (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api POINT newC freeAfter:[ : sizeBuffer | 

 result := (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api GetTextExtentPoint32  unsignedValue: hdc value:( (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  UnsafeAlien forPointerTo: text) value: text size value: sizeBuffer address.

 result =0 ifTrue:[ 

^ (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api reportError:'GetTextExtentPoint32() failed'.

].

 result := sizeBuffer asPoint.

].

^ result x.



! 
 setControlText: text 

 self  flushLayoutCaches.

 self  knownControlContents: text asString.

( (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  Alien newCString: self  knownControlContents) freeAfter:[ : buffer | 

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  api WM_SETTEXT wParam:0 lParam: buffer address.

].

 text isText ifTrue:[ 

 self  setTextAttributesFrom: text.

].

 self visual reportNaturalExtentChange.

^ self.



! 
 setTextAttributesFrom: text 

 self  ignoreEN_CHANGEWhile:[ 

 (EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent at: 1)  TextDecorator  decorateControlWithHandle: self handle accordingTo: text.

].

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_RichEditControlAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_RichEditControlAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_RichEditControlAgent := mmd !
	 forVisual: visual 

^ self basicNew forVisual: visual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_RichEditControlAgent. ! 
	BrazilMappingForWin32_RichEditControlAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_TextViewAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_TextViewAgent EnclosingObjects_BrazilMappingForWin32_TextViewAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_TextViewAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_TextViewAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_TextViewAgent) comment: 'Responsible for materializing TextViews as native Windows RichEdit controls.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_TextViewAgent) methodsFor: 'unclassified'!
	 dwStyle 

^super  dwStyle |( self visual suppressScrollbars  ifTrue:[ 

0.

] ifFalse:[ 

 (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api WS_VSCROLL.

]).



! 
 processAcceptKeyThrough: msgfilter 

 self visual acceptKeyResponse isNil  ifTrue:[ 

 self  textMayHaveChanged.

] ifFalse:[ 

 self visual acceptKeyResponse reentrant value:[ 

nil.

].

^1.

].

^0.



! 
 textMayHaveChanged 

|  controlText |

 controlText := self getWindowTextIfNone:[ 

^ self.

].

( controlText size ~= self knownControlContents size or:[ 

 controlText ~= self knownControlContents.

]) ifTrue:[ 

 self knownControlContents: controlText.

 self visual acceptTextFromAgent: controlText.

].

^ self.



! 
 scrollToEnd 

 (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api SCROLLINFO newC freeAfter:[ : scrolllinfo | 

 scrolllinfo fMask: (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api SIF_ALL.

 (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api GetScrollInfo  value: self handle value: (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api SB_VERT value: scrolllinfo address.

 (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api POINT newC freeAfter:[ : point | 

 point x:0; 

 y:( scrolllinfo nMax -  self visual bounds height +5).

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api EM_SETSCROLLPOS wParam:0 lParam: point address.

].

].

^ self.



! 
 selectLine 

|  start |

 start := self currentLineCharacterStart +1.

 self  selectFrom: start to: start + self currentLineLength.

^ self.



! 
 processEN_MSGFILTER: lparam 

|  msgfilter  charCode |

 msgfilter := (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api MSGFILTER atAddress: lparam address.

 charCode := msgfilter wParam.

 charCode =13 ifTrue:[ 

^ self  processEnterKeyThrough: msgfilter.

].

 charCode =27 ifTrue:[ 

^ self  processEscapeKeyThrough: msgfilter.

].

 charCode =19 ifTrue:[ 

^ self  processAcceptKeyThrough: msgfilter.

].

 msgfilter msg = (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api WM_CHAR ifTrue:[ 

 self  textMayHaveChanged.

 self  textExtentMayHaveChanged.

].

^0.



! 
 processEscapeKeyThrough: msgfilter 

 self visual escapeKeyResponse isNil  ifTrue:[ 

 msgfilter msg = (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api WM_CHAR ifTrue:[ 

 self  textMayHaveChanged.

].

] ifFalse:[ 

 msgfilter msg = (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api WM_KEYDOWN ifTrue:[ 

 self visual escapeKeyResponse reentrant value:[ 

nil.

].

].

^1.

].

^0.



! 
 BrazilMappingForWin32_TextViewAgent_1_init: visual 

^ self.



! 
 BrazilMappingForWin32_TextViewAgent_superInit_forVisual: visual 

super  forVisual: visual.

^ self.



! 
 processEnterKeyThrough: msgfilter 

 self visual enterKeyResponse isNil  ifTrue:[ 

 msgfilter msg = (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api WM_CHAR ifTrue:[ 

 self  textMayHaveChanged.

].

] ifFalse:[ 

 msgfilter msg = (EnclosingObjects_BrazilMappingForWin32_TextViewAgent at: 1)  api WM_KEYDOWN ifTrue:[ 

 self visual enterKeyResponse reentrant value:[ 

nil.

].

].

^1.

].

^0.



! 
 textExtentMayHaveChanged 

 self visual reportNaturalExtentChange.

^ self.



! 
 selectionInterval 

|  range |

 range := self selectionRange.

^ range first to: range second.



! 
 forVisual: visual 

 self BrazilMappingForWin32_TextViewAgent_superInit_forVisual: visual.

 self BrazilMappingForWin32_TextViewAgent_1_init: visual.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_TextViewAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_TextViewAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_TextViewAgent := mmd !
	 forVisual: visual 

^ self basicNew forVisual: visual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_TextViewAgent. ! 
	BrazilMappingForWin32_TextViewAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_NullColoredAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_NullColoredAgent EnclosingObjects_BrazilMappingForWin32_NullColoredAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_NullColoredAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_NullColoredAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_NullColoredAgent) comment: 'Maps container visuals that have a colored background.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_NullColoredAgent) methodsFor: 'unclassified'!
	  paintGradient: rectToPaint on: hdc translatedBy: parentOrigin 

 self  fillRectangle:( self visual bounds translateBy: parentOrigin) on: hdc withGradient: self visual color.

^ self.



! 
 needsPaintingRect: parentRelativeRect 

^ self  needsPainting and:[ 

 self visual bounds intersects: parentRelativeRect.

].



! 
 needsPainting 

^ self visual visible and:[ 

 self visual color notNil and:[ 

 self visual color asColor isTransparent not.

].

].



! 
 connectOwnArtifacts 

super  connectOwnArtifacts.

 self  map: self visual colorA to:[ : ignoredNewColor | 

 self invalidate.

].

^ self.



! 
 BrazilMappingForWin32_NullColoredAgent_superInit_forVisual: v 

super  forVisual: v.

^ self.



! 
 BrazilMappingForWin32_NullColoredAgent_1_init: v 

^ self.



! 
 isColor: color 

^ color asColor == color.



! 
  contributeToWM_PAINTOn: hdc inside: parentRelativeUpdateRect translatedBy: parentOrigin 

( self  needsPaintingRect: parentRelativeUpdateRect) ifTrue:[ 

|  rectToPaint |

 rectToPaint := self visual bounds intersect: parentRelativeUpdateRect.

( self  isColor: self visual color)  ifTrue:[ 

 self   paintSolid: rectToPaint on: hdc translatedBy: parentOrigin.

] ifFalse:[ 

 self   paintGradient: rectToPaint on: hdc translatedBy: parentOrigin.

].

].

super   contributeToWM_PAINTOn: hdc inside: parentRelativeUpdateRect translatedBy: parentOrigin.

^ self.



! 
  paintSolid: rectToPaint on: hdc translatedBy: parentOrigin 

 self  fillRectangle:( rectToPaint translateBy: parentOrigin) on: hdc withSolidColor: self visual color.

^ self.



! 
 forVisual: v 

 self BrazilMappingForWin32_NullColoredAgent_superInit_forVisual: v.

 self BrazilMappingForWin32_NullColoredAgent_1_init: v.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_NullColoredAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_NullColoredAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_NullColoredAgent := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_NullColoredAgent. ! 
	BrazilMappingForWin32_NullColoredAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_BogusAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_BogusAgent EnclosingObjects_BrazilMappingForWin32_BogusAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_BogusAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_BogusAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_BogusAgent) comment: 'An agent we use in cases when there is no real agent yet that we could use.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_BogusAgent) methodsFor: 'unclassified'!
	 matchScrollbarRange 

 self flag:#'BOGUS'.

^ self.



! 
 scrollbarHeight 

 self flag:#'BOGUS'.

^15.



! 
 naturalHeightForWidth: ignored 

^20.



! 
 naturalExtent 

^100 @20.



! 
 BrazilMappingForWin32_BogusAgent_superInit_forVisual: v 

super  forVisual: v.

^ self.



! 
 BrazilMappingForWin32_BogusAgent_1_init: v 

^ self.



! 
 forVisual: v 

 self BrazilMappingForWin32_BogusAgent_superInit_forVisual: v.

 self BrazilMappingForWin32_BogusAgent_1_init: v.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_BogusAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_BogusAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_BogusAgent := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_BogusAgent. ! 
	BrazilMappingForWin32_BogusAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_VerticalViewportAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_VerticalViewportAgent EnclosingObjects_BrazilMappingForWin32_VerticalViewportAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_VerticalViewportAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_VerticalViewportAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_VerticalViewportAgent) comment: 'Maps Brazil VerticalViewports. The difference between this and the superclass is in how the extent of the content is computed: because VerticalViewports squeeze the contents, their agents should size their inner windows according to the natural height of the content.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_VerticalViewportAgent) methodsFor: 'unclassified'!
	 BrazilMappingForWin32_VerticalViewportAgent_1_init: aVisual 

^ self.



! 
 setInnerWindowBounds 

|  availableWidth  requiredHeight  newBounds |

 availableWidth := self visual innerExtent x.

 requiredHeight := self visual naturalHeightForWidth: availableWidth.

 newBounds := self visual scrollPosition negated extent:( availableWidth @ requiredHeight).

 self innerAgent setWindowBounds: newBounds.

 newBounds bottom < self visual innerExtent y ifTrue:[ 

 self outerAgent invalidateRectangle:(0 @ newBounds bottom corner: self visual innerBounds corner).

].

^ self.



! 
 BrazilMappingForWin32_VerticalViewportAgent_superInit_forVisual: aVisual 

super  forVisual: aVisual.

^ self.



! 
 forVisual: aVisual 

 self BrazilMappingForWin32_VerticalViewportAgent_superInit_forVisual: aVisual.

 self BrazilMappingForWin32_VerticalViewportAgent_1_init: aVisual.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_VerticalViewportAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_VerticalViewportAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_VerticalViewportAgent := mmd !
	 forVisual: aVisual 

^ self basicNew forVisual: aVisual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_VerticalViewportAgent. ! 
	BrazilMappingForWin32_VerticalViewportAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_ImageAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ImageAgent EnclosingObjects_BrazilMappingForWin32_ImageAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_ImageAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ImageAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ImageAgent) comment: 'Handles the Icon visual.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ImageAgent) methodsFor: 'unclassified'!
	 visualImage 

^ self visual image.



! 
 connectOwnArtifacts 

super  connectOwnArtifacts.

 self  map: self visual imageA to:[ : newImage | 

 self invalidate.

].

^ self.



! 
  paintUsing: graphics inside: windowRelativeBounds 

|  squeakImage  extent  bitmap  result |

 squeakImage := self  visualImage.

 squeakImage isNil ifTrue:[ 

^ self.

].

 extent := squeakImage extent.

 bitmap := (EnclosingObjects_BrazilMappingForWin32_ImageAgent at: 1)  windowsSession imageMapper  map: squeakImage forGraphics: graphics.

 result := graphics  drawImage: bitmap at: windowRelativeBounds center - ( extent //2).

 result =0 ifFalse:[ 

'DrawImage() failed'.

].

^ self.



! 
  contributeToWM_PAINTOn: hdc inside: parentRelativeUpdateRect translatedBy: parentOrigin 

|  windowRelativeBounds |

( self visual visible and:[ 

 self visual bounds intersects: parentRelativeUpdateRect.

]) ifTrue:[ 

 windowRelativeBounds := self visual bounds translateBy: parentOrigin.

 self   paintOn: hdc inside: windowRelativeBounds.

].

^ self.



! 
 destroyOwnArtifacts 

super  destroyOwnArtifacts.

 self invalidate.

^ self.



! 
 BrazilMappingForWin32_ImageAgent_1_init: visual 

^ self.



! 
 forVisual: visual 

 self BrazilMappingForWin32_ImageAgent_superInit_forVisual: visual.

 self BrazilMappingForWin32_ImageAgent_1_init: visual.

^ self.



! 
  paintOn: hdc inside: windowRelativeBounds 

|  graphics |

 graphics := (EnclosingObjects_BrazilMappingForWin32_ImageAgent at: 1)  windowsSession gdiPlus Graphics fromHDC: hdc.

[ 

 self   paintUsing: graphics inside: windowRelativeBounds.

] ensure:[ 

 graphics release.

].

^ self.



! 
 BrazilMappingForWin32_ImageAgent_superInit_forVisual: visual 

super  forVisual: visual.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ImageAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ImageAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ImageAgent := mmd !
	 forVisual: visual 

^ self basicNew forVisual: visual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_ImageAgent. ! 
	BrazilMappingForWin32_ImageAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_Agent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' areBoundsChanging api_ agentFactory_')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_Agent EnclosingObjects_BrazilMappingForWin32_Agent')!
	(Delta mirrorFor: #BrazilMappingForWin32_Agent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_Agent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_Agent) comment: 'This is the common superclass of all Agents used for mapping Brazil visuals to Windows artifacts.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_Agent) methodsFor: 'unclassified'!
	 areBoundsHereOrInAncestorsChanging 

^ self  areBoundsChanging or:[ 

 self parent  ifNil:[ 

false.

] ifNotNil:[ : it | 

 it areBoundsHereOrInAncestorsChanging.

].

].



! 
 rectangleRelativeToHostWindow: rect 

^ self parent  ifNil:[ 

 rect.

] ifNotNil:[ : it | 

 it rectangleRelativeToHostWindow:( rect translateBy: self visual origin).

].



! 
 grabMouse 

 self  hostWindowAgent setMouseGrabTo: self.

^ self.



! 
 processMouseEntry 

^ self.



! 
api_ ^api_! 
 mousePoint 

^ self visual desktop  ifNil:[ 

0 @0.

] ifNotNil:[ : it | 

 it mousePoint  translateFrom: it to: self visual.

].



! 
agentFactory_: agentFactory__val agentFactory_ := agentFactory__val! 
 releaseMouse 

 self  hostWindowAgent releaseMouseGrabFrom: self.

^ self.



! 
areBoundsChanging ^areBoundsChanging! 
 invalidate 

 self parent ifNotNil:[ : it | 

 it invalidateRectangle: self visual bounds.

].

^ self.



! 
areBoundsChanging: areBoundsChanging_val areBoundsChanging := areBoundsChanging_val! 
  fillRectangle: rect on: hdc withGradient: gradient 

|  topColor  bottomColor  sizeofTrivertex  vertices  gradientRect |

 topColor := gradient startColor.

 bottomColor := gradient endColor.

 sizeofTrivertex := self  api TRIVERTEX dataSize.

 vertices := (EnclosingObjects_BrazilMappingForWin32_Agent at: 1)  Alien newC:( sizeofTrivertex *2).

( self  api TRIVERTEX atAddress: vertices address) x: rect left; 

 y: rect top; 

 red:( topColor red *65535) asInteger; 

 green:( topColor green *65535) asInteger; 

 blue:( topColor blue *65535) asInteger.

( self  api TRIVERTEX atAddress:( vertices address + sizeofTrivertex)) x: rect right; 

 y: rect bottom; 

 red:( bottomColor red *65535) asInteger; 

 green:( bottomColor green *65535) asInteger; 

 blue:( bottomColor blue *65535) asInteger.

 gradientRect := self  api GRADIENT_RECT newC.

 gradientRect UpperLeft:0; 

 LowerRight:1.

 self  api GradientFill  value: hdc value: vertices address value:2 value: gradientRect address value:1 value: self  api GRADIENT_FILL_RECT_V.

 gradientRect free.

 vertices free.

^ self.



! 
 collectControlsByHandleInto: aDictionary 

 self childrenDo:[ : each | 

 each collectControlsByHandleInto: aDictionary.

].

^ self.



! 
 invalidateWindow 

 self  windowHandle ifNotNil:[ : hwnd | 

 self  api InvalidateRect  value: hwnd value:0 value:0.

].

^ self.



! 
agentFactory_ ^agentFactory_! 
 hostWindowAgent 

^ self parent ifNotNil:[ : it | 

 it hostWindowAgent.

].



! 
 noteBeginningOfBoundsChangeAndProvideEndContinuation 

 self  areBoundsChanging:true.

^[ 

 self  areBoundsChanging:false.

].



! 
 areBoundsInAncestorsChanging 

^ self parent  ifNil:[ 

false.

] ifNotNil:[ : it | 

 it areBoundsHereOrInAncestorsChanging.

].



! 
 BrazilMappingForWin32_Agent_1_init: visual 

 self api_:nil.

 self agentFactory_:nil.

 self areBoundsChanging:false.

^ self.



! 
 isLeftButtonDown 

^( self  api GetKeyState unsignedValue: self  api VK_LBUTTON) >1.



! 
 ensureUpToDateAppearance 

 self  handle ifNotNil:[ : it | 

 self  api UpdateWindow value: it.

].

^ self.



! 
 windowHandle 

^ self visual window ifNotNil:[ : it | 

 it agent ifNotNil:[ : wagent | 

 wagent handle.

].

].



! 
api_: api__val api_ := api__val! 
 processMouseDownLeft 

^ self.



! 
 matchVisualsBounds 

^ self.



! 
 windowsSession 

^ (EnclosingObjects_BrazilMappingForWin32_Agent at: 1)  windowsSession.



! 
 invalidateRectangle: rectangle 

 self parent ifNotNil:[ : it | 

 it invalidateRectangle:( rectangle translateBy: self visual origin).

].

^ self.



! 
 BrazilMappingForWin32_Agent_superInit_forVisual: visual 

super  forVisual: visual.

^ self.



! 
 forVisual: visual 

 self BrazilMappingForWin32_Agent_superInit_forVisual: visual.

 self BrazilMappingForWin32_Agent_1_init: visual.

^ self.



! 
 findConsumerForMouseEventAt: parentRelativePoint 

^nil.



! 
 agentFactory 

^ self  agentFactory_ ifNil:[ 

 self  agentFactory_: (EnclosingObjects_BrazilMappingForWin32_Agent at: 1)  agentFactory.

 self  agentFactory_.

].



! 
 handle 

 self subclassResponsibility.

^ self.



! 
  fillRectangle: rect on: hdc withSolidColor: color 

|  oldBrush  oldPen |

 oldBrush := self  api SelectObject  unsignedValue: hdc value:( self  api GetStockObject unsignedValue: self  api DC_BRUSH).

 oldPen := self  api SelectObject  unsignedValue: hdc value:( self  api GetStockObject unsignedValue:8).

 self  api SetDCBrushColor  unsignedValue: hdc value: color asColorref.

 self  api Rectangle  value: hdc value: rect left value: rect top value: rect right +1 value: rect bottom +1.

 self  api SelectObject  value: hdc value: oldBrush.

 self  api SelectObject  value: hdc value: oldPen.

^ self.



! 
  contributeToWM_PAINTOn: hdc inside: parentRelativeUpdateRect translatedBy: parentOrigin 

|  translatedUpdateRect  myOrigin |

 translatedUpdateRect := parentRelativeUpdateRect translateBy: self visual origin negated.

 myOrigin := parentOrigin + self visual origin.

 self childrenDo:[ : each | 

 each  contributeToWM_PAINTOn: hdc inside: translatedUpdateRect translatedBy: myOrigin.

].

^ self.



! 
 processMouseExit 

^ self.



! 
 api 

^ self  api_ ifNil:[ 

 self  api_: (EnclosingObjects_BrazilMappingForWin32_Agent at: 1)  api.

 self  api_.

].



! 
 processMouseMove 

^ self.



! 
 processMouseUpLeft 

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_Agent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_Agent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_Agent := mmd !
	 forVisual: visual 

^ self basicNew forVisual: visual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_Agent. ! 
	BrazilMappingForWin32_Agent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_MenuAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' itemsById menu_ menuHandle')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_MenuAgent EnclosingObjects_BrazilMappingForWin32_MenuAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_MenuAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_MenuAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_MenuAgent) comment: 'Maps a Menu to a Windows pop-up menu.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_MenuAgent) methodsFor: 'unclassified'!
	 openAt: topLeftCorner 

|  selectedItemId |

 self  buildMenuArtifactIfNeeded.

 self  menuHandle =0 ifTrue:[ 

^ self.

].

 selectedItemId := (EnclosingObjects_BrazilMappingForWin32_MenuAgent at: 1)  api TrackPopupMenu unsignedValueWithArguments:(( self Array new:7)  at:1 put: self  menuHandle; 

  at:2 put: (EnclosingObjects_BrazilMappingForWin32_MenuAgent at: 1)  api TPM_RETURNCMD | (EnclosingObjects_BrazilMappingForWin32_MenuAgent at: 1)  api TPM_NONOTIFY; 

  at:3 put: topLeftCorner x; 

  at:4 put: topLeftCorner y; 

  at:5 put:0; 

  at:6 put: self  windowHandle; 

  at:7 put:0; 

 yourself).

 selectedItemId =0 ifFalse:[ 

 self   captureModifierKeyState: self  createCurrentModifierKeyState while:[ 

( self  itemsById at: selectedItemId) action reentrant value.

].

].

^ self.



! 
menuHandle ^menuHandle! 
 windowHandle 

^ self  menu ownerVisual window agent handle.



! 
 menu: menu 

 self BrazilMappingForWin32_MenuAgent_superInit_menu: menu.

 self BrazilMappingForWin32_MenuAgent_1_init: menu.

^ self.



! 
itemsById: itemsById_val itemsById := itemsById_val! 
 menu 

^ self  menu_.



! 
menuHandle: menuHandle_val menuHandle := menuHandle_val! 
menu_: menu__val menu_ := menu__val! 
itemsById ^itemsById! 
 BrazilMappingForWin32_MenuAgent_1_init: menu 

 self menu_: menu.

 self menuHandle:0.

 self itemsById:nil.

^ self.



! 
menu_ ^menu_! 
  captureModifierKeyState: eventInputState while: action 

^ self  menu ownerVisual desktop  ifNotNil:[ : it | 

 it agent  setModifierKeyState: eventInputState while: action.

] ifNil:[ 

 action value.

].



! 
 createCurrentModifierKeyState 

|  getKeyState |

 getKeyState := (EnclosingObjects_BrazilMappingForWin32_MenuAgent at: 1)  api GetKeyState.

^ (EnclosingObjects_BrazilMappingForWin32_MenuAgent at: 1)  ModifierKeyState new shiftPressed:(( getKeyState unsignedValue: (EnclosingObjects_BrazilMappingForWin32_MenuAgent at: 1)  api VK_SHIFT) >1); 

 controlPressed:(( getKeyState unsignedValue: (EnclosingObjects_BrazilMappingForWin32_MenuAgent at: 1)  api VK_CONTROL) >1); 

 altPressed:(( getKeyState unsignedValue: (EnclosingObjects_BrazilMappingForWin32_MenuAgent at: 1)  api VK_MENU) >1).



! 
 respondToMenuChange 

 self menuHandle:0.

^ self.



! 
 BrazilMappingForWin32_MenuAgent_superInit_menu: menu 

super  new.

^ self.



! 
 buildMenuArtifactIfNeeded 

|  builder |

 self  menuHandle =0 ifTrue:[ 

 builder := (EnclosingObjects_BrazilMappingForWin32_MenuAgent at: 1)  MenuBuilder new.

 self menuHandle:( builder buildFrom: self  menu_).

 self  itemsById: builder itemsById.

].

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_MenuAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_MenuAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_MenuAgent := mmd !
	 menu: menu 

^ self basicNew menu: menu.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_MenuAgent. ! 
	BrazilMappingForWin32_MenuAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_DesktopAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' modifierKeyStateForCurrentEventX desktop')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_DesktopAgent EnclosingObjects_BrazilMappingForWin32_DesktopAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_DesktopAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_DesktopAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_DesktopAgent) comment: 'This agent maps the desktop of the host platform.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_DesktopAgent) methodsFor: 'unclassified'!
	 areBoundsHereOrInAncestorsChanging 

^false.



! 
 modifierKeyStateForCurrentEvent 

^ self  modifierKeyStateForCurrentEventX ifNil:[ 

 (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  ModifierKeyState new.

].



! 
 updateDraggedImagePosition 

 (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  windowsSession moveDragCueTo: self  mousePoint.

^ self.



! 
 mousePoint 

|  api |

 api := (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  api.

^ api POINT newC freeAfter:[ : point | 

|  result |

 result := api GetCursorPos unsignedValue: point address.

 result =0  ifTrue:[ 

 api reportError:'GetCursorPos() failed'.

0 @0.

] ifFalse:[ 

 point asPoint.

].

].



! 
 noticeChangeInChildAgentStructure 

^ self.



! 
modifierKeyStateForCurrentEventX: modifierKeyStateForCurrentEventX_val modifierKeyStateForCurrentEventX := modifierKeyStateForCurrentEventX_val! 
modifierKeyStateForCurrentEventX ^modifierKeyStateForCurrentEventX! 
 BrazilMappingForWin32_DesktopAgent_superInit_new 

super  new.

^ self.



! 
 desktopBounds 

^ (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  windowsSession systemMetrics desktopBounds.



! 
 BrazilMappingForWin32_DesktopAgent_1_init 

 self desktop:nil.

 self modifierKeyStateForCurrentEventX:nil.

^ self.



! 
 ensureUpToDateAppearance 

^ self.



! 
 connectArtifactsOfChild: ignored 

^ self.



! 
 setDraggedImage: image 

 (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  windowsSession  placeDragCue: image at: self  mousePoint.

^ self.



! 
 scheduleUIInstallment: action 

 (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  NsFFISessionManager soleInstance scheduleDeferredInstallment: action.

^ self.



! 
 new 

 self BrazilMappingForWin32_DesktopAgent_superInit_new.

 self BrazilMappingForWin32_DesktopAgent_1_init.

^ self.



! 
 scheduleUIAction: action 

 (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  NsFFISessionManager soleInstance scheduleDeferredAction: action.

^ self.



! 
desktop ^desktop! 
 mapping 

^ (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  agentFactory.



! 
desktop: desktop_val desktop := desktop_val! 
 isNull 

^false.



! 
  setModifierKeyState: state while: action 

|  oldValue |

 oldValue := self  modifierKeyStateForCurrentEventX.

 self  modifierKeyStateForCurrentEventX: state.

^ action ensure:[ 

 self  modifierKeyStateForCurrentEventX: oldValue.

].



! 
 isMorphic 

^false.



! 
 usableDesktopBounds 

^ (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  windowsSession systemMetrics workArea.



! 
 isWindows 

^true.



! 
 clearDraggedImage 

 (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  windowsSession removeDragCue.

^ self.



! 
 disableUserInputDuring: action 

 (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  windowsSession disableAll.

[ 

^ action value.

] ensure:[ 

 (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  windowsSession enableAll.

].

^ self.



! 
 windowAtPoint: point 

|  pointStruct  hwnd |

 pointStruct := (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  api POINT new initializeFromPoint: point.

 hwnd := (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  api WindowFromPoint unsignedValue: pointStruct.

 hwnd =0 ifTrue:[ 

^nil.

].

 hwnd := (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  api GetAncestor  unsignedValue: hwnd value: (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  api GA_ROOT.

 hwnd =0 ifTrue:[ 

^nil.

].

^ self  desktop windows  detect:[ : some | 

 some agent handle = hwnd.

] ifNone:[ 

nil.

].



! 
 systemIsIdle 

|  now |

 now := (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  Time millisecondClockValue.

^ now -  (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  windowsSession lastActivity >300000 and:[ 

 now -  (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  WorldState currentEvent timeStamp >300000.

].



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_DesktopAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_DesktopAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_DesktopAgent := mmd !
	 desktop: desktop 

^ (EnclosingObjects_BrazilMappingForWin32_DesktopAgent at: 1)  DesktopAgent new desktop: desktop.



! 
		 new 

^ self basicNew new.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_DesktopAgent. ! 
	BrazilMappingForWin32_DesktopAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_WindowAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' messageDispatchTable inputManager paintstruct lockVisualBoundsMatching')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_WindowAgent EnclosingObjects_BrazilMappingForWin32_WindowAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowAgent) comment: 'This agent takes care of mapping a Brazil Window visual to a Windows artifact. It is also a very important player in Windows mapping scheme in general, as it dispatches WM_COMMAND notifications to their appropriate controls, coordinates painting of soft widgets and delivers mouse events to them.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowAgent) methodsFor: 'unclassified'!
	 populateDispatchTable 

 self   register:(( self Array new:2)  at:1 put: self; 

  at:2 put:#'processWM_CREATE:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_CREATE.

 self   register:(( self Array new:2)  at:1 put: self; 

  at:2 put:#'processWM_CLOSE:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_CLOSE.

 self   register:(( self Array new:2)  at:1 put: self; 

  at:2 put:#'processWM_DESTROY:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_DESTROY.

 self   register:(( self Array new:2)  at:1 put: self; 

  at:2 put:#'processWM_NCDESTROY:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_NCDESTROY.

 self   register:(( self Array new:2)  at:1 put: self; 

  at:2 put:#'processWM_ERASEBKGND:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_ERASEBKGND.

 self   register:(( self Array new:2)  at:1 put: self; 

  at:2 put:( (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  useDoubleBuffering  ifTrue:[ 

#'processWM_PAINTDoubleBuffered:'.

] ifFalse:[ 

#'processWM_PAINTUnbuffered:'.

]); 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_PAINT.

 self   register:(( self Array new:2)  at:1 put: self; 

  at:2 put:#'processWM_WINDOWPOSCHANGED:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_WINDOWPOSCHANGED.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_COMMAND:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_SYSCOMMAND.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_COMMAND:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_COMMAND.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_NOTIFY:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_NOTIFY.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_LBUTTONDOWN:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_LBUTTONDOWN.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_LBUTTONUP:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_LBUTTONUP.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_MOUSELEAVE:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_MOUSELEAVE.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_MOUSEMOVE:'; 

 yourself) asHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_MOUSEMOVE.

^ self.



! 
 dwStyle 

^ (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WS_OVERLAPPEDWINDOW | (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WS_CLIPCHILDREN.



! 
 rectangleRelativeToHostWindow: rect 

^ rect.



! 
paintstruct ^paintstruct! 
 setMouseGrabTo: agent 

 self  inputManager setMouseGrabTo: agent.

^ self.



! 
  modalOpenWhileFalse: doneValueProvider afterOpening: setupBlock 

 self  disableAllOther.

 setupBlock value.

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  NsFFISessionManager soleInstance drainEventsWhileFalse:[ 

 doneValueProvider value or:[ 

 self visual agent isNil.

].

].

 self visual close.

^ self.



! 
 setMenuBarMenu: newMenu 

|  menuHandle  builder |

 newMenu isNil  ifTrue:[ 

 menuHandle :=0.

 self  inputManager menuItemsById: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  Dictionary new.

] ifFalse:[ 

 builder := (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  MenuBuilder new.

 menuHandle := builder buildMenuBarFrom: newMenu.

 self  inputManager menuItemsById: builder itemsById.

].

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api SetMenu  unsignedValue: self handle value: menuHandle.

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api DrawMenuBar unsignedValue: self handle.

^ self.



! 
 initialWindowBounds 

^ self  innerToOuter: self visual bounds.



! 
 noticeChangeInChildAgentStructure 

super  noticeChangeInChildAgentStructure.

 self  inputManager updateControlsByHandle.

^ self.



! 
 dwExStyle 

^0.



! 
  register: receiverSelectorTuple asHandlerFor: messageCode 

 self  messageDispatchTable  at: messageCode put: receiverSelectorTuple.

^ self.



! 
 modalOpenWhileFalse: doneValueProvider 

^ self   modalOpenWhileFalse: doneValueProvider afterOpening:[ 

nil.

].



! 
 invalidate 

^ self invalidateWindow.



! 
 isOpen 

 self ifHandleValid:[ 

^true.

].

^false.



! 
 xprocessWM_PAINTUnbuffered: args 

^ self.



! 
  unregisterHandlerFor: messageName while: action 

|  code  handler |

 code := (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api perform: messageName.

 handler := self  messageDispatchTable at: code.

 self  messageDispatchTable removeKey: code.

^ action ensure:[ 

 self  messageDispatchTable  at: code put: handler.

].



! 
 createOwnArtifacts 

 self  windowClass createWindowForAgent: self.

 self handle isNil ifTrue:[ 

 self error:'no WM_NCCREATE received for the new window'.

].

^ self.



! 
 processWM_PAINTUnbuffered: args 

|  hdc |

 hdc := (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api BeginPaint  unsignedValue: self handle value: self  paintstruct address.

 self   paintBackgroundIn: self  paintstruct paintRectangle on: hdc.

 self visual content agent  contributeToWM_PAINTOn: hdc inside: self  paintstruct paintRectangle translatedBy:0 @0.

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api EndPaint  value: self handle value: self  paintstruct address.

^0.



! 
 disableAllOther 

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  windowsSession disableAll.

 self handle ifNotNil:[ : hwnd | 

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api EnableWindow  boolValue: hwnd value:1.

].

^ self.



! 
 xprocessWM_PAINTDoubleBuffered: args 

^ self.



! 
  paintBackgroundIn: rectangle using: graphics 

|  gdip |

 gdip := (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  windowsSession gdiPlus.

 graphics clear:( gdip Color  a:255 r:236 g:233 b:216).

^ self.



! 
 invokeDefWindowProc: args 

^ (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api DefWindowProc  unsignedValue: args hwnd value: args message value: args wParam value: args lParam.



! 
 BrazilMappingForWin32_WindowAgent_1_init: visual 

 self inputManager:( (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  WindowContentManager forAgent: self).

 self lockVisualBoundsMatching:false.

 self messageDispatchTable: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  Dictionary new.

 self paintstruct:nil.

^ self.



! 
 hostWindowAgent 

^ self.



! 
 close 

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  windowsSession enableAll.

 self destroy.

 self visual mappedWindowClosed.

^ self.



! 
 releaseMouseGrabFrom: agent 

 self  inputManager releaseMouseGrabFrom: agent.

^ self.



! 
 createArtifactsForSubtree 

super  createArtifactsForSubtree.

 self  inputManager updateControlsByHandle.

^ self.



! 
 processWM_DESTROY: args 

 self visual mappedWindowClosed.

^0.



! 
 connectOwnArtifacts 

super  connectOwnArtifacts.

 self  map: self visual titleA to: self ~#'matchVisualsTitle:'.

 self  map: self visual visibleA to: self ~#'matchVisualsVisibility:'.

 self  map: self visual menuBarMenuA to: self ~#'setMenuBarMenu:'.

^ self.



! 
messageDispatchTable: messageDispatchTable_val messageDispatchTable := messageDispatchTable_val! 
 matchVisualsVisibility: shouldBeVisible 

 self handle ifNotNil:[ 

 shouldBeVisible  ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api ShowWindow  value: self handle value: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api SW_SHOW.

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api UpdateWindow value: self handle.

] ifFalse:[ 

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api ShowWindow  value: self handle value: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api SW_HIDE.

].

].

^ self.



! 
 processWindowsMessage: args 

|  message  handler |

 message := args message.

 handler := self  messageDispatchTable  at: message ifAbsent:[ 

^ self  invokeDefWindowProc: args.

].

^( handler at:1)  perform:( handler at:2) with: args.



! 
 innerToOuter: rect 

^ self  withOriginAndCornerCorrectionsDo:[ : oc : cc | 

 rect origin + oc corner:( rect corner + cc).

].



! 
 matchVisualsBounds 

|  outerBounds |

( self  lockVisualBoundsMatching ==true or:[ 

 self handle isNil.

]) ifTrue:[ 

^ self.

].

 outerBounds := self  innerToOuter: self visual bounds.

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api MoveWindow  value: self handle value: outerBounds left asInteger value: outerBounds top asInteger value: outerBounds width asInteger value: outerBounds height asInteger value:1.

^ self.



! 
 title 

^ self visual title.



! 
 processWM_WINDOWPOSCHANGED: args 

|  windowpos |

 windowpos := (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WINDOWPOS atAddress: args lParam.

 self  lockVisualBoundsMatching:true.

[ 

 self visual resizeFromUserTo:( self  outerToInner: windowpos asRectangle).

] ensure:[ 

 self  lockVisualBoundsMatching:false.

].

^0.



! 
 processWM_ERASEBKGND: args 

^1.



! 
 invalidateRectangle: rectangle 

|  expanded |

 rectangle hasPositiveExtent ifFalse:[ 

^ self.

].

 expanded := rectangle origin extent:( rectangle extent +1).

 self handle ifNotNil:[ : hwnd | 

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api RECT newC freeAfter:[ : rect | 

 rect initializeFromRectangle: expanded.

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api InvalidateRect  value: hwnd value: rect address value:0.

].

].

^ self.



! 
paintstruct: paintstruct_val paintstruct := paintstruct_val! 
 processWM_CLOSE: args 

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  NsFFISessionManager soleInstance scheduleDeferredAction:[ 

 self visual hasPermissionToClose ifTrue:[ 

 self  close.

].

].

^0.



! 
 processWM_CREATE: args 

 self  paintstruct: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api PAINTSTRUCT newC.

^0.



! 
 processWM_NCDESTROY: args 

 self  paintstruct ifNotNil:[ 

 self  paintstruct free.

 self  paintstruct:nil.

].

 self  windowClass unregisterWindowForAgent: self.

^0.



! 
 withOriginAndCornerCorrectionsDo: action 

^ (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api RECT newC freeAfter:[ : rect | 

 rect left:100; 

 top:100; 

 right:500; 

 bottom:500.

 (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api AdjustWindowRect  value: rect address value: self  dwStyle value:( self visual menuBarMenu isNil  ifTrue:[ 

0.

] ifFalse:[ 

1.

]).

 action  value: rect left - 100 @( rect top - 100) value: rect right - 500 @( rect bottom - 500).

].



! 
 forVisual: visual 

 self BrazilMappingForWin32_WindowAgent_superInit_forVisual: visual.

 self BrazilMappingForWin32_WindowAgent_1_init: visual.

 self  populateDispatchTable.

^ self.



! 
 BrazilMappingForWin32_WindowAgent_superInit_forVisual: visual 

super  forVisual: visual.

^ self.



! 
 outerToInner: rect 

^ self  withOriginAndCornerCorrectionsDo:[ : oc : cc | 

 rect origin -  oc corner:( rect corner -  cc).

].



! 
inputManager: inputManager_val inputManager := inputManager_val! 
  paintBackgroundIn: rectangle on: hdc 

 self  fillRectangle: rectangle on: hdc withSolidColor:( (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  BlackMarket Graphics Color gray:9/10).

^ self.



! 
 unregisterHandlerFor: messageCode 

 self  messageDispatchTable removeKey: messageCode.

^ self.



! 
messageDispatchTable ^messageDispatchTable! 
 matchVisualsTitle: newTitle 

 self setWindowText: newTitle.

^ self.



! 
lockVisualBoundsMatching: lockVisualBoundsMatching_val lockVisualBoundsMatching := lockVisualBoundsMatching_val! 
inputManager ^inputManager! 
lockVisualBoundsMatching ^lockVisualBoundsMatching! 
 destroyOwnArtifacts 

super  destroyOwnArtifacts.

 self handle ifNotNil:[ 

 self  unregisterHandlerFor: (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api WM_DESTROY.

( (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  api DestroyWindow signedValue: self handle) ~=0 ifTrue:[ 

 self handle:nil.

].

].

^ self.



! 
 parentHandle 

^0.



! 
 processWM_PAINTDoubleBuffered: args 

^ self  processWM_PAINTUnbuffered: args.



! 
 windowClass 

^ (EnclosingObjects_BrazilMappingForWin32_WindowAgent at: 1)  windowsSession standardTopLevelWindowClass.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_WindowAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_WindowAgent := mmd !
	 forVisual: visual 

^ self basicNew forVisual: visual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_WindowAgent. ! 
	BrazilMappingForWin32_WindowAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_ActiveLabelAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ActiveLabelAgent EnclosingObjects_BrazilMappingForWin32_ActiveLabelAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveLabelAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveLabelAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveLabelAgent) comment: 'Represents Brazil ActiveLabels. Largely the same as LabelAgent, but expresses interest in mouse events and forwards them to the visual.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveLabelAgent) methodsFor: 'unclassified'!
	 processMouseEntry 

 self visual respondToMouseEntry.

^ self.



! 
 BrazilMappingForWin32_ActiveLabelAgent_1_init: v 

^ self.



! 
 processMouseDownLeft 

 self visual respondToMouseDownLeft.

^ self.



! 
 BrazilMappingForWin32_ActiveLabelAgent_superInit_forVisual: v 

super  forVisual: v.

^ self.



! 
 forVisual: v 

 self BrazilMappingForWin32_ActiveLabelAgent_superInit_forVisual: v.

 self BrazilMappingForWin32_ActiveLabelAgent_1_init: v.

^ self.



! 
 processMouseUpLeft 

 self visual respondToMouseUpLeft.

^ self.



! 
 processMouseExit 

 self visual respondToMouseExit.

^ self.



! 
 processMouseMove 

 self visual respondToMouseMove.

^ self.



! 
 findConsumerForMouseEventAt: parentRelativePoint 

^( self visual bounds containsPoint: parentRelativePoint)  ifTrue:[ 

 self.

] ifFalse:[ 

nil.

].



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveLabelAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ActiveLabelAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ActiveLabelAgent := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_ActiveLabelAgent. ! 
	BrazilMappingForWin32_ActiveLabelAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_TextDecorator as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' charrange charformat controlHandle originalSelection')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_TextDecorator EnclosingObjects_BrazilMappingForWin32_TextDecorator')!
	(Delta mirrorFor: #BrazilMappingForWin32_TextDecorator) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_TextDecorator) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_TextDecorator) comment: 'Warning: not for general consumption. This is a private class with the API kept at a low level, intended to be used internally by a number of other classes of the mapping.

Sets character formats of a RichEdit control to match a given Text instance. Instances of TextDecorator are normally single-use. The control to work with is specified at the instance creation time. The instance is then sent the #applyEmphasesFrom: message. It is assumed that the content of the control already match the content of the text and only the emphasis needs to be applied.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_TextDecorator) methodsFor: 'unclassified'!
	  sendMessage: id wParam: wParam lParam: lParam 

^ (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api SendMessage  unsignedValue: self  controlHandle value: id value: wParam value: lParam.



! 
  applyEmphases: emphases from: start to: stop 

|  result |

 self   selectFrom: start - 1 to: stop.

 self  translateToCharformat: emphases.

 result := self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api EM_SETCHARFORMAT wParam:1 lParam: self  charformat address.

 result =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api reportError:'EM_SETCHARFORMAT failed'.

].

^ self.



! 
controlHandle ^controlHandle! 
 forControlWithHandle: handle 

 self BrazilMappingForWin32_TextDecorator_superInit_forControlWithHandle: handle.

 self BrazilMappingForWin32_TextDecorator_1_init: handle.

^ self.



! 
originalSelection ^originalSelection! 
charformat: charformat_val charformat := charformat_val! 
charrange ^charrange! 
 setRedraw: state 

 self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api WM_SETREDRAW wParam:( state  ifTrue:[ 

1.

] ifFalse:[ 

0.

]) lParam:0.

^ self.



! 
controlHandle: controlHandle_val controlHandle := controlHandle_val! 
 translateToCharformat: emphases 

 self  charformat dwMask:0; 

 dwEffects:0.

 emphases do:[ : each | 

( each isKindOf: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  BlackMarket Collections TextColor) ifTrue:[ 

 self  charformat setDwMaskBits: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CFM_COLOR; 

 crTextColor: each color asColorref.

].

( each isKindOf: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  BlackMarket Collections TextEmphasis) ifTrue:[ 

 each emphasisCode =1 ifTrue:[ 

 self  charformat setDwMaskBits: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CFM_BOLD; 

 setDwEffectsBits: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CFE_BOLD.

].

 each emphasisCode =2 ifTrue:[ 

 self  charformat setDwMaskBits: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CFM_ITALIC; 

 setDwEffectsBits: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CFE_ITALIC.

].

 each emphasisCode =4 ifTrue:[ 

 self  charformat setDwMaskBits: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CFM_UNDERLINE; 

 setDwEffectsBits: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CFE_UNDERLINE.

].

].

].

^ self.



! 
 applyEmphasesFrom: text 

 (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  Alien autoFreeAfter:[ : free | 

 self  charformat:( free value: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CHARFORMAT2 newC).

 self  charrange:( free value: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CHARRANGE newC).

 self  saveSelectionRange.

 self  setRedraw:false.

 self  clearExistingEmphases.

 text runs withStartStopAndValueDo:[ : start : stop : emphases | 

 self   applyEmphases: emphases from: start to: stop.

].

 self  restoreSelectionRange.

 self  setRedraw:true.

 self  invalidate.

].

^ self.



! 
 saveSelectionRange 

 self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api EM_EXGETSEL wParam:0 lParam: self  charrange address.

 self  originalSelection:(( self Array new:2)  at:1 put: self  charrange cpMin; 

  at:2 put: self  charrange cpMax; 

 yourself).

^ self.



! 
  selectFrom: startIndex to: stopIndex 

|  result |

 self  charrange cpMin: startIndex; 

 cpMax: stopIndex.

 result := self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api EM_EXSETSEL wParam:0 lParam: self  charrange address.

^ self.



! 
 BrazilMappingForWin32_TextDecorator_superInit_forControlWithHandle: handle 

super  new.

^ self.



! 
 clearExistingEmphases 

 self  charformat dwMask:( (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CFM_BOLD | (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CFM_ITALIC | (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CFM_UNDERLINE | (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CFM_COLOR); 

 dwEffects: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api CFE_AUTOCOLOR.

 self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api EM_SETCHARFORMAT wParam:4 lParam: self  charformat address.

^ self.



! 
 BrazilMappingForWin32_TextDecorator_1_init: handle 

 self controlHandle: handle.

 self originalSelection:nil.

 self charformat:nil.

 self charrange:nil.

^ self.



! 
 invalidate 

 (EnclosingObjects_BrazilMappingForWin32_TextDecorator at: 1)  api InvalidateRect  value: self  controlHandle value:0 value:0.

^ self.



! 
 restoreSelectionRange 

 self   selectFrom:( self  originalSelection at:1) to:( self  originalSelection at:2).

^ self.



! 
charformat ^charformat! 
originalSelection: originalSelection_val originalSelection := originalSelection_val! 
charrange: charrange_val charrange := charrange_val! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_TextDecorator) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_TextDecorator := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_TextDecorator := mmd !
	  decorateControlWithHandle: handle accordingTo: text 

( self forControlWithHandle: handle) applyEmphasesFrom: text.

^ self.



! 
		 forControlWithHandle: handle 

^ self basicNew forControlWithHandle: handle.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_TextDecorator. ! 
	BrazilMappingForWin32_TextDecorator metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_WindowContentManager as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' mouseGrabbingAgent lastMouseEventConsumer trackingNow controlsByHandle owner menuItemsById')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_WindowContentManager EnclosingObjects_BrazilMappingForWin32_WindowContentManager')!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowContentManager) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowContentManager) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_WindowContentManager) comment: 'Manages mouse event and control message delivery to descendents of the owner. Used by agents that map to Windows windows containing other windows in them, such as WindowAgent and ViewportAgent`InnerSubAgent.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowContentManager) methodsFor: 'unclassified'!
	 collectControlsByHandle 

|  result |

 result := self  newControlsByHandleMap.

 self  owner collectControlsByHandleInto: result.

^ result.



! 
lastMouseEventConsumer ^lastMouseEventConsumer! 
 requestMouseTracking 

|  success |

 self  api TRACKMOUSEEVENT newC freeAfter:[ : trackStruct | 

 trackStruct dwFlags:2; 

 hwndTrack: self  handle.

 success := self  api TrackMouseEvent boolValue: trackStruct address.

].

 success ifFalse:[ 

 self  api reportError:'TrackMouseEvent() failed'.

].

 self  trackingNow:true.

^ self.



! 
mouseGrabbingAgent: mouseGrabbingAgent_val mouseGrabbingAgent := mouseGrabbingAgent_val! 
 processWM_LBUTTONUP: args 

 self   captureModifierKeyState:( self  createModifierKeyStateFrom: args) while:[ 

 self   dispatchMouseEvent: args using:[ : consumer | 

 consumer processMouseUpLeft.

].

].

^0.



! 
controlsByHandle: controlsByHandle_val controlsByHandle := controlsByHandle_val! 
 processWM_COMMAND: args 

|  controlHandle  control |

 controlHandle := args lParam.

 control := self  controlsByHandle  at: controlHandle ifAbsent:[ 

^ self  maybeProcessMenuItemCommand: args.

].

^ control processCommand: args wParamHiWord.



! 
 setMouseGrabTo: agent 

 self  mouseGrabbingAgent: agent.

 self  api SetCapture value: self  owner handle.

^ self.



! 
trackingNow ^trackingNow! 
lastMouseEventConsumer: lastMouseEventConsumer_val lastMouseEventConsumer := lastMouseEventConsumer_val! 
mouseGrabbingAgent ^mouseGrabbingAgent! 
owner: owner_val owner := owner_val! 
  dispatchMouseEvent: args using: action 

|  thisConsumer |

 thisConsumer := self  findConsumerForMouseEventAt: args lParamAsPoint.

 thisConsumer == self  lastMouseEventConsumer ifFalse:[ 

 self  lastMouseEventConsumer notNil ifTrue:[ 

 self  lastMouseEventConsumer processMouseExit.

].

 thisConsumer notNil ifTrue:[ 

 thisConsumer processMouseEntry.

].

 self  lastMouseEventConsumer: thisConsumer.

].

 thisConsumer ifNotNil:[ 

 action value: thisConsumer.

].

^0.



! 
controlsByHandle ^controlsByHandle! 
owner ^owner! 
 releaseMouseGrabFrom: agent 

 self  mouseGrabbingAgent == agent ifTrue:[ 

 self  mouseGrabbingAgent:nil.

 self  api ReleaseCapture value.

].

^ self.



! 
 processWM_NOTIFY: args 

|  header  controlHandle  control |

 header := self  api NMHDR atAddress: args lParam.

 controlHandle := header hwndFrom.

 control := self  controlsByHandle  at: controlHandle ifAbsent:[ 

^ self  owner invokeDefWindowProc: args.

].

^ control  processNotification: header code data: header.



! 
 BrazilMappingForWin32_WindowContentManager_1_init: agent 

 self owner: agent.

 self controlsByHandle: self  newControlsByHandleMap.

 self menuItemsById: (EnclosingObjects_BrazilMappingForWin32_WindowContentManager at: 1)  Dictionary new.

 self lastMouseEventConsumer:nil.

 self mouseGrabbingAgent:nil.

 self trackingNow:false.

^ self.



! 
 updateControlsByHandle 

 self  controlsByHandle: self  collectControlsByHandle.

^ self.



! 
 createModifierKeyStateFrom: args 

|  wParam |

 wParam := args wParam.

^ (EnclosingObjects_BrazilMappingForWin32_WindowContentManager at: 1)  ModifierKeyState new shiftPressed:( wParam anyMask: self  api MK_SHIFT); 

 controlPressed:( wParam anyMask: self  api MK_CONTROL).



! 
 BrazilMappingForWin32_WindowContentManager_superInit_forAgent: agent 

super  new.

^ self.



! 
  captureModifierKeyState: eventInputState while: action 

^ self  owner visual desktop  ifNotNil:[ : it | 

 it agent  setModifierKeyState: eventInputState while: action.

] ifNil:[ 

 action value.

].



! 
 processWM_MOUSEMOVE: args 

 self   captureModifierKeyState:( self  createModifierKeyStateFrom: args) while:[ 

 self   dispatchMouseEvent: args using:[ : consumer | 

 consumer processMouseMove.

].

].

 self  trackingNow ifFalse:[ 

 self  requestMouseTracking.

].

^0.



! 
 processWM_MOUSELEAVE: args 

 self   captureModifierKeyState:( self  createModifierKeyStateFrom: args) while:[ 

 self  lastMouseEventConsumer notNil ifTrue:[ 

 self  lastMouseEventConsumer processMouseExit.

 self  lastMouseEventConsumer:nil.

].

].

 self  trackingNow:false.

^0.



! 
 findConsumerForMouseEventAt: point 

 self  mouseGrabbingAgent ifNotNil:[ : it | 

^ it.

].

 self  owner childrenDo:[ : each | 

( each findConsumerForMouseEventAt: point) ifNotNil:[ : consumer | 

^ consumer.

].

].

^nil.



! 
 processWM_LBUTTONDOWN: args 

 self   captureModifierKeyState:( self  createModifierKeyStateFrom: args) while:[ 

 self   dispatchMouseEvent: args using:[ : consumer | 

 consumer processMouseDownLeft.

].

].

^0.



! 
menuItemsById: menuItemsById_val menuItemsById := menuItemsById_val! 
 maybeProcessMenuItemCommand: args 

|  item |

 args wParam.

 item := self  menuItemsById  at: args wParam ifAbsent:[ 

^ self  owner invokeDefWindowProc: args.

].

 item action value.

^0.



! 
trackingNow: trackingNow_val trackingNow := trackingNow_val! 
 handle 

^ self  owner handle.



! 
menuItemsById ^menuItemsById! 
 newControlsByHandleMap 

^ (EnclosingObjects_BrazilMappingForWin32_WindowContentManager at: 1)  Dictionary new:20.



! 
 forAgent: agent 

 self BrazilMappingForWin32_WindowContentManager_superInit_forAgent: agent.

 self BrazilMappingForWin32_WindowContentManager_1_init: agent.

^ self.



! 
 api 

^ self  owner api.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_WindowContentManager) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_WindowContentManager := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_WindowContentManager := mmd !
	 forAgent: agent 

^ self basicNew forAgent: agent.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_WindowContentManager. ! 
	BrazilMappingForWin32_WindowContentManager metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_ListBoxAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ListBoxAgent EnclosingObjects_BrazilMappingForWin32_ListBoxAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_ListBoxAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ListBoxAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ListBoxAgent) comment: 'This is the Win32 agent representing a ListBox Brazil widget.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ListBoxAgent) methodsFor: 'unclassified'!
	 dwStyle 

^ (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api WS_CHILD | (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api WS_VISIBLE | (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LBS_HASSTRINGS | (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LBS_NOTIFY | (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LBS_NOINTEGRALHEIGHT | self  verticalScrollbarBits | self  horizontalScrollbarBits.



! 
 naturalExtent 

 self flag:#'BOGUS'.

^100 @25.



! 
 connectOwnArtifacts 

 self  map: self visual showHScrollbarA to: self ~#'matchHScrollbarStateFromVisual:'.

 self  map: self visual showVScrollbarA to: self ~#'matchVScrollbarStateFromVisual:'.

 self  map: self visual objectsHolder to: self ~#'matchListFromVisual:'.

 self  map: self visual selectionIndexHolder to: self ~#'matchSelectionIndexFromVisual:'.

super  connectOwnArtifacts.

^ self.



! 
 verticalScrollbarBits 

^ self visual showVScrollbar  ifNil:[ 

 (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api WS_VSCROLL.

] ifNotNil:[ : doShowAlways | 

 doShowAlways  ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api WS_VSCROLL | (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LBS_DISABLENOSCROLL.

] ifFalse:[ 

0.

].

].



! 
 matchHScrollbarStateFromVisual: newState 

 self setWindowStyle:( self  horizontalScrollbarBits |( self getWindowStyle bitClear: (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api WS_HSCROLL)).

^ self.



! 
 dwExStyle 

^ (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api WS_EX_CLIENTEDGE.



! 
 matchListFromVisual: objects 

|  strings  maxSize  buffer |

 strings := self visual objectsAsStrings.

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LB_RESETCONTENT wParam:0 lParam:0.

 maxSize := strings  inject:0 into:[ : max : each | 

 max max: each size.

].

 strings size >100 ifTrue:[ 

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LB_INITSTORAGE wParam: strings size lParam: maxSize +1.

].

 buffer := (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  Alien rawNewC:( maxSize +1).

 strings do:[ : each | 

 buffer  replaceFrom:1 to: each size with: each startingAt:1; 

  unsignedByteAt: each size +1 put:0.

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LB_ADDSTRING wParam:0 lParam: buffer address.

].

 buffer free.

 self  shouldTrackHorizontalScrollRange ifTrue:[ 

 self  setHorizontalScrollRangeFor: strings.

].

^ self.



! 
 processCommand: code 

 (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LBN_SELCHANGE = code ifTrue:[ 

 self  respondToSelectionChange.

^0.

].

 (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LBN_DBLCLK = code ifTrue:[ 

 self  respondToDoubleClick.

^0.

].

^0.



! 
 BrazilMappingForWin32_ListBoxAgent_superInit_forVisual: visual 

super  forVisual: visual.

^ self.



! 
 forVisual: visual 

 self BrazilMappingForWin32_ListBoxAgent_superInit_forVisual: visual.

 self BrazilMappingForWin32_ListBoxAgent_1_init: visual.

^ self.



! 
 matchSelectionIndexFromVisual: index1based 

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LB_SETCURSEL wParam: index1based - 1 lParam:0.

^ self.



! 
 controlClassName 

^'LISTBOX'.



! 
 measureMaxWidthOfStringIn: strings 

^ self  getDCWhile:[ : hdc | 

|  maxWidth |

 maxWidth :=0.

 self selectControlFontInto: hdc.

 (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api POINT newC freeAfter:[ : sizeBuffer | 

 strings do:[ : each | 

|  result |

 result := (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api GetTextExtentPoint32  unsignedValue: hdc value:( (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  UnsafeAlien forPointerTo: each) value: each size value: sizeBuffer address.

 result =0 ifTrue:[ 

^ (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api reportError:'GetTextExtentPoint32() failed'.

].

 maxWidth := maxWidth max: sizeBuffer x.

].

].

 maxWidth.

] ifNotMapped:[ 

0.

].



! 
 respondToDoubleClick 

 self visual doubleClickAction ifNotNil:[ : it | 

 it clone value.

].

^ self.



! 
 setHorizontalScrollRangeFor: strings 

|  maxWidth |

 maxWidth := self  measureMaxWidthOfStringIn: strings.

 self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LB_SETHORIZONTALEXTENT wParam: maxWidth lParam:0.

^ self.



! 
 BrazilMappingForWin32_ListBoxAgent_1_init: visual 

^ self.



! 
 horizontalScrollbarBits 

^ self visual showHScrollbar  ifNil:[ 

 (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api WS_HSCROLL.

] ifNotNil:[ : doShowAlways | 

 doShowAlways  ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api WS_HSCROLL | (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LBS_DISABLENOSCROLL.

] ifFalse:[ 

0.

].

].



! 
 shouldTrackHorizontalScrollRange 

^ self visual showHScrollbar ~~false.



! 
 matchVScrollbarStateFromVisual: newState 

 self setWindowStyle:( self  verticalScrollbarBits |( self getWindowStyle bitClear: (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api WS_VSCROLL)).

^ self.



! 
 respondToSelectionChange 

|  index |

 index := self  sendMessage: (EnclosingObjects_BrazilMappingForWin32_ListBoxAgent at: 1)  api LB_GETCURSEL wParam:0 lParam:0.

 self visual selectionIndexHolder acceptValueFromMapping:( index +1).

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ListBoxAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ListBoxAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ListBoxAgent := mmd !
	 forVisual: visual 

^ self basicNew forVisual: visual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_ListBoxAgent. ! 
	BrazilMappingForWin32_ListBoxAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_ViewportAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' scrollbarHeightCached innerAgent currentBounds BrazilMappingForWin32_ViewportAgent_InnerSubAgent_slot outerAgent scrollbarWidthCached BrazilMappingForWin32_ViewportAgent_OuterSubAgent_slot')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ViewportAgent EnclosingObjects_BrazilMappingForWin32_ViewportAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent) comment: 'Maps Brazil Viewport visuals. A visual is mapped to two windows: the outer one that provides scrollbars and manages scrolling and the inner one holding the actual content of the viewport. This allows to easily scroll the content by simply moving the inner window.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent) methodsFor: 'unclassified'!
	 rectangleRelativeToHostWindow: rect 

^ rect.



! 
InnerSubAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ViewportAgent_InnerSubAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_ViewportAgent 
			nestedMixins at: #BrazilMappingForWin32_ViewportAgent_InnerSubAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_ViewportAgent Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_ViewportAgent size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_ViewportAgent at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ViewportAgent_InnerSubAgent_slot := myNested.
		].
	^BrazilMappingForWin32_ViewportAgent_InnerSubAgent_slot! 
 visualsColorref 

^ self visual color asColorref.



! 
 setMouseGrabTo: agent 

 self  innerAgent setMouseGrabTo: agent.

^ self.



! 
currentBounds: currentBounds_val currentBounds := currentBounds_val! 
 createOwnArtifacts 

 self  outerAgent createWindow.

 self  innerAgent createWindow.

^ self.



! 
 noticeChangeInChildAgentStructure 

super  noticeChangeInChildAgentStructure.

 self  innerAgent updateControlsByHandle.

^ self.



! 
innerAgent: innerAgent_val innerAgent := innerAgent_val! 
  contributeToInnerWM_PAINTOn: hdc inside: parentRelativeRect 

 self visual color isTransparent ifFalse:[ 

 self  fillRectangle: parentRelativeRect on: hdc withSolidColor: self visual color asColor.

].

 self childrenDo:[ : each | 

 each  contributeToWM_PAINTOn: hdc inside: parentRelativeRect translatedBy:0 @0.

].

^ self.



! 
currentBounds ^currentBounds! 
outerAgent ^outerAgent! 
 invalidate 

 self  innerAgent invalidateWindow.

^ self.



! 
OuterSubAgent
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_ViewportAgent_OuterSubAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_ViewportAgent 
			nestedMixins at: #BrazilMappingForWin32_ViewportAgent_OuterSubAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_ViewportAgent Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_ViewportAgent size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_ViewportAgent at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_ViewportAgent_OuterSubAgent_slot := myNested.
		].
	^BrazilMappingForWin32_ViewportAgent_OuterSubAgent_slot! 
 invalidateWindow 

 self  innerAgent invalidateWindow.

^ self.



! 
scrollbarHeightCached ^scrollbarHeightCached! 
 BrazilMappingForWin32_ViewportAgent_1_init: v 

 self innerAgent:( self  InnerSubAgent inside: self).

 self outerAgent:( self  OuterSubAgent inside: self).

 self currentBounds:nil.

 self scrollbarHeightCached:nil.

 self scrollbarWidthCached:nil.

^ self.



! 
 scrollbarWidth 

^ self  scrollbarWidthCached ifNil:[ 

 self  scrollbarWidthCached: (EnclosingObjects_BrazilMappingForWin32_ViewportAgent at: 1)  windowsSession systemMetrics scrollbarWidth.

 self  scrollbarWidthCached.

].



! 
 hostWindowAgent 

^ self.



! 
 noteBeginningOfBoundsChangeAndProvideEndContinuation 

 self areBoundsChanging:true.

^[ 

 self  setInnerWindowBounds.

 self areBoundsChanging:false.

].



! 
 releaseMouseGrabFrom: agent 

 self  innerAgent releaseMouseGrabFrom: agent.

^ self.



! 
 createArtifactsForSubtree 

super  createArtifactsForSubtree.

 self  innerAgent updateControlsByHandle.

^ self.



! 
 connectOwnArtifacts 

super  connectOwnArtifacts.

 self  map: self visual visibleA to: self ~#'matchVisualsVisibility:'.

 self  map: self visual scrollPositionH to:[ : newOrigin | 

 self  scrollTo: newOrigin.

].

^ self.



! 
 scrollTo: newOrigin 

 self  innerAgent setWindowBounds:( newOrigin negated extent: self visual virtualExtent).

 self  matchScrollbarRange.

^ self.



! 
scrollbarWidthCached: scrollbarWidthCached_val scrollbarWidthCached := scrollbarWidthCached_val! 
 invokeDefWindowProc: args 

^ (EnclosingObjects_BrazilMappingForWin32_ViewportAgent at: 1)  api DefWindowProc  unsignedValue: args hwnd value: args message value: args wParam value: args lParam.



! 
 matchVisualsVisibility: shouldBeVisible 

 shouldBeVisible  ifTrue:[ 

 self  outerAgent showWindow.

] ifFalse:[ 

 self  outerAgent hideWindow.

].

^ self.



! 
innerAgent ^innerAgent! 
 noticeChangeInNaturalExtent 

 self  setInnerWindowBounds.

^ self.



! 
 matchVisualsBounds 

|  newBounds |

 newBounds := self parent rectangleRelativeToHostWindow: self visual bounds.

 newBounds = self  currentBounds ifTrue:[ 

^ self.

].

 self  currentBounds: newBounds.

 self  outerAgent setWindowBounds: self  currentBounds.

 self  setInnerWindowBounds.

 self  matchScrollbarRange.

^ self.



! 
 matchScrollbarRange 

 self  outerAgent matchScrollbarRange.

^ self.



! 
 scrollbarHeight 

^ self  scrollbarHeightCached ifNil:[ 

 self  scrollbarHeightCached: (EnclosingObjects_BrazilMappingForWin32_ViewportAgent at: 1)  windowsSession systemMetrics scrollbarHeight.

 self  scrollbarHeightCached.

].



! 
 innerWindowBounds 

^ self  innerAgent windowArtifactBounds translateBy: self visual scrollPosition negated.



! 
 invalidateRectangle: rectangle 

 self  innerAgent invalidateRectangle: rectangle.

^ self.



! 
scrollbarWidthCached ^scrollbarWidthCached! 
 forVisual: v 

 self BrazilMappingForWin32_ViewportAgent_superInit_forVisual: v.

 self BrazilMappingForWin32_ViewportAgent_1_init: v.

^ self.



! 
scrollbarHeightCached: scrollbarHeightCached_val scrollbarHeightCached := scrollbarHeightCached_val! 
 setInnerWindowBounds 

|  newBounds  corner |

 newBounds := self visual scrollPosition negated extent: self visual virtualExtent.

 self  innerAgent setWindowBounds: newBounds.

 corner := self visual innerExtent.

 newBounds corner x < corner x ifTrue:[ 

 self  outerAgent invalidateRectangle:( newBounds corner x @0 corner: corner).

].

 newBounds corner y < corner y ifTrue:[ 

 self  outerAgent invalidateRectangle:(0 @ newBounds corner y corner: corner).

].

^ self.



! 
 handle 

^ self  innerAgent handle.



! 
outerAgent: outerAgent_val outerAgent := outerAgent_val! 
  contributeToWM_PAINTOn: hdc inside: parentRelativeUpdateRect translatedBy: parentOrigin 

^ self.



! 
 destroyOwnArtifacts 

super  destroyOwnArtifacts.

 self  innerAgent destroyWindow.

 self  outerAgent destroyWindow.

^ self.



! 
 initialOuterWindowBounds 

^ self parent rectangleRelativeToHostWindow: self visual bounds.



! 
 BrazilMappingForWin32_ViewportAgent_superInit_forVisual: v 

super  forVisual: v.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ViewportAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ViewportAgent := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_ViewportAgent. ! 
	BrazilMappingForWin32_ViewportAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_ViewportAgent_InnerSubAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' messageDispatchTable lastMS handle owner inputManager apiInvalidateRect')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ViewportAgent_InnerSubAgent EnclosingObjects_BrazilMappingForWin32_ViewportAgent_InnerSubAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent_InnerSubAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent_InnerSubAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent_InnerSubAgent) comment: 'Manages the inner window of the viewport.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent_InnerSubAgent) methodsFor: 'unclassified'!
	 populateDispatchTable 

 self   register:(( self Array new:2)  at:1 put: self; 

  at:2 put:#'processWM_ERASEBKGND:'; 

 yourself) asHandlerFor: self  owner api WM_ERASEBKGND.

 self   register:(( self Array new:2)  at:1 put: self; 

  at:2 put:( (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_InnerSubAgent at: 2)  useDoubleBuffering  ifTrue:[ 

#'processWM_PAINTDoubleBuffered:'.

] ifFalse:[ 

#'processWM_PAINTUnbuffered:'.

]); 

 yourself) asHandlerFor: self  owner api WM_PAINT.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_COMMAND:'; 

 yourself) asHandlerFor: self  owner api WM_COMMAND.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_NOTIFY:'; 

 yourself) asHandlerFor: self  owner api WM_NOTIFY.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_MOUSEMOVE:'; 

 yourself) asHandlerFor: self  owner api WM_MOUSEMOVE.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_MOUSELEAVE:'; 

 yourself) asHandlerFor: self  owner api WM_MOUSELEAVE.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_LBUTTONDOWN:'; 

 yourself) asHandlerFor: self  owner api WM_LBUTTONDOWN.

 self   register:(( self Array new:2)  at:1 put: self  inputManager; 

  at:2 put:#'processWM_LBUTTONUP:'; 

 yourself) asHandlerFor: self  owner api WM_LBUTTONUP.

^ self.



! 
 dwStyle 

^ self  owner api WS_CHILD | self  owner api WS_VISIBLE | self  owner api WS_CLIPCHILDREN | self  owner api WS_CLIPSIBLINGS.



! 
 setWindowBounds: newBounds 

 self  handle ~=0 ifTrue:[ 

 self  owner api MoveWindow  value: self  handle value: newBounds left asInteger value: newBounds top asInteger value: newBounds width asInteger value: newBounds height asInteger value:1.

].

^ self.



! 
 setMouseGrabTo: agent 

 self  inputManager setMouseGrabTo: agent.

^ self.



! 
 initialWindowBounds 

^0 @0 extent: self  owner visual virtualExtent.



! 
 dwExStyle 

^ (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_InnerSubAgent at: 2)  api WS_EX_TRANSPARENT.



! 
  register: receiverSelectorTuple asHandlerFor: messageCode 

 self  messageDispatchTable  at: messageCode put: receiverSelectorTuple.

^ self.



! 
 resetForNewImageSession 

 self  handle:0.

^ self.



! 
 title 

^#''.



! 
 inside: outerAgent 

 self BrazilMappingForWin32_ViewportAgent_InnerSubAgent_superInit_inside: outerAgent.

 self BrazilMappingForWin32_ViewportAgent_InnerSubAgent_1_init: outerAgent.

 self  populateDispatchTable.

^ self.



! 
 processWM_PAINTUnbuffered: args 

|  paintstruct  hdc |

 paintstruct := self  owner api PAINTSTRUCT newC.

 hdc := self  owner api BeginPaint  unsignedValue: self  handle value: paintstruct address.

 self  owner  contributeToInnerWM_PAINTOn: hdc inside: paintstruct paintRectangle.

 self  owner api EndPaint  value: self  handle value: paintstruct address.

 paintstruct free.

^0.



! 
 windowArtifactBounds 

^ (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_InnerSubAgent at: 2)  api RECT newC freeAfter:[ : rect | 

|  ok |

 ok := (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_InnerSubAgent at: 2)  api GetClientRect  unsignedValue: self  handle value: rect address.

 ok =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_InnerSubAgent at: 2)  api reportError:'GetClientRect() failed'.

^0 @0 extent:(0 @0).

].

 rect asRectangle.

].



! 
 BrazilMappingForWin32_ViewportAgent_InnerSubAgent_superInit_inside: outerAgent 

super  new.

^ self.



! 
owner: owner_val owner := owner_val! 
lastMS ^lastMS! 
owner ^owner! 
 destroyWindow 

 self  handle ~=0 ifTrue:[ 

 self  owner api DestroyWindow value: self  handle.

 self  handle:0.

].

^ self.



! 
 releaseMouseGrabFrom: agent 

 self  inputManager releaseMouseGrabFrom: agent.

^ self.



! 
 invalidateWindow 

 self  handle =0 ifFalse:[ 

 self  apiInvalidateRect  value: self  handle value:0 value:0.

].

^ self.



! 
handle: handle_val handle := handle_val! 
lastMS: lastMS_val lastMS := lastMS_val! 
 createWindow 

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_InnerSubAgent at: 2)  windowsSession viewportContentCarrierWindowClass createWindowForAgent: self.

^ self.



! 
 processWindowsMessage: args 

|  message  handler |

 message := args message.

 handler := self  messageDispatchTable  at: message ifAbsent:[ 

^ (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_InnerSubAgent at: 1)  invokeDefWindowProc: args.

].

^( handler at:1)  perform:( handler at:2) with: args.



! 
 updateControlsByHandle 

 self  inputManager updateControlsByHandle.

^ self.



! 
apiInvalidateRect: apiInvalidateRect_val apiInvalidateRect := apiInvalidateRect_val! 
 processWM_ERASEBKGND: args 

^1.



! 
 invalidateRectangle: rectangle 

|  expanded |

( self  handle ~=0 and:[ 

 rectangle hasPositiveExtent.

]) ifTrue:[ 

 expanded := rectangle origin extent:( rectangle extent +1).

 self  owner api RECT newC freeAfter:[ : rect | 

 rect initializeFromRectangle: expanded.

 self  apiInvalidateRect  value: self  handle value: rect address value:0.

].

].

^ self.



! 
apiInvalidateRect ^apiInvalidateRect! 
messageDispatchTable: messageDispatchTable_val messageDispatchTable := messageDispatchTable_val! 
 BrazilMappingForWin32_ViewportAgent_InnerSubAgent_1_init: outerAgent 

 self owner: outerAgent.

 self handle:0.

 self inputManager:( (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_InnerSubAgent at: 2)  WindowContentManager forAgent: outerAgent).

 self messageDispatchTable: (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_InnerSubAgent at: 2)  Dictionary new.

 self lastMS:0.

 self apiInvalidateRect: (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_InnerSubAgent at: 2)  api InvalidateRect.

^ self.



! 
handle ^handle! 
inputManager ^inputManager! 
 parentHandle 

^ self  owner outerAgent handle ifNil:[ 

 self error:'no parent handle'.

].



! 
 processWM_PAINTDoubleBuffered: args 

^ self  processWM_PAINTUnbuffered: args.



! 
inputManager: inputManager_val inputManager := inputManager_val! 
messageDispatchTable ^messageDispatchTable! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent_InnerSubAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ViewportAgent_InnerSubAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ViewportAgent_InnerSubAgent := mmd !
	 inside: outerAgent 

^ self basicNew inside: outerAgent.



! 
		 !
	BrazilMappingForWin32_ViewportAgent metadata addNestedClass: BrazilMappingForWin32_ViewportAgent_InnerSubAgent. ! 
	BrazilMappingForWin32_ViewportAgent_InnerSubAgent metadata enclosingMixin: BrazilMappingForWin32_ViewportAgent !
	Delta define: #BrazilMappingForWin32_ViewportAgent_OuterSubAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' handle owner')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ViewportAgent_OuterSubAgent EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent_OuterSubAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent_OuterSubAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent_OuterSubAgent) comment: 'Manages the outer window of a viewport. The class of this window is registered with a null background brush, and it handles WM_ERASEBKGND to make the color set in the visual.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent_OuterSubAgent) methodsFor: 'unclassified'!
	 dwStyle 

^ self  owner api WS_CHILD | self  owner api WS_CLIPCHILDREN | self  owner api WS_CLIPSIBLINGS |( self  owner visual allowsHorizontalScrolling  ifTrue:[ 

 self  owner api WS_HSCROLL.

] ifFalse:[ 

0.

]) |( self  owner visual allowsVerticalScrolling  ifTrue:[ 

 self  owner api WS_VSCROLL.

] ifFalse:[ 

0.

]).



! 
handle: handle_val handle := handle_val! 
 setWindowBounds: newBounds 

 self  handle ~=0 ifTrue:[ 

 self  owner api MoveWindow  value: self  handle value: newBounds left asInteger value: newBounds top asInteger value: newBounds width asInteger value: newBounds height asInteger value:1.

].

^ self.



! 
 hideWindow 

 self  handle ~=0 ifTrue:[ 

 self  owner api ShowWindow  value: self  handle value: (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api SW_HIDE.

].

^ self.



! 
 processWindowsMessage: args 

 args message = (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api WM_ERASEBKGND ifTrue:[ 

^ self  processWM_ERASEBKGND: args.

].

 args message = (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api WM_HSCROLL ifTrue:[ 

^ self  processWM_HSCROLL: args.

].

 args message = (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api WM_VSCROLL ifTrue:[ 

^ self  processWM_VSCROLL: args.

].

^ self  owner invokeDefWindowProc: args.



! 
 initialWindowBounds 

^ self  owner initialOuterWindowBounds.



! 
 dwExStyle 

^0.



! 
 processWM_HSCROLL: args 

|  command  thumbPosition  success  target |

 command := args wParamLoWord.

 command >5 ifTrue:[ 

^0.

].

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api SCROLLINFO newC freeAfter:[ : scrollinfo | 

 scrollinfo fMask:16.

 success := (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api GetScrollInfo  boolValue: self  handle value: (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api SB_HORZ value: scrollinfo address.

 thumbPosition := scrollinfo nTrackPos.

].

 target := self   transformScrollValue: self  owner visual scrollPosition x by: command thumbPosition: thumbPosition pageSize: self  owner visual innerExtent x maxValue: self  owner visual virtualExtent x.

 success ifTrue:[ 

 self  owner visual scrollPosition:( target @ self  owner visual scrollPosition y).

].

^0.



! 
 processWM_ERASEBKGND: args 

|  hdc  hbrush |

 hdc := args wParam.

 hbrush := (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api CreateSolidBrush unsignedValue: self  owner visualsColorref.

 hbrush =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api reportError:'CreateSolidBrush() failed'.

^0.

].

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api RECT newC freeAfter:[ : rect | 

|  ok |

 ok := (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api GetClientRect  unsignedValue: args hwnd value: rect address.

 ok =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api reportError:'GetClientRect() failed'.

^0.

].

 self   paintUncoveredBackgroundOn: hdc with: hbrush inside: rect asRectangle.

].

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api DeleteObject value: hbrush.

^1.



! 
 invalidateRectangle: rectangle 

|  expanded |

 self  handle =0 ifFalse:[ 

 expanded := rectangle origin extent:( rectangle extent +1).

 self  owner api RECT newC freeAfter:[ : rect | 

 rect initializeFromRectangle: expanded.

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api InvalidateRect  value: self  handle value: rect address value:0.

].

].

^ self.



! 
  paintUncoveredBackgroundOn: hdc with: hbrush inside: myBounds 

|  contentBounds |

 contentBounds := self  owner innerWindowBounds.

 contentBounds bottom < myBounds bottom ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api RECT newC freeAfter:[ : buffer | 

 buffer left: myBounds left; 

 top: contentBounds bottom; 

 right: myBounds right; 

 bottom: myBounds bottom.

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api FillRect  value: hdc value: buffer address value: hbrush.

].

].

 contentBounds right < myBounds right ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api RECT newC freeAfter:[ : buffer | 

 buffer left: contentBounds right; 

 top: myBounds top; 

 right: myBounds right; 

 bottom: myBounds bottom.

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api FillRect  value: hdc value: buffer address value: hbrush.

].

].

^ self.



! 
 showWindow 

 self  handle ~=0 ifTrue:[ 

 self  owner api ShowWindow  value: self  handle value: (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api SW_SHOW.

 self  owner api UpdateWindow value: self  handle.

].

^ self.



! 
 resetForNewImageSession 

 self  handle:0.

^ self.



! 
 createWindow 

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  windowsSession viewportWindowClass createWindowForAgent: self.

^ self.



! 
  transformScrollValue: position by: command thumbPosition: thumbPosition pageSize: pageSize maxValue: maxValue 

 command =0 ifTrue:[ 

^ position -  self  smallScrollStep max:0.

].

 command =1 ifTrue:[ 

^ position + self  smallScrollStep min:( maxValue -  pageSize).

].

 command =2 ifTrue:[ 

^ position -  pageSize max:0.

].

 command =3 ifTrue:[ 

^ position + pageSize min:( maxValue -  pageSize).

].

( command =4 or:[ 

 command =5.

]) ifTrue:[ 

^ thumbPosition.

].

^ position.



! 
 title 

^#''.



! 
 BrazilMappingForWin32_ViewportAgent_OuterSubAgent_1_init: outerAgent 

 self owner: outerAgent.

 self handle:0.

^ self.



! 
 inside: outerAgent 

 self BrazilMappingForWin32_ViewportAgent_OuterSubAgent_superInit_inside: outerAgent.

 self BrazilMappingForWin32_ViewportAgent_OuterSubAgent_1_init: outerAgent.

^ self.



! 
 matchScrollbarRange 

|  desired  available  optimalPosition |

 desired := self  owner visual virtualExtent.

 available := self  owner visual innerExtent max:(0 @0).

 optimalPosition :=( self  owner visual scrollPosition min:( desired -  available)) max:(0 @0).

 self  owner visual scrollPosition = optimalPosition ifFalse:[ 

 self  owner visual scrollPosition: optimalPosition.

].

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api SCROLLINFO newC freeAfter:[ : scrollinfo | 

 scrollinfo fMask: (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api SIF_ALL; 

 nMin:0.

 self  owner visual allowsHorizontalScrolling ifTrue:[ 

 scrollinfo nMax: desired x; 

 nPage: available x; 

 nPos: optimalPosition x.

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api SetScrollInfo  value: self  handle value: (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api SB_HORZ value: scrollinfo address value:1.

].

 self  owner visual allowsVerticalScrolling ifTrue:[ 

 scrollinfo nMax: desired y; 

 nPage: available y; 

 nPos: optimalPosition y.

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api SetScrollInfo  value: self  handle value: (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api SB_VERT value: scrollinfo address value:1.

].

].

^ self.



! 
handle ^handle! 
 invalidateWindow 

 self  handle =0 ifFalse:[ 

 self  owner api InvalidateRect  value: self  handle value:0 value:0.

].

^ self.



! 
 BrazilMappingForWin32_ViewportAgent_OuterSubAgent_superInit_inside: outerAgent 

super  new.

^ self.



! 
owner: owner_val owner := owner_val! 
 parentHandle 

^ self  owner parent handle ifNil:[ 

 self error:'no parent handle'.

].



! 
owner ^owner! 
 destroyWindow 

 self  handle ~=0 ifTrue:[ 

 self  owner api DestroyWindow value: self  handle.

 self  handle:0.

].

^ self.



! 
 smallScrollStep 

^20.



! 
 processWM_VSCROLL: args 

|  command  thumbPosition  success  target |

 command := args wParamLoWord.

 command >5 ifTrue:[ 

^0.

].

 (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api SCROLLINFO newC freeAfter:[ : scrollinfo | 

 scrollinfo fMask:16.

 success := (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api GetScrollInfo  boolValue: self  handle value: (EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent at: 2)  api SB_VERT value: scrollinfo address.

 thumbPosition := scrollinfo nTrackPos.

].

 target := self   transformScrollValue: self  owner visual scrollPosition y by: command thumbPosition: thumbPosition pageSize: self  owner visual innerExtent y maxValue: self  owner visual virtualExtent y.

 success ifTrue:[ 

 self  owner visual scrollPosition:( self  owner visual scrollPosition x @ target).

].

^0.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ViewportAgent_OuterSubAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ViewportAgent_OuterSubAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ViewportAgent_OuterSubAgent := mmd !
	 inside: outerAgent 

^ self basicNew inside: outerAgent.



! 
		 !
	BrazilMappingForWin32_ViewportAgent metadata addNestedClass: BrazilMappingForWin32_ViewportAgent_OuterSubAgent. ! 
	BrazilMappingForWin32_ViewportAgent_OuterSubAgent metadata enclosingMixin: BrazilMappingForWin32_ViewportAgent !
	Delta define: #BrazilMappingForWin32_AgentFactory as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_AgentFactory EnclosingObjects_BrazilMappingForWin32_AgentFactory')!
	(Delta mirrorFor: #BrazilMappingForWin32_AgentFactory) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_AgentFactory) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_AgentFactory) comment: 'The rest of Brazil refers to classes such as this one as mappings, however from here on we''ll consider a mapping to be the entire body of code that handles the representation of Brazil visuals as a particular set of native UI primitives. What was previously known as mappings will now be called agent factories of mappings.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_AgentFactory) methodsFor: 'unclassified'!
	 createAgentForIcon: icon 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  ImageAgent forVisual: icon.



! 
 createAgentForVerticalVisualSequence: visual 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  VerticalVisualSequenceAgent forVisual: visual.



! 
 createAgentForActiveIcon: icon 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  ActiveImageAgent forVisual: icon.



! 
 createAgentForVerticalViewport: viewport 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  VerticalViewportAgent forVisual: viewport.



! 
 createAgentForCompositeVisual: visual 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  NullColoredAgent forVisual: visual.



! 
 createAgentForHyperlink: link 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  HyperlinkAgent forVisual: link.



! 
 createAgentForBlank: blank 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  NullAgent forVisual: blank.



! 
 createAgentForLineShape: shape 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  LineShapeAgent forVisual: shape.



! 
 createAgentForWrapper: wrapper 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  NullColoredAgent forVisual: wrapper.



! 
 createAgentForActiveLabel: label 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  ActiveLabelAgent forVisual: label.



! 
 createAgentForLabel: label 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  LabelAgent forVisual: label.



! 
 createAgentForWindow: window 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  WindowAgent forVisual: window.



! 
 BrazilMappingForWin32_AgentFactory_1_init 

^ self.



! 
 createAgentForRectangleShape: shape 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  RectangleShapeAgent forVisual: shape.



! 
 createAgentForPushButton: button 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  ButtonAgent forVisual: button.



! 
 createAgentForMenu: menu 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  MenuAgent menu: menu.



! 
 new 

 self BrazilMappingForWin32_AgentFactory_superInit_new.

 self BrazilMappingForWin32_AgentFactory_1_init.

^ self.



! 
 createAgentForTextDisplay: visual 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  TextDisplayAgent forVisual: visual.



! 
 createAgentForEllipseShape: shape 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  EllipseShapeAgent forVisual: shape.



! 
 createAgentForSensitiveIcon: icon 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  SensitiveImageAgent forVisual: icon.



! 
 createAgentForDesktop: aDesktop 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  DesktopAgent desktop: aDesktop.



! 
 createAgentForTextView: textView 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  TextViewAgent forVisual: textView.



! 
 createAgentForViewport: viewport 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  ViewportAgent forVisual: viewport.



! 
 BrazilMappingForWin32_AgentFactory_superInit_new 

super  new.

^ self.



! 
 createAgentForListBox: listBox 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  ListBoxAgent forVisual: listBox.



! 
 createAgentForVisualSequence: visual 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  NullColoredAgent forVisual: visual.



! 
 createAgentForPolygonShape: shape 

^ (EnclosingObjects_BrazilMappingForWin32_AgentFactory at: 1)  PolygonShapeAgent forVisual: shape.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_AgentFactory) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_AgentFactory := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_AgentFactory := mmd !
	 new 

^ self basicNew new.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_AgentFactory. ! 
	BrazilMappingForWin32_AgentFactory metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_ActiveImageAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' state')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_ActiveImageAgent EnclosingObjects_BrazilMappingForWin32_ActiveImageAgent')!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgent) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgent) comment: 'Maps ActiveIcon visuals.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgent) methodsFor: 'unclassified'!
	 visualImage 

^ self  state image.



! 
 connectOwnArtifacts 

super  connectOwnArtifacts.

 self  map: self visual disabledImageA to:[ : newImage | 

 self invalidate.

].

 self  map: self visual hoverImageA to:[ : newImage | 

 self invalidate.

].

 self  map: self visual downImageA to:[ : newImage | 

 self invalidate.

].

 self  map: self visual enabledA to:[ : newEnabledState | 

 self invalidate.

].

^ self.



! 
 processMouseEntry 

 self  state respondToMouseEntry.

^ self.



! 
state ^state! 
 BrazilMappingForWin32_ActiveImageAgent_1_init: image 

 self state:( (EnclosingObjects_BrazilMappingForWin32_ActiveImageAgent at: 1)  activeImageAgentStates NormalState forAgent: self).

^ self.



! 
 enterState: stateClass 

 self  state:( stateClass forAgent: self).

 self invalidate.

^ self.



! 
 BrazilMappingForWin32_ActiveImageAgent_superInit_forVisual: image 

super  forVisual: image.

^ self.



! 
 processMouseUpLeft 

 self  state respondToMouseUpLeft.

^ self.



! 
 processMouseExit 

 self  state respondToMouseExit.

^ self.



! 
state: state_val state := state_val! 
 processMouseDownLeft 

 self  state respondToMouseDownLeft.

^ self.



! 
 forVisual: image 

 self BrazilMappingForWin32_ActiveImageAgent_superInit_forVisual: image.

 self BrazilMappingForWin32_ActiveImageAgent_1_init: image.

^ self.



! 
 findConsumerForMouseEventAt: parentRelativePoint 

^( self visual bounds containsPoint: parentRelativePoint)  ifTrue:[ 

 self.

] ifFalse:[ 

nil.

].



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_ActiveImageAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_ActiveImageAgent := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_ActiveImageAgent := mmd !
	 forVisual: image 

^ self basicNew forVisual: image.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_ActiveImageAgent. ! 
	BrazilMappingForWin32_ActiveImageAgent metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_HyperlinkAgentStateClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState_slot BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState_slot BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState_slot BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState_slot')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses')!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses) comment: 'This is a nested module containing the classes used internally by HyperlinkAgent,  to avoid creating unique class instances for each agent instance.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses) methodsFor: 'unclassified'!
	AgentState
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses 
			nestedMixins at: #BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState_slot := myNested.
		].
	^BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState_slot! 
PressedState
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses 
			nestedMixins at: #BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses Mirror on: self  AgentState)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState_slot := myNested.
		].
	^BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState_slot! 
 BrazilMappingForWin32_HyperlinkAgentStateClasses_1_init 

^ self.



! 
NormalState
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses 
			nestedMixins at: #BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses Mirror on: self  AgentState)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState_slot := myNested.
		].
	^BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState_slot! 
 new 

 self BrazilMappingForWin32_HyperlinkAgentStateClasses_superInit_new.

 self BrazilMappingForWin32_HyperlinkAgentStateClasses_1_init.

^ self.



! 
 BrazilMappingForWin32_HyperlinkAgentStateClasses_superInit_new 

super  new.

^ self.



! 
HoverState
	| nestedClass enclosingObjectArray myNested depth |
	BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses 
			nestedMixins at: #BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState.
		myNested := (nestedClass mixin |>  (MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses Mirror on: self  AgentState)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState_slot := myNested.
		].
	^BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState_slot! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_HyperlinkAgentStateClasses. ! 
	BrazilMappingForWin32_HyperlinkAgentStateClasses metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState')!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState) comment: 'Captures the behavior of the agent that in has when the mouse is not hovering over it.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState) methodsFor: 'unclassified'!
	 color 

^ self agent visual color.



! 
 forAgent: theAgent 

 self BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState_superInit_forAgent: theAgent.

 self BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState_1_init: theAgent.

^ self.



! 
 BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState_superInit_forAgent: theAgent 

super  forAgent: theAgent.

^ self.



! 
 BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState_1_init: theAgent 

^ self.



! 
 isNormal 

^true.



! 
 shouldShowUnderline 

^ self agent visual underlineNormal.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState := mmd !
	 forAgent: theAgent 

^ self basicNew forAgent: theAgent.



! 
		 !
	BrazilMappingForWin32_HyperlinkAgentStateClasses metadata addNestedClass: BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState. ! 
	BrazilMappingForWin32_HyperlinkAgentStateClasses_NormalState metadata enclosingMixin: BrazilMappingForWin32_HyperlinkAgentStateClasses !
	Delta define: #BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState')!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState) comment: 'Captures the behavior of the agent that in has when the mouse is hovering over it.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState) methodsFor: 'unclassified'!
	 BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState_1_init: theAgent 

^ self.



! 
 forAgent: theAgent 

 self BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState_superInit_forAgent: theAgent.

 self BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState_1_init: theAgent.

^ self.



! 
 shouldShowUnderline 

^ self agent visual underlineHover.



! 
 isHover 

^true.



! 
 color 

^ self agent visual hoverColor.



! 
 BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState_superInit_forAgent: theAgent 

super  forAgent: theAgent.

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState := mmd !
	 forAgent: theAgent 

^ self basicNew forAgent: theAgent.



! 
		 !
	BrazilMappingForWin32_HyperlinkAgentStateClasses metadata addNestedClass: BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState. ! 
	BrazilMappingForWin32_HyperlinkAgentStateClasses_HoverState metadata enclosingMixin: BrazilMappingForWin32_HyperlinkAgentStateClasses !
	Delta define: #BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState')!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState) comment: 'Captures the behavior of the agent that in has when the left mouse button is held down over it.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState) methodsFor: 'unclassified'!
	 color 

^ self agent visual downColor.



! 
 forAgent: theAgent 

 self BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState_superInit_forAgent: theAgent.

 self BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState_1_init: theAgent.

^ self.



! 
 BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState_superInit_forAgent: theAgent 

super  forAgent: theAgent.

^ self.



! 
 BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState_1_init: theAgent 

^ self.



! 
 isPressed 

^true.



! 
 respondToButtonRelease 

 self agent visual doAction.

^ self.



! 
 shouldShowUnderline 

^ self agent visual underlineHover.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState := mmd !
	 forAgent: theAgent 

^ self basicNew forAgent: theAgent.



! 
		 !
	BrazilMappingForWin32_HyperlinkAgentStateClasses metadata addNestedClass: BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState. ! 
	BrazilMappingForWin32_HyperlinkAgentStateClasses_PressedState metadata enclosingMixin: BrazilMappingForWin32_HyperlinkAgentStateClasses !
	Delta define: #BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' agent')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState')!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState) comment: 'The common superclass of all hyperlink agent states.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState) methodsFor: 'unclassified'!
	 BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState_superInit_forAgent: theAgent 

super  new.

^ self.



! 
agent: agent_val agent := agent_val! 
 BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState_1_init: theAgent 

 self agent: theAgent.

^ self.



! 
 forAgent: theAgent 

 self BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState_superInit_forAgent: theAgent.

 self BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState_1_init: theAgent.

^ self.



! 
 isHover 

^false.



! 
 isNormal 

^false.



! 
 isPressed 

^false.



! 
 respondToButtonRelease 

^ self.



! 
agent ^agent! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState := mmd !
	 forAgent: theAgent 

^ self basicNew forAgent: theAgent.



! 
		 !
	BrazilMappingForWin32_HyperlinkAgentStateClasses metadata addNestedClass: BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState. ! 
	BrazilMappingForWin32_HyperlinkAgentStateClasses_AgentState metadata enclosingMixin: BrazilMappingForWin32_HyperlinkAgentStateClasses !
	Delta define: #BrazilMappingForWin32_AgentWithHandle as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' handle')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_AgentWithHandle EnclosingObjects_BrazilMappingForWin32_AgentWithHandle')!
	(Delta mirrorFor: #BrazilMappingForWin32_AgentWithHandle) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_AgentWithHandle) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_AgentWithHandle) comment: 'This is an abstract superclass of those agents that create an actual Windows window to represent their visuals. The ''handle'' slot holds the integer value of the handle, if it exists. The class also provides some facilities common to window management such as enabling and disabling the window, sending it messages, or changing its style.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_AgentWithHandle) methodsFor: 'unclassified'!
	  getDCWhile: action ifNotMapped: unmappedAction 

|  hdc |

 self  handle isNil ifTrue:[ 

^ unmappedAction value.

].

 hdc := (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api GetDC unsignedValue: self  handle.

 hdc =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api reportError:'GetDC() failed'.

].

^[ 

 action value: hdc.

] ensure:[ 

 (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api ReleaseDC  value: self  handle value: hdc.

].



! 
  sendMessage: msg wParam: wParam lParam: lParam 

^ self  ifHandleValid:[ 

 (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api SendMessage  unsignedValue: self  handle value: msg value: wParam value: lParam.

].



! 
 getWindowExStyle 

^ self  getWindowLong: (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api GWL_EXSTYLE.



! 
 updateWindow 

 self  ifHandleValid:[ 

 (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api UpdateWindow value: self  handle.

].

^ self.



! 
 BrazilMappingForWin32_AgentWithHandle_superInit_forVisual: visual 

super  forVisual: visual.

^ self.



! 
 setWindowText: newText 

( (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  Alien newCString: newText) freeAfter:[ : cString | 

 self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api WM_SETTEXT wParam:0 lParam: cString address.

].

^ self.



! 
 ifHandleValid: block 

^ self  handle ifNotNil:[ 

 block value.

].



! 
  setWindowLong: index to: value 

 self  ifHandleValid:[ 

 (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api SetWindowLong  unsignedValue: self  handle value: index value: value.

].

^ self.



! 
 setWindowStyle: value 

 self   setWindowLong: (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api GWL_STYLE to: value.

^ self.



! 
 BrazilMappingForWin32_AgentWithHandle_1_init: visual 

 self handle:nil.

^ self.



! 
 enableWindow: doEnable 

|  success |

 self  ifHandleValid:[ 

 (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api EnableWindow  boolValue: self  handle value:( doEnable  ifTrue:[ 

1.

] ifFalse:[ 

0.

]).

].

^ self.



! 
 forVisual: visual 

 self BrazilMappingForWin32_AgentWithHandle_superInit_forVisual: visual.

 self BrazilMappingForWin32_AgentWithHandle_1_init: visual.

^ self.



! 
 setWindowExStyle: value 

 self   setWindowLong: (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api GWL_EXSTYLE to: value.

^ self.



! 
 resetForNewImageSession 

 self  handle:nil.

^ self.



! 
handle ^handle! 
 getWindowTextIfNone: noneBlock 

|  length |

 self  handle ifNil:[ 

^ noneBlock value.

].

 length := self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api WM_GETTEXTLENGTH wParam:0 lParam:0.

^( (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  Alien newC:( length +1)) freeAfter:[ : buffer | 

 self   sendMessage: (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api WM_GETTEXT wParam: length +1 lParam: buffer address.

 buffer strcpy withSqueakLineEndings.

].



! 
 getWindowLong: index 

 self  handle isNil ifTrue:[ 

 self error:'agent has no window handle'.

].

^ (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api GetWindowLong  unsignedValue: self  handle value: index.



! 
 getWindowStyle 

^ self  getWindowLong: (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api GWL_STYLE.



! 
handle: handle_val handle := handle_val! 
 showWindow: doShow 

 self  ifHandleValid:[ 

 (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api ShowWindow  value: self  handle value:( doShow  ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api SW_SHOW.

] ifFalse:[ 

 (EnclosingObjects_BrazilMappingForWin32_AgentWithHandle at: 1)  api SW_HIDE.

]).

].

^ self.



! 
 getWindowText 

^ self  getWindowTextIfNone:[ 

 self String new.

].



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_AgentWithHandle) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_AgentWithHandle := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_AgentWithHandle := mmd !
	 forVisual: visual 

^ self basicNew forVisual: visual.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_AgentWithHandle. ! 
	BrazilMappingForWin32_AgentWithHandle metadata enclosingMixin: BrazilMappingForWin32 !
	Delta define: #BrazilMappingForWin32_MenuBuilder as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' nextAvailableId itemsById handleStack')
	 classVariables: 'MixinMetadata_BrazilMappingForWin32_MenuBuilder EnclosingObjects_BrazilMappingForWin32_MenuBuilder')!
	(Delta mirrorFor: #BrazilMappingForWin32_MenuBuilder) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #BrazilMappingForWin32_MenuBuilder) group: 'newspeak'!
	(Delta mirrorFor: #BrazilMappingForWin32_MenuBuilder) comment: 'An instance of this class is used to build a Windows menu from a Brazil counterpart.'!
	! (Delta mirrorFor: #BrazilMappingForWin32_MenuBuilder) methodsFor: 'unclassified'!
	 isMenuBuilt 

^ self  handle ~=0.



! 
itemsById: itemsById_val itemsById := itemsById_val! 
 flagsForMenuItem: item 

^ item enabled  ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api MF_ENABLED.

] ifFalse:[ 

 (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api MF_DISABLED | (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api MF_GRAYED.

].



! 
 buildMenuBarFrom: menu 

 self  pushNewMenuBarHandle.

 menu dispatchTo: self.

^ self  popMenuHandle.



! 
 pushNewMenuHandle 

|  newHandle |

 newHandle := (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api CreatePopupMenu unsignedValue.

 newHandle =0 ifTrue:[ 

^ (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api reportError:'CreatePopupMenu() failed'.

].

 self  handleStack addLast: newHandle.

^ self.



! 
 buildFrom: menu 

 self  pushNewMenuHandle.

 menu dispatchTo: self.

^ self  popMenuHandle.



! 
 BrazilMappingForWin32_MenuBuilder_1_init 

 self handleStack: (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  OrderedCollection new.

 self itemsById: (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  Dictionary new.

 self nextAvailableId:10000.

^ self.



! 
nextAvailableId ^nextAvailableId! 
 visitSeparatorItem: separator 

|  result |

 result := (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api AppendMenu  value: self  handle value: (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api MF_SEPARATOR value: self  nextAvailableId value:0.

 result =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api reportError:'AppendMenu() failed'.

].

 self  itemsById  at: self  nextAvailableId put: separator.

 self  nextAvailableId:( self  nextAvailableId +1).

^ self.



! 
 new 

 self BrazilMappingForWin32_MenuBuilder_superInit_new.

 self BrazilMappingForWin32_MenuBuilder_1_init.

^ self.



! 
handleStack: handleStack_val handleStack := handleStack_val! 
 BrazilMappingForWin32_MenuBuilder_superInit_new 

super  new.

^ self.



! 
nextAvailableId: nextAvailableId_val nextAvailableId := nextAvailableId_val! 
 handle 

^ self  handleStack isEmpty  ifTrue:[ 

0.

] ifFalse:[ 

 self  handleStack last.

].



! 
 pushNewMenuBarHandle 

|  newHandle |

 newHandle := (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api CreateMenu unsignedValue.

 newHandle =0 ifTrue:[ 

^ (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api reportError:'CreateMenu() failed'.

].

 self  handleStack addLast: newHandle.

^ self.



! 
 popMenuHandle 

^ self  handleStack removeLast.



! 
handleStack ^handleStack! 
 visitMenuItem: item 

 item visible ifTrue:[ 

|  result |

( (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  Alien newCString: item label) freeAfter:[ : label | 

 result := (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api AppendMenu  value: self  handle value:( self  flagsForMenuItem: item) value: self  nextAvailableId value: label address.

].

 result =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api reportError:'AppendMenu() failed'.

].

 self  itemsById  at: self  nextAvailableId put: item.

 self  nextAvailableId:( self  nextAvailableId +1).

].

^ self.



! 
itemsById ^itemsById! 
 visitSubmenuItem: item 

|  submenuHandle  result |

 self  pushNewMenuHandle.

 item submenu dispatchTo: self.

 submenuHandle := self  popMenuHandle.

( (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  Alien newCString: item label) freeAfter:[ : label | 

 result := (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api AppendMenu  value: self  handle value: (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api MF_POPUP value: submenuHandle value: label address.

].

 result =0 ifTrue:[ 

 (EnclosingObjects_BrazilMappingForWin32_MenuBuilder at: 1)  api reportError:'AppendMenu() failed'.

].

^ self.



! 
 !
	! (Delta mirrorFor: #BrazilMappingForWin32_MenuBuilder) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_BrazilMappingForWin32_MenuBuilder := eos !
	mixinMetadata: mmd MixinMetadata_BrazilMappingForWin32_MenuBuilder := mmd !
	 new 

^ self basicNew new.



! 
		 !
	BrazilMappingForWin32 metadata addNestedClass: BrazilMappingForWin32_MenuBuilder. ! 
	BrazilMappingForWin32_MenuBuilder metadata enclosingMixin: BrazilMappingForWin32 !
	