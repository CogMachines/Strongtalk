Delta define: #Brazil as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' TimeStamp Brazil_ContainerClasses_slot SmallInteger GradientFillStyle lastVisitedDirectoryS Brazil_ManipulationClasses_slot Dictionary Brazil_MenuClasses_slot SeqCltnReadStream MorphicAgentFactory WeakArray Brazil_MappingClasses_slot text MorphicFontMapper Rectangle theDesktopS Brazil_ToolClasses_slot abilities plumbing visuals Brazil_AbilityClasses_slot WorldState CharacterReadWriteStream SystemScope Brazil_AreaClasses_slot ZeroDivide BrazilMappingForWin32 Brazil_VisualClasses_slot World DosFileDirectory Transcript defaultFontMapperS IdentityDictionary areas Brazil_WidgetClasses_slot Brazil_TextClasses_slot Brazil_PlumbingClasses_slot BlackMarket mapping menus widgets manipulation tools Color OrderedCollection FileDirectory containers')
	 classVariables: 'MixinMetadata_Brazil EnclosingObjects_Brazil')!
	(Delta mirrorFor: #Brazil) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil) group: 'newspeak'!
	(Delta mirrorFor: #Brazil) comment: 'Brazil, which is the foundation of Newspeak UI (and is indeed named after the movie), could be best described as a multi-platform logical UI and layout framework. It provides the familiar widgets (''visuals'') such as Labels, Buttons, and ListBoxes, and container visuals for combining widgets and managing their layout. Unlike the UI frameworks of Squeak or VisualWorks, Brazil does not attempt to actually implement the widgets by emulating them. Instead it functions as a ''logical UI'' layer that builds and drives the equivalent ''physical UI'' made of native artifacts of the host platform.

Copyright 2008 Cadence Design Systems, Inc.
Copyright 2009 Ryan Macnak and other contributors.
   
Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0'!
	! (Delta mirrorFor: #Brazil) methodsFor: 'unclassified'!
	 theDesktop 

 self  theDesktopS ifNil:[ 

 self  theDesktopS: self  createTheDesktop.

].

^ self  theDesktopS.



! 
IdentityDictionary: IdentityDictionary_val IdentityDictionary := IdentityDictionary_val! 
 createTheDesktop 

^ self  containers Desktop withMapping: self  currentMappingClass new.



! 
abilities: abilities_val abilities := abilities_val! 
lastVisitedDirectoryS ^lastVisitedDirectoryS! 
WorldState: WorldState_val WorldState := WorldState_val! 
text: text_val text := text_val! 
Dictionary ^Dictionary! 
 newMorphicDesktop 

^ self  containers Desktop withMapping: self  MorphicAgentFactory new.



! 
MorphicAgentFactory ^MorphicAgentFactory! 
WeakArray ^WeakArray! 
Color ^Color! 
MappingClasses
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_MappingClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil 
			nestedMixins at: #Brazil_MappingClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_MappingClasses_slot := myNested.
		].
	^Brazil_MappingClasses_slot! 
FileDirectory ^FileDirectory! 
theDesktopS ^theDesktopS! 
SeqCltnReadStream: SeqCltnReadStream_val SeqCltnReadStream := SeqCltnReadStream_val! 
plumbing: plumbing_val plumbing := plumbing_val! 
SmallInteger: SmallInteger_val SmallInteger := SmallInteger_val! 
WeakArray: WeakArray_val WeakArray := WeakArray_val! 
AreaClasses
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil 
			nestedMixins at: #Brazil_AreaClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_slot := myNested.
		].
	^Brazil_AreaClasses_slot! 
WorldState ^WorldState! 
MorphicFontMapper ^MorphicFontMapper! 
SystemScope: SystemScope_val SystemScope := SystemScope_val! 
manipulation: manipulation_val manipulation := manipulation_val! 
 lastVisitedDirectory 

^ self  lastVisitedDirectoryS.



! 
Dictionary: Dictionary_val Dictionary := Dictionary_val! 
areas: areas_val areas := areas_val! 
BlackMarket: BlackMarket_val BlackMarket := BlackMarket_val! 
 theDesktop: aDesktop 

 self  theDesktopS: aDesktop.

^ self.



! 
MenuClasses
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_MenuClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil 
			nestedMixins at: #Brazil_MenuClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_MenuClasses_slot := myNested.
		].
	^Brazil_MenuClasses_slot! 
World ^World! 
Transcript ^Transcript! 
IdentityDictionary ^IdentityDictionary! 
TimeStamp: TimeStamp_val TimeStamp := TimeStamp_val! 
 defaultFontMapper 

 self  defaultFontMapperS ifNil:[ 

 self  defaultFontMapperS: self  MorphicFontMapper new.

].

^ self  defaultFontMapperS.



! 
menus: menus_val menus := menus_val! 
menus ^menus! 
DosFileDirectory ^DosFileDirectory! 
DosFileDirectory: DosFileDirectory_val DosFileDirectory := DosFileDirectory_val! 
FileDirectory: FileDirectory_val FileDirectory := FileDirectory_val! 
 lastVisitedDirectory: aString 

 self  lastVisitedDirectoryS: aString.

^ self.



! 
AbilityClasses
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AbilityClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil 
			nestedMixins at: #Brazil_AbilityClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AbilityClasses_slot := myNested.
		].
	^Brazil_AbilityClasses_slot! 
GradientFillStyle: GradientFillStyle_val GradientFillStyle := GradientFillStyle_val! 
OrderedCollection ^OrderedCollection! 
WidgetClasses
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil 
			nestedMixins at: #Brazil_WidgetClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_slot := myNested.
		].
	^Brazil_WidgetClasses_slot! 
ManipulationClasses
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ManipulationClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil 
			nestedMixins at: #Brazil_ManipulationClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ManipulationClasses_slot := myNested.
		].
	^Brazil_ManipulationClasses_slot! 
mapping ^mapping! 
theDesktopS: theDesktopS_val theDesktopS := theDesktopS_val! 
containers ^containers! 
mapping: mapping_val mapping := mapping_val! 
TimeStamp ^TimeStamp! 
World: World_val World := World_val! 
areas ^areas! 
 Brazil_1_init: platform 

 self defaultFontMapperS:nil.

 self theDesktopS:nil.

 self lastVisitedDirectoryS:nil.

 self Dictionary: platform collections Dictionary.

 self OrderedCollection: platform collections OrderedCollection.

 self IdentityDictionary: platform collections IdentityDictionary.

 self SeqCltnReadStream: platform streams SeqCltnReadStream.

 self CharacterReadWriteStream: platform streams CharacterReadWriteStream.

 self Transcript: platform streams TempTranscript new.

 self SmallInteger: platform blackMarket Kernel SmallInteger.

 self Rectangle: platform blackMarket Graphics Rectangle.

 self WeakArray: platform blackMarket Collections WeakArray.

 self GradientFillStyle: platform blackMarket Balloon GradientFillStyle.

 self Color: platform blackMarket Graphics Color.

 self FileDirectory: platform blackMarket Files FileDirectory.

 self DosFileDirectory: platform blackMarket Files DosFileDirectory.

 self TimeStamp: platform blackMarket Kernel TimeStamp.

 self SystemScope: platform blackMarket SystemScope SystemScope.

 self ZeroDivide: platform blackMarket Exceptions ZeroDivide.

 self MorphicFontMapper: platform blackMarket BrazilForMorphic MorphicFontMapper.

 self WorldState: platform blackMarket Morphic WorldState.

 self World: platform blackMarket World.

 self BlackMarket: platform blackMarket.

 self MorphicAgentFactory: platform blackMarket BrazilForMorphic MorphicAgentFactory.

 self BrazilMappingForWin32: platform blackMarket BrazilForWindows BrazilMappingForWin32.

 self plumbing: self  PlumbingClasses new.

 self areas: self  AreaClasses new.

 self abilities: self  AbilityClasses new.

 self manipulation: self  ManipulationClasses new.

 self mapping: self  MappingClasses new.

 self menus: self  MenuClasses new.

 self text: self  TextClasses new.

 self visuals: self  VisualClasses new.

 self widgets: self  WidgetClasses new.

 self containers: self  ContainerClasses new.

 self tools: self  ToolClasses new.

^ self.



! 
ZeroDivide: ZeroDivide_val ZeroDivide := ZeroDivide_val! 
 usingPlatform: platform 

 self Brazil_superInit_usingPlatform: platform.

 self Brazil_1_init: platform.

 self  visuals postInit.

^ self.



! 
ToolClasses
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ToolClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil 
			nestedMixins at: #Brazil_ToolClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ToolClasses_slot := myNested.
		].
	^Brazil_ToolClasses_slot! 
SeqCltnReadStream ^SeqCltnReadStream! 
plumbing ^plumbing! 
TextClasses
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_TextClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil 
			nestedMixins at: #Brazil_TextClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_TextClasses_slot := myNested.
		].
	^Brazil_TextClasses_slot! 
 resetDesktop 

 self  theDesktop:nil.

^ self.



! 
text ^text! 
GradientFillStyle ^GradientFillStyle! 
 currentMappingClass 

^ self  MorphicAgentFactory.



! 
Rectangle ^Rectangle! 
MorphicAgentFactory: MorphicAgentFactory_val MorphicAgentFactory := MorphicAgentFactory_val! 
 Brazil_superInit_usingPlatform: platform 

super  new.

^ self.



! 
ZeroDivide ^ZeroDivide! 
visuals: visuals_val visuals := visuals_val! 
 error: str 

 self Error signal: str.

^ self.



! 
Color: Color_val Color := Color_val! 
 flushDefaultFontMapper 

 self  defaultFontMapperS:nil.

^ self.



! 
CharacterReadWriteStream: CharacterReadWriteStream_val CharacterReadWriteStream := CharacterReadWriteStream_val! 
SystemScope ^SystemScope! 
abilities ^abilities! 
BrazilMappingForWin32 ^BrazilMappingForWin32! 
ContainerClasses
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil 
			nestedMixins at: #Brazil_ContainerClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_slot := myNested.
		].
	^Brazil_ContainerClasses_slot! 
visuals ^visuals! 
widgets ^widgets! 
CharacterReadWriteStream ^CharacterReadWriteStream! 
widgets: widgets_val widgets := widgets_val! 
defaultFontMapperS ^defaultFontMapperS! 
defaultFontMapperS: defaultFontMapperS_val defaultFontMapperS := defaultFontMapperS_val! 
VisualClasses
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_VisualClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil 
			nestedMixins at: #Brazil_VisualClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_VisualClasses_slot := myNested.
		].
	^Brazil_VisualClasses_slot! 
MorphicFontMapper: MorphicFontMapper_val MorphicFontMapper := MorphicFontMapper_val! 
OrderedCollection: OrderedCollection_val OrderedCollection := OrderedCollection_val! 
BlackMarket ^BlackMarket! 
PlumbingClasses
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil 
			nestedMixins at: #Brazil_PlumbingClasses.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_slot := myNested.
		].
	^Brazil_PlumbingClasses_slot! 
lastVisitedDirectoryS: lastVisitedDirectoryS_val lastVisitedDirectoryS := lastVisitedDirectoryS_val! 
containers: containers_val containers := containers_val! 
Transcript: Transcript_val Transcript := Transcript_val! 
manipulation ^manipulation! 
tools ^tools! 
BrazilMappingForWin32: BrazilMappingForWin32_val BrazilMappingForWin32 := BrazilMappingForWin32_val! 
SmallInteger ^SmallInteger! 
 newWindowsDesktop 

|  mapping |

 mapping := self  BrazilMappingForWin32 platform: self  BlackMarket.

 mapping useDoubleBuffering:true.

^ self  containers Desktop withMapping: mapping agentFactory.



! 
Rectangle: Rectangle_val Rectangle := Rectangle_val! 
tools: tools_val tools := tools_val! 
 !
	! (Delta mirrorFor: #Brazil) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil := eos !
	mixinMetadata: mmd MixinMetadata_Brazil := mmd !
	 usingPlatform: platform 

^ self basicNew usingPlatform: platform.



! 
		 !
	Brazil enclosingObjects: (Array with: nil)!
		Brazil metadata enclosingMixin: nil !
		Brazil mixinMetadata: Brazil metadata !
		Delta define: #Brazil_ManipulationClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' Brazil_ManipulationClasses_DragDropDispatcher_slot Brazil_ManipulationClasses_ArbitraryArityBlockWrapper_slot Brazil_ManipulationClasses_AdHocMessageReceiver_slot Brazil_ManipulationClasses_DragDropSession_slot Brazil_ManipulationClasses_DropTarget_slot Brazil_ManipulationClasses_AssociationDragSource_slot Brazil_ManipulationClasses_DragSource_slot Brazil_ManipulationClasses_DragDropTracker_slot')
	 classVariables: 'MixinMetadata_Brazil_ManipulationClasses EnclosingObjects_Brazil_ManipulationClasses')!
	(Delta mirrorFor: #Brazil_ManipulationClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ManipulationClasses) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ManipulationClasses) comment: #''!
	! (Delta mirrorFor: #Brazil_ManipulationClasses) methodsFor: 'unclassified'!
	AdHocMessageReceiver
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ManipulationClasses_AdHocMessageReceiver_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ManipulationClasses 
			nestedMixins at: #Brazil_ManipulationClasses_AdHocMessageReceiver.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ManipulationClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ManipulationClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ManipulationClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ManipulationClasses_AdHocMessageReceiver_slot := myNested.
		].
	^Brazil_ManipulationClasses_AdHocMessageReceiver_slot! 
DragDropDispatcher
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ManipulationClasses_DragDropDispatcher_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ManipulationClasses 
			nestedMixins at: #Brazil_ManipulationClasses_DragDropDispatcher.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ManipulationClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ManipulationClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ManipulationClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ManipulationClasses_DragDropDispatcher_slot := myNested.
		].
	^Brazil_ManipulationClasses_DragDropDispatcher_slot! 
DropTarget
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ManipulationClasses_DropTarget_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ManipulationClasses 
			nestedMixins at: #Brazil_ManipulationClasses_DropTarget.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ManipulationClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ManipulationClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ManipulationClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ManipulationClasses_DropTarget_slot := myNested.
		].
	^Brazil_ManipulationClasses_DropTarget_slot! 
 Brazil_ManipulationClasses_superInit_new 

super  new.

^ self.



! 
DragDropTracker
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ManipulationClasses_DragDropTracker_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ManipulationClasses 
			nestedMixins at: #Brazil_ManipulationClasses_DragDropTracker.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ManipulationClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ManipulationClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ManipulationClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ManipulationClasses_DragDropTracker_slot := myNested.
		].
	^Brazil_ManipulationClasses_DragDropTracker_slot! 
AssociationDragSource
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ManipulationClasses_AssociationDragSource_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ManipulationClasses 
			nestedMixins at: #Brazil_ManipulationClasses_AssociationDragSource.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ManipulationClasses Mirror on: self  DragSource)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ManipulationClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ManipulationClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ManipulationClasses_AssociationDragSource_slot := myNested.
		].
	^Brazil_ManipulationClasses_AssociationDragSource_slot! 
ArbitraryArityBlockWrapper
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ManipulationClasses_ArbitraryArityBlockWrapper_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ManipulationClasses 
			nestedMixins at: #Brazil_ManipulationClasses_ArbitraryArityBlockWrapper.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ManipulationClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ManipulationClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ManipulationClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ManipulationClasses_ArbitraryArityBlockWrapper_slot := myNested.
		].
	^Brazil_ManipulationClasses_ArbitraryArityBlockWrapper_slot! 
DragDropSession
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ManipulationClasses_DragDropSession_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ManipulationClasses 
			nestedMixins at: #Brazil_ManipulationClasses_DragDropSession.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ManipulationClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ManipulationClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ManipulationClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ManipulationClasses_DragDropSession_slot := myNested.
		].
	^Brazil_ManipulationClasses_DragDropSession_slot! 
DragSource
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ManipulationClasses_DragSource_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ManipulationClasses 
			nestedMixins at: #Brazil_ManipulationClasses_DragSource.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ManipulationClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ManipulationClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ManipulationClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ManipulationClasses_DragSource_slot := myNested.
		].
	^Brazil_ManipulationClasses_DragSource_slot! 
 Brazil_ManipulationClasses_1_init 

^ self.



! 
 new 

 self Brazil_ManipulationClasses_superInit_new.

 self Brazil_ManipulationClasses_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ManipulationClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ManipulationClasses := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ManipulationClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil metadata addNestedClass: Brazil_ManipulationClasses. ! 
	Brazil_ManipulationClasses metadata enclosingMixin: Brazil !
	Delta define: #Brazil_ManipulationClasses_AssociationDragSource as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' association')
	 classVariables: 'MixinMetadata_Brazil_ManipulationClasses_AssociationDragSource EnclosingObjects_Brazil_ManipulationClasses_AssociationDragSource')!
	(Delta mirrorFor: #Brazil_ManipulationClasses_AssociationDragSource) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_AssociationDragSource) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_AssociationDragSource) comment: #''!
	! (Delta mirrorFor: #Brazil_ManipulationClasses_AssociationDragSource) methodsFor: 'unclassified'!
	association ^association! 
 draggedKey: newKey 

 self  association key: newKey.

^ self.



! 
 draggedKey 

^ self  association key.



! 
 draggedValue 

^ self  association value.



! 
 Brazil_ManipulationClasses_AssociationDragSource_superInit_new 

super  new.

^ self.



! 
 draggedValue: newValue 

 self  association value: newValue.

^ self.



! 
association: association_val association := association_val! 
 Brazil_ManipulationClasses_AssociationDragSource_1_init 

 self association:(nil ->nil).

^ self.



! 
 identifyPayloadTo: identificationReceiver 

^ identificationReceiver  try:[ 

 identificationReceiver draggingAssociation: self  association.

] or:[ 

super  identifyPayloadTo: identificationReceiver.

].



! 
 new 

 self Brazil_ManipulationClasses_AssociationDragSource_superInit_new.

 self Brazil_ManipulationClasses_AssociationDragSource_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ManipulationClasses_AssociationDragSource) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ManipulationClasses_AssociationDragSource := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ManipulationClasses_AssociationDragSource := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ManipulationClasses metadata addNestedClass: Brazil_ManipulationClasses_AssociationDragSource. ! 
	Brazil_ManipulationClasses_AssociationDragSource metadata enclosingMixin: Brazil_ManipulationClasses !
	Delta define: #Brazil_ManipulationClasses_ArbitraryArityBlockWrapper as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' block')
	 classVariables: 'MixinMetadata_Brazil_ManipulationClasses_ArbitraryArityBlockWrapper EnclosingObjects_Brazil_ManipulationClasses_ArbitraryArityBlockWrapper')!
	(Delta mirrorFor: #Brazil_ManipulationClasses_ArbitraryArityBlockWrapper) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_ArbitraryArityBlockWrapper) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_ArbitraryArityBlockWrapper) comment: #''!
	! (Delta mirrorFor: #Brazil_ManipulationClasses_ArbitraryArityBlockWrapper) methodsFor: 'unclassified'!
	 Brazil_ManipulationClasses_ArbitraryArityBlockWrapper_superInit_new 

super  new.

^ self.



! 
  value: arg1 value: arg2 

^ self  block value:(( self Array new:2)  at:1 put: arg1; 

  at:2 put: arg2; 

 yourself).



! 
 valueWithArguments: arguments 

^ self  block value: arguments.



! 
  value: arg1 value: arg2 value: arg3 

^ self  block value:(( self Array new:3)  at:1 put: arg1; 

  at:2 put: arg2; 

  at:3 put: arg3; 

 yourself).



! 
  value: arg1 value: arg2 value: arg3 value: arg4 

^ self  block value:(( self Array new:4)  at:1 put: arg1; 

  at:2 put: arg2; 

  at:3 put: arg3; 

  at:4 put: arg4; 

 yourself).



! 
 value: arg1 

^ self  block value:(( self Array new:1)  at:1 put: arg1; 

 yourself).



! 
 value 

^ self  block value:( self Array new:0).



! 
 Brazil_ManipulationClasses_ArbitraryArityBlockWrapper_1_init 

 self block:nil.

^ self.



! 
block: block_val block := block_val! 
block ^block! 
 new 

 self Brazil_ManipulationClasses_ArbitraryArityBlockWrapper_superInit_new.

 self Brazil_ManipulationClasses_ArbitraryArityBlockWrapper_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ManipulationClasses_ArbitraryArityBlockWrapper) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ManipulationClasses_ArbitraryArityBlockWrapper := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ManipulationClasses_ArbitraryArityBlockWrapper := mmd !
	 block: b 

^ self  new block: b; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_ManipulationClasses metadata addNestedClass: Brazil_ManipulationClasses_ArbitraryArityBlockWrapper. ! 
	Brazil_ManipulationClasses_ArbitraryArityBlockWrapper metadata enclosingMixin: Brazil_ManipulationClasses !
	Delta define: #Brazil_ManipulationClasses_DropTarget as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' entryAction exitAction dropAction visual isActive stepAction')
	 classVariables: 'MixinMetadata_Brazil_ManipulationClasses_DropTarget EnclosingObjects_Brazil_ManipulationClasses_DropTarget')!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DropTarget) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DropTarget) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DropTarget) comment: #''!
	! (Delta mirrorFor: #Brazil_ManipulationClasses_DropTarget) methodsFor: 'unclassified'!
	isActive: isActive_val isActive := isActive_val! 
exitAction: exitAction_val exitAction := exitAction_val! 
dropAction: dropAction_val dropAction := dropAction_val! 
exitAction ^exitAction! 
stepAction ^stepAction! 
entryAction: entryAction_val entryAction := entryAction_val! 
 Brazil_ManipulationClasses_DropTarget_superInit_new 

super  new.

^ self.



! 
visual ^visual! 
 Brazil_ManipulationClasses_DropTarget_1_init 

 self isActive:false.

 self visual:nil.

 self entryAction:nil.

 self exitAction:nil.

 self stepAction:nil.

 self dropAction:nil.

^ self.



! 
 dragExitFrom: source 

 self  isActive:true.

 self  exitAction ifNotNil:[ : it | 

 it reentrant value: source.

].

^ self.



! 
 new 

 self Brazil_ManipulationClasses_DropTarget_superInit_new.

 self Brazil_ManipulationClasses_DropTarget_1_init.

^ self.



! 
entryAction ^entryAction! 
 dragDropFrom: source 

 self  isActive ifTrue:[ 

 self  isActive:false.

].

 self  dropAction ifNotNil:[ : it | 

 it reentrant value: source.

].

^ self.



! 
stepAction: stepAction_val stepAction := stepAction_val! 
 dragStepFrom: source 

 self  stepAction ifNotNil:[ : it | 

 it reentrant value: source.

].

^ self.



! 
 dragEnterFrom: source 

 self  isActive:true.

 self  entryAction ifNotNil:[ : it | 

 it reentrant value: source.

].

^ self.



! 
visual: visual_val visual := visual_val! 
isActive ^isActive! 
dropAction ^dropAction! 
 cleanup 

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ManipulationClasses_DropTarget) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ManipulationClasses_DropTarget := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ManipulationClasses_DropTarget := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ManipulationClasses metadata addNestedClass: Brazil_ManipulationClasses_DropTarget. ! 
	Brazil_ManipulationClasses_DropTarget metadata enclosingMixin: Brazil_ManipulationClasses !
	Delta define: #Brazil_ManipulationClasses_DragDropSession as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' targetRegistry tracker source')
	 classVariables: 'MixinMetadata_Brazil_ManipulationClasses_DragDropSession EnclosingObjects_Brazil_ManipulationClasses_DragDropSession')!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DragDropSession) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DragDropSession) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DragDropSession) comment: #''!
	! (Delta mirrorFor: #Brazil_ManipulationClasses_DragDropSession) methodsFor: 'unclassified'!
	 forTracker: client 

 self Brazil_ManipulationClasses_DragDropSession_superInit_forTracker: client.

 self Brazil_ManipulationClasses_DragDropSession_1_init: client.

^ self.



! 
targetRegistry: targetRegistry_val targetRegistry := targetRegistry_val! 
tracker: tracker_val tracker := tracker_val! 
 Brazil_ManipulationClasses_DragDropSession_1_init: client 

 self tracker: client.

 self source:nil.

 self targetRegistry: (EnclosingObjects_Brazil_ManipulationClasses_DragDropSession at: 2)  IdentityDictionary new.

^ self.



! 
  targetAt: key ifAbsentPut: absentBlock 

^ self  targetRegistry  at: key ifPresent:[ : e | 

nil.

] ifAbsentPut: absentBlock.



! 
source ^source! 
source: source_val source := source_val! 
targetRegistry ^targetRegistry! 
 Brazil_ManipulationClasses_DragDropSession_superInit_forTracker: client 

super  new.

^ self.



! 
 cleanup 

 self  targetRegistry do:[ : each | 

 each cleanup.

].

^ self.



! 
tracker ^tracker! 
 !
	! (Delta mirrorFor: #Brazil_ManipulationClasses_DragDropSession) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ManipulationClasses_DragDropSession := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ManipulationClasses_DragDropSession := mmd !
	 forTracker: client 

^ self basicNew forTracker: client.



! 
		 !
	Brazil_ManipulationClasses metadata addNestedClass: Brazil_ManipulationClasses_DragDropSession. ! 
	Brazil_ManipulationClasses_DragDropSession metadata enclosingMixin: Brazil_ManipulationClasses !
	Delta define: #Brazil_ManipulationClasses_DragDropTracker as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' visual currentTarget dragOrigin currentSession sourceCreationBlock')
	 classVariables: 'MixinMetadata_Brazil_ManipulationClasses_DragDropTracker EnclosingObjects_Brazil_ManipulationClasses_DragDropTracker')!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DragDropTracker) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DragDropTracker) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DragDropTracker) comment: #''!
	! (Delta mirrorFor: #Brazil_ManipulationClasses_DragDropTracker) methodsFor: 'unclassified'!
	 startDragging 

 self  createSession.

 self  setDraggedImage.

 self  establishTarget.

 self  deliverDragStepNotification.

^ self.



! 
 dragSource 

^ self  currentSession source.



! 
 deliverDragStepNotification 

 self  currentTarget  ifNotNil:[ : it | 

 it dragStepFrom: self  dragSource.

] ifNil:[ 

 self  dragSource dragStepOverWasteland.

].

^ self.



! 
 findTargetAtMousePoint 

|  where  window |

 where := self  desktop mousePoint.

 window := self  desktop windowAtPoint: where.

^ window ifNotNil:[ 

 window  findTargetForDragAt: where forSession: self  currentSession.

].



! 
 updateDraggedImage 

 self  visual desktop updateDraggedImagePosition.

^ self.



! 
 respondToMouseMove 

 self  dragOrigin notNil ifTrue:[ 

 self  isDragging  ifFalse:[ 

( self  isOutsideDragThreshold: self  visual mousePoint) ifTrue:[ 

 self  startDragging.

].

] ifTrue:[ 

 self  continueDragging.

].

].

^ self.



! 
currentSession: currentSession_val currentSession := currentSession_val! 
visual: visual_val visual := visual_val! 
 Brazil_ManipulationClasses_DragDropTracker_superInit_new 

super  new.

^ self.



! 
 continueDragging 

 self  updateDraggedImage.

 self  establishTarget.

 self  deliverDragStepNotification.

^ self.



! 
currentTarget: currentTarget_val currentTarget := currentTarget_val! 
 respondToMouseDown 

 self  dragOrigin: self  visual mousePoint.

 self  visual grabMouse.

^ self.



! 
dragOrigin: dragOrigin_val dragOrigin := dragOrigin_val! 
sourceCreationBlock: sourceCreationBlock_val sourceCreationBlock := sourceCreationBlock_val! 
 new 

 self Brazil_ManipulationClasses_DragDropTracker_superInit_new.

 self Brazil_ManipulationClasses_DragDropTracker_1_init.

^ self.



! 
 Brazil_ManipulationClasses_DragDropTracker_1_init 

 self visual:nil.

 self sourceCreationBlock:[ 

 (EnclosingObjects_Brazil_ManipulationClasses_DragDropTracker at: 1)  DragSource new.

].

 self dragOrigin:nil.

 self currentSession:nil.

 self currentTarget:nil.

^ self.



! 
 isOutsideDragThreshold: aPoint 

|  delta |

 delta := aPoint -  self  dragOrigin.

^ delta x abs > self  dragThreshold or:[ 

 delta y abs > self  dragThreshold.

].



! 
 respondToMouseUp 

 self  dragOrigin isNil ifFalse:[ 

 self  visual releaseMouse.

 self  isDragging ifTrue:[ 

 self  stopDragging.

].

].

 self  dragOrigin:nil.

^ self.



! 
currentTarget ^currentTarget! 
dragOrigin ^dragOrigin! 
 attachTo: aVisual 

 self  visual: aVisual.

 self  visual mouseDownAction:[ 

 self  respondToMouseDown.

]; 

 mouseMovedAction:[ 

 self  respondToMouseMove.

]; 

 mouseUpAction:[ 

 self  respondToMouseUp.

].

^ self.



! 
 establishTarget 

|  newTarget |

 newTarget := self  findTargetAtMousePoint.

 newTarget = self  currentTarget ifTrue:[ 

^ self.

].

 self  currentTarget ifNotNil:[ : it | 

 it dragExitFrom: self  dragSource.

].

 self  currentTarget: newTarget.

 self  currentTarget ifNotNil:[ : it | 

 it dragEnterFrom: self  dragSource.

].

^ self.



! 
sourceCreationBlock ^sourceCreationBlock! 
visual ^visual! 
 dragThreshold 

^5.



! 
 clearDraggedImage 

 self  visual desktop clearDraggedImage.

^ self.



! 
 setDraggedImage 

 self  dragSource draggedImage ifNotNil:[ : it | 

 self  visual desktop setDraggedImage: it.

].

^ self.



! 
 isDragging 

^ self  currentSession notNil.



! 
 desktop 

^ self  visual desktop.



! 
 stopDragging 

 self  establishTarget.

 self  clearDraggedImage.

 self  currentTarget  ifNotNil:[ : it | 

 it dragDropFrom: self  dragSource.

] ifNil:[ 

 self  dragSource dragDropOverWasteland.

].

 self  currentTarget:nil.

 self  currentSession cleanup.

 self  currentSession:nil.

^ self.



! 
currentSession ^currentSession! 
 createSession 

|  source |

 source := self  sourceCreationBlock value.

 source visual: self  visual.

 self  currentSession:( (EnclosingObjects_Brazil_ManipulationClasses_DragDropTracker at: 1)  DragDropSession forTracker: self).

 self  currentSession source: source.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ManipulationClasses_DragDropTracker) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ManipulationClasses_DragDropTracker := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ManipulationClasses_DragDropTracker := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ManipulationClasses metadata addNestedClass: Brazil_ManipulationClasses_DragDropTracker. ! 
	Brazil_ManipulationClasses_DragDropTracker metadata enclosingMixin: Brazil_ManipulationClasses !
	Delta define: #Brazil_ManipulationClasses_DragDropDispatcher as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' targetsX')
	 classVariables: 'MixinMetadata_Brazil_ManipulationClasses_DragDropDispatcher EnclosingObjects_Brazil_ManipulationClasses_DragDropDispatcher')!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DragDropDispatcher) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DragDropDispatcher) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DragDropDispatcher) comment: #''!
	! (Delta mirrorFor: #Brazil_ManipulationClasses_DragDropDispatcher) methodsFor: 'unclassified'!
	 includes: target 

^ self  targetsX includes: target.



! 
 add: target 

^ self  targetsX add: target.



! 
  findTargetForDragAt: windowRelativePoint forSession: session 

^ self  targetsX  detect:[ : each | 

 each visual windowRelativeBounds containsPoint: windowRelativePoint.

] ifNone:[ 

nil.

].



! 
 Brazil_ManipulationClasses_DragDropDispatcher_1_init 

 self targetsX: (EnclosingObjects_Brazil_ManipulationClasses_DragDropDispatcher at: 2)  OrderedCollection new.

^ self.



! 
 Brazil_ManipulationClasses_DragDropDispatcher_superInit_new 

super  new.

^ self.



! 
 remove: target 

^ self  targetsX remove: target.



! 
targetsX: targetsX_val targetsX := targetsX_val! 
targetsX ^targetsX! 
 new 

 self Brazil_ManipulationClasses_DragDropDispatcher_superInit_new.

 self Brazil_ManipulationClasses_DragDropDispatcher_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ManipulationClasses_DragDropDispatcher) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ManipulationClasses_DragDropDispatcher := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ManipulationClasses_DragDropDispatcher := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ManipulationClasses metadata addNestedClass: Brazil_ManipulationClasses_DragDropDispatcher. ! 
	Brazil_ManipulationClasses_DragDropDispatcher metadata enclosingMixin: Brazil_ManipulationClasses !
	Delta define: #Brazil_ManipulationClasses_DragSource as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' visualX draggedImage wastelandTarget')
	 classVariables: 'MixinMetadata_Brazil_ManipulationClasses_DragSource EnclosingObjects_Brazil_ManipulationClasses_DragSource')!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DragSource) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DragSource) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_DragSource) comment: #''!
	! (Delta mirrorFor: #Brazil_ManipulationClasses_DragSource) methodsFor: 'unclassified'!
	wastelandTarget: wastelandTarget_val wastelandTarget := wastelandTarget_val! 
visualX ^visualX! 
 dragStepOverWasteland 

 self  wastelandTarget ifNotNil:[ : it | 

 it dragStepFrom: self.

].

^ self.



! 
 dragDropOverWasteland 

 self  wastelandTarget ifNotNil:[ : it | 

 it dropFrom: self.

].

^ self.



! 
wastelandTarget ^wastelandTarget! 
draggedImage: draggedImage_val draggedImage := draggedImage_val! 
 Brazil_ManipulationClasses_DragSource_superInit_new 

super  new.

^ self.



! 
 visual: sourceVisual 

 self  visualX: sourceVisual.

^ self.



! 
draggedImage ^draggedImage! 
 visual 

^ self  visualX.



! 
 Brazil_ManipulationClasses_DragSource_1_init 

 self visualX:nil.

 self wastelandTarget:nil.

 self draggedImage:nil.

^ self.



! 
 identifyPayloadTo: identificationReceiver 

^ identificationReceiver  try:[ 

 identificationReceiver draggingGenericData: self.

] or:[ 

nil.

].



! 
visualX: visualX_val visualX := visualX_val! 
 new 

 self Brazil_ManipulationClasses_DragSource_superInit_new.

 self Brazil_ManipulationClasses_DragSource_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ManipulationClasses_DragSource) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ManipulationClasses_DragSource := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ManipulationClasses_DragSource := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ManipulationClasses metadata addNestedClass: Brazil_ManipulationClasses_DragSource. ! 
	Brazil_ManipulationClasses_DragSource metadata enclosingMixin: Brazil_ManipulationClasses !
	Delta define: #Brazil_ManipulationClasses_AdHocMessageReceiver as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' dispatchAlternative understoodSelectors')
	 classVariables: 'MixinMetadata_Brazil_ManipulationClasses_AdHocMessageReceiver EnclosingObjects_Brazil_ManipulationClasses_AdHocMessageReceiver')!
	(Delta mirrorFor: #Brazil_ManipulationClasses_AdHocMessageReceiver) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_AdHocMessageReceiver) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ManipulationClasses_AdHocMessageReceiver) comment: #''!
	! (Delta mirrorFor: #Brazil_ManipulationClasses_AdHocMessageReceiver) methodsFor: 'unclassified'!
	 Brazil_ManipulationClasses_AdHocMessageReceiver_superInit_new 

super  new.

^ self.



! 
 Brazil_ManipulationClasses_AdHocMessageReceiver_1_init 

 self understoodSelectors: (EnclosingObjects_Brazil_ManipulationClasses_AdHocMessageReceiver at: 2)  Dictionary new.

 self dispatchAlternative:nil.

^ self.



! 
dispatchAlternative ^dispatchAlternative! 
  try: dispatchBlock or: alternativeBlock 

 self  dispatchAlternative: alternativeBlock.

^ dispatchBlock ensure:[ 

 self  dispatchAlternative:nil.

].



! 
  receive: selector using: block 

( block class == (EnclosingObjects_Brazil_ManipulationClasses_AdHocMessageReceiver at: 1)  ArbitraryArityBlockWrapper or:[ 

 selector numArgs = block numArgs.

]) ifFalse:[ 

^ self Error new signal:'selector and block arity mismatch'.

].

 self  understoodSelectors  at: selector put: block.

^ self.



! 
 doesNotUnderstand: message 

|  handler |

 handler := self  understoodSelectors  at: message selector ifAbsent:[ 

^ self  dispatchAlternative  ifNotNil:[ : it | 

 self  dispatchAlternative:nil.

 it value.

] ifNil:[ 

super  doesNotUnderstand: message.

].

].

^ handler valueWithArguments: message arguments.



! 
understoodSelectors: understoodSelectors_val understoodSelectors := understoodSelectors_val! 
dispatchAlternative: dispatchAlternative_val dispatchAlternative := dispatchAlternative_val! 
understoodSelectors ^understoodSelectors! 
 new 

 self Brazil_ManipulationClasses_AdHocMessageReceiver_superInit_new.

 self Brazil_ManipulationClasses_AdHocMessageReceiver_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ManipulationClasses_AdHocMessageReceiver) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ManipulationClasses_AdHocMessageReceiver := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ManipulationClasses_AdHocMessageReceiver := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ManipulationClasses metadata addNestedClass: Brazil_ManipulationClasses_AdHocMessageReceiver. ! 
	Brazil_ManipulationClasses_AdHocMessageReceiver metadata enclosingMixin: Brazil_ManipulationClasses !
	Delta define: #Brazil_TextClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' Brazil_TextClasses_MarkedUpString_slot Brazil_TextClasses_Markup_slot Brazil_TextClasses_RangeMap_slot')
	 classVariables: 'MixinMetadata_Brazil_TextClasses EnclosingObjects_Brazil_TextClasses')!
	(Delta mirrorFor: #Brazil_TextClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_TextClasses) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_TextClasses) comment: 'This module contains the framework for defining and working with marked-up (stylized) text, to end Brazil''s dependence on the Text class from Smalltalk.'!
	! (Delta mirrorFor: #Brazil_TextClasses) methodsFor: 'unclassified'!
	Markup
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_TextClasses_Markup_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_TextClasses 
			nestedMixins at: #Brazil_TextClasses_Markup.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_TextClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_TextClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_TextClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_TextClasses_Markup_slot := myNested.
		].
	^Brazil_TextClasses_Markup_slot! 
RangeMap
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_TextClasses_RangeMap_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_TextClasses 
			nestedMixins at: #Brazil_TextClasses_RangeMap.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_TextClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_TextClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_TextClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_TextClasses_RangeMap_slot := myNested.
		].
	^Brazil_TextClasses_RangeMap_slot! 
 Brazil_TextClasses_1_init 

^ self.



! 
MarkedUpString
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_TextClasses_MarkedUpString_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_TextClasses 
			nestedMixins at: #Brazil_TextClasses_MarkedUpString.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_TextClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_TextClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_TextClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_TextClasses_MarkedUpString_slot := myNested.
		].
	^Brazil_TextClasses_MarkedUpString_slot! 
 Brazil_TextClasses_superInit_new 

super  new.

^ self.



! 
 new 

 self Brazil_TextClasses_superInit_new.

 self Brazil_TextClasses_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_TextClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_TextClasses := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_TextClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil metadata addNestedClass: Brazil_TextClasses. ! 
	Brazil_TextClasses metadata enclosingMixin: Brazil !
	Delta define: #Brazil_TextClasses_MarkedUpString as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' string markups')
	 classVariables: 'MixinMetadata_Brazil_TextClasses_MarkedUpString EnclosingObjects_Brazil_TextClasses_MarkedUpString')!
	(Delta mirrorFor: #Brazil_TextClasses_MarkedUpString) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_TextClasses_MarkedUpString) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_TextClasses_MarkedUpString) comment: 'This class defines String-like behavior, however the instance also keeps track of Markups associated with itself. The receiver is intended to be used as an immutable string, with the contents and the markups specified at instance creation time and never changed afterwards.'!
	! (Delta mirrorFor: #Brazil_TextClasses_MarkedUpString) methodsFor: 'unclassified'!
	 markupsAt: index 

^ self  markups select:[ : some | 

 some includes: index.

].



! 
 asString 

^ self  string.



! 
 rangesDo: block 

|  map |

 map := (EnclosingObjects_Brazil_TextClasses_MarkedUpString at: 1)  RangeMap  markups: self  markups totalSize: self  string size.

^ map rangesDo: block.



! 
  Brazil_TextClasses_MarkedUpString_superInit_contents: theContents markups: theMarkups 

super  new.

^ self.



! 
  markupsAt: index do: block 

 self  markups do:[ : each | 

( each includes: index) ifTrue:[ 

 block value: each.

].

].

^ self.



! 
markups: markups_val markups := markups_val! 
string ^string! 
string: string_val string := string_val! 
 markupChangesDo: block 

|  map |

 map := (EnclosingObjects_Brazil_TextClasses_MarkedUpString at: 1)  RangeMap  markups: self  markups totalSize: self  string size.

^ map markupChangesDo: block.



! 
 at: index 

^ self  string at: index.



! 
  contents: theContents markups: theMarkups 

 self  Brazil_TextClasses_MarkedUpString_superInit_contents: theContents markups: theMarkups.

 self  Brazil_TextClasses_MarkedUpString_1_init_contents: theContents markups: theMarkups.

^ self.



! 
  Brazil_TextClasses_MarkedUpString_1_init_contents: theContents markups: theMarkups 

 self string: theContents.

 self markups: theMarkups.

^ self.



! 
markups ^markups! 
 size 

^ self  string size.



! 
 !
	! (Delta mirrorFor: #Brazil_TextClasses_MarkedUpString) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_TextClasses_MarkedUpString := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_TextClasses_MarkedUpString := mmd !
	  contents: string allMarkedAs: markupClass 

^ self   contents: string markups:(( self Array new:1)  at:1 put:( markupClass  from:1 size: string size); 

 yourself).



! 
		  contents: theContents markups: theMarkups 

^ self basicNew  contents: theContents markups: theMarkups.



! 
		 !
	Brazil_TextClasses metadata addNestedClass: Brazil_TextClasses_MarkedUpString. ! 
	Brazil_TextClasses_MarkedUpString metadata enclosingMixin: Brazil_TextClasses !
	Delta define: #Brazil_TextClasses_RangeMap as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' totalSize markupChangeMap markups')
	 classVariables: 'MixinMetadata_Brazil_TextClasses_RangeMap EnclosingObjects_Brazil_TextClasses_RangeMap')!
	(Delta mirrorFor: #Brazil_TextClasses_RangeMap) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_TextClasses_RangeMap) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_TextClasses_RangeMap) comment: 'Given a collection of markups, calculates the ranges such that the set of markups effective within each range is the same. The instances are supposed to be single-use: they compute the map as part of initialization, then only report the map (see #rangesDo:). If a map needs to be updated, create a new instance.'!
	! (Delta mirrorFor: #Brazil_TextClasses_RangeMap) methodsFor: 'unclassified'!
	 populateMarkupChangeMap 

|  sentinel  starts  ends |

 self markupChangeMap: (EnclosingObjects_Brazil_TextClasses_RangeMap at: 2)  OrderedCollection new.

 sentinel := (EnclosingObjects_Brazil_TextClasses_RangeMap at: 1)  Markup  from: (EnclosingObjects_Brazil_TextClasses_RangeMap at: 2)  SmallInteger maxVal size:0.

 starts := (EnclosingObjects_Brazil_TextClasses_RangeMap at: 2)  SeqCltnReadStream on:( self  markupStarts copyWith: sentinel).

 ends := (EnclosingObjects_Brazil_TextClasses_RangeMap at: 2)  SeqCltnReadStream on:( self  markupEnds copyWith: sentinel).

1  to: self  totalSize +1 do:[ : index | 

( starts peek firstIndex = index or:[ 

 ends peek nextIndex = index.

]) ifTrue:[ 

|  added  removed |

 added := (EnclosingObjects_Brazil_TextClasses_RangeMap at: 2)  OrderedCollection new.

 removed := (EnclosingObjects_Brazil_TextClasses_RangeMap at: 2)  OrderedCollection new.

[ 

 starts peek firstIndex = index.

] whileTrue:[ 

 added add: starts next.

].

[ 

 ends peek nextIndex = index.

] whileTrue:[ 

 removed add: ends next.

].

 self  markupChangeMap add:(( self Array new:3)  at:1 put: index; 

  at:2 put: added asArray; 

  at:3 put: removed asArray; 

 yourself).

].

].

^ self.



! 
 rangesDo: block 

|  start  effectiveMarkups |

 start :=1.

 effectiveMarkups := (EnclosingObjects_Brazil_TextClasses_RangeMap at: 2)  OrderedCollection new.

 self  markupChangesDo:[ : index : added : removed | 

 index =1 ifFalse:[ 

 block  value: start value: index -  start value: effectiveMarkups asArray.

].

 start := index.

 effectiveMarkups addAll: added.

( added select:[ : any | 

 removed includes: any.

]) isEmpty not ifTrue:[ 

 block  value: start value:0 value: effectiveMarkups asArray.

].

 effectiveMarkups removeAll: removed.

].

 start <= self  totalSize ifTrue:[ 

 block  value: start value: self  totalSize -  start +1 value: effectiveMarkups asArray.

].

^ self.



! 
markupChangeMap: markupChangeMap_val markupChangeMap := markupChangeMap_val! 
markups: markups_val markups := markups_val! 
totalSize ^totalSize! 
  Brazil_TextClasses_RangeMap_1_init_markups: theMarkups totalSize: theTotalSize 

 self markups: theMarkups.

 self totalSize: theTotalSize.

 self markupChangeMap: (EnclosingObjects_Brazil_TextClasses_RangeMap at: 2)  OrderedCollection new.

^ self.



! 
markups ^markups! 
  markups: theMarkups totalSize: theTotalSize 

 self  Brazil_TextClasses_RangeMap_superInit_markups: theMarkups totalSize: theTotalSize.

 self  Brazil_TextClasses_RangeMap_1_init_markups: theMarkups totalSize: theTotalSize.

 self  populateMarkupChangeMap.

^ self.



! 
 markupEnds 

^ self  markups asSortedCollection:[ : a : b | 

 a nextIndex <= b nextIndex.

].



! 
markupChangeMap ^markupChangeMap! 
  Brazil_TextClasses_RangeMap_superInit_markups: theMarkups totalSize: theTotalSize 

super  new.

^ self.



! 
totalSize: totalSize_val totalSize := totalSize_val! 
 markupChangesDo: block 

 self  markupChangeMap do:[ : each | 

 block valueWithArguments: each.

].

^ self.



! 
 markupStarts 

^ self  markups asSortedCollection:[ : a : b | 

 a firstIndex <= b firstIndex.

].



! 
 !
	! (Delta mirrorFor: #Brazil_TextClasses_RangeMap) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_TextClasses_RangeMap := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_TextClasses_RangeMap := mmd !
	  markups: theMarkups totalSize: theTotalSize 

^ self basicNew  markups: theMarkups totalSize: theTotalSize.



! 
		 !
	Brazil_TextClasses metadata addNestedClass: Brazil_TextClasses_RangeMap. ! 
	Brazil_TextClasses_RangeMap metadata enclosingMixin: Brazil_TextClasses !
	Delta define: #Brazil_TextClasses_Markup as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' firstIndex size')
	 classVariables: 'MixinMetadata_Brazil_TextClasses_Markup EnclosingObjects_Brazil_TextClasses_Markup')!
	(Delta mirrorFor: #Brazil_TextClasses_Markup) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_TextClasses_Markup) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_TextClasses_Markup) comment: 'This is the superclass of markups, defining the common behavior of keeping track of the character range the markup applies to. The range is usually specified as the index of the first character and the number of characters included in the range. This is the method preferred to using the first and last indices, to avoid ambiguities over whether the last index is included in the range or not. However, last index-based creation is supported as well. The class is not abstract, however it defines no useful behavior other than range tracking.'!
	! (Delta mirrorFor: #Brazil_TextClasses_Markup) methodsFor: 'unclassified'!
	 includes: index 

^ index -  self  firstIndex  between:0 and: self  size - 1.



! 
  Brazil_TextClasses_Markup_1_init_from: theFirstIndex size: theSize 

 self firstIndex: theFirstIndex.

 self size: theSize.

^ self.



! 
firstIndex: firstIndex_val firstIndex := firstIndex_val! 
firstIndex ^firstIndex! 
  from: theFirstIndex size: theSize 

 self  Brazil_TextClasses_Markup_superInit_from: theFirstIndex size: theSize.

 self  Brazil_TextClasses_Markup_1_init_from: theFirstIndex size: theSize.

^ self.



! 
 contains: another 

^( self  includes: another firstIndex) and:[ 

 self  includes: another lastIndex.

].



! 
 nextIndex 

^ self  firstIndex + self  size.



! 
 hash 

^ self  firstIndex hash bitXor: self  size hash.



! 
 isEmpty 

^ self  size =0.



! 
 lastIndex 

^ self  firstIndex + self  size - 1.



! 
size: size_val size := size_val! 
 printOn: aStream 

 aStream nextPutAll:'<'; 

 nextPutAll: self class name; 

 nextPutAll:' '; 

 print: self  firstIndex; 

 nextPutAll:'-'; 

 print: self  lastIndex; 

 nextPutAll:'>'.

^ self.



! 
size ^size! 
  Brazil_TextClasses_Markup_superInit_from: theFirstIndex size: theSize 

super  new.

^ self.



! 
 = another 

^ self class = another class and:[ 

 self  firstIndex = another firstIndex and:[ 

 self  size = another size.

].

].



! 
 !
	! (Delta mirrorFor: #Brazil_TextClasses_Markup) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_TextClasses_Markup := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_TextClasses_Markup := mmd !
	  from: startIndex to: endIndexExclusive 

^ self  from: startIndex size: endIndexExclusive -  startIndex.



! 
		  from: theFirstIndex size: theSize 

^ self basicNew  from: theFirstIndex size: theSize.



! 
		  from: startIndex through: endIndexInclusive 

^ self  from: startIndex size: endIndexInclusive -  startIndex +1.



! 
		 !
	Brazil_TextClasses metadata addNestedClass: Brazil_TextClasses_Markup. ! 
	Brazil_TextClasses_Markup metadata enclosingMixin: Brazil_TextClasses !
	Delta define: #Brazil_MenuClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' Brazil_MenuClasses_SeparatorItem_slot Brazil_MenuClasses_SubmenuItem_slot Brazil_MenuClasses_Menu_slot Brazil_MenuClasses_MenuItem_slot')
	 classVariables: 'MixinMetadata_Brazil_MenuClasses EnclosingObjects_Brazil_MenuClasses')!
	(Delta mirrorFor: #Brazil_MenuClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_MenuClasses) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_MenuClasses) comment: #''!
	! (Delta mirrorFor: #Brazil_MenuClasses) methodsFor: 'unclassified'!
	MenuItem
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_MenuClasses_MenuItem_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_MenuClasses 
			nestedMixins at: #Brazil_MenuClasses_MenuItem.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_MenuClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_MenuClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_MenuClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_MenuClasses_MenuItem_slot := myNested.
		].
	^Brazil_MenuClasses_MenuItem_slot! 
SeparatorItem
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_MenuClasses_SeparatorItem_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_MenuClasses 
			nestedMixins at: #Brazil_MenuClasses_SeparatorItem.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_MenuClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_MenuClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_MenuClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_MenuClasses_SeparatorItem_slot := myNested.
		].
	^Brazil_MenuClasses_SeparatorItem_slot! 
 Brazil_MenuClasses_1_init 

^ self.



! 
Menu
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_MenuClasses_Menu_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_MenuClasses 
			nestedMixins at: #Brazil_MenuClasses_Menu.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_MenuClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_MenuClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_MenuClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_MenuClasses_Menu_slot := myNested.
		].
	^Brazil_MenuClasses_Menu_slot! 
SubmenuItem
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_MenuClasses_SubmenuItem_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_MenuClasses 
			nestedMixins at: #Brazil_MenuClasses_SubmenuItem.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_MenuClasses Mirror on: self  MenuItem)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_MenuClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_MenuClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_MenuClasses_SubmenuItem_slot := myNested.
		].
	^Brazil_MenuClasses_SubmenuItem_slot! 
 Brazil_MenuClasses_superInit_new 

super  new.

^ self.



! 
 new 

 self Brazil_MenuClasses_superInit_new.

 self Brazil_MenuClasses_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_MenuClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_MenuClasses := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_MenuClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil metadata addNestedClass: Brazil_MenuClasses. ! 
	Brazil_MenuClasses metadata enclosingMixin: Brazil !
	Delta define: #Brazil_MenuClasses_Menu as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' ownerVisual items agent')
	 classVariables: 'MixinMetadata_Brazil_MenuClasses_Menu EnclosingObjects_Brazil_MenuClasses_Menu')!
	(Delta mirrorFor: #Brazil_MenuClasses_Menu) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_MenuClasses_Menu) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_MenuClasses_Menu) comment: #''!
	! (Delta mirrorFor: #Brazil_MenuClasses_Menu) methodsFor: 'unclassified'!
	  add: newItem before: existingItem 

 self  items  add: newItem before: existingItem.

 newItem menu: self.

^ self.



! 
  add: newItem afterKey: key 

|  item |

 item := self  at: key ifAbsent:[ 

nil.

].

 item isNil  ifTrue:[ 

 self  add: newItem.

] ifFalse:[ 

 self   add: newItem after: item.

].

^ self.



! 
 respondToItemChange: anItem 

 self  agent ifNotNil:[ 

 self  agent respondToMenuChange.

].

^ self.



! 
items: items_val items := items_val! 
 createAgentUsing: aMapping 

 self  agent:( aMapping createAgentForMenu: self).

^ self.



! 
items ^items! 
agent: agent_val agent := agent_val! 
ownerVisual ^ownerVisual! 
 dispatchTo: client 

 self  items do:[ : each | 

 each dispatchTo: client.

].

^ self.



! 
 addFirst: newItem 

 self  items addFirst: newItem.

 newItem menu: self.

^ self.



! 
  detect: aBlock ifNone: failureBlock 

^ self  items  detect: aBlock ifNone: failureBlock.



! 
 includes: anItem 

^ self  items includes: anItem.



! 
 add: newItem 

 self  items add: newItem.

 newItem menu: self.

^ self.



! 
  add: newItem beforeKey: key 

|  item |

 item := self  at: key ifAbsent:[ 

nil.

].

 item isNil  ifTrue:[ 

 self  addFirst: newItem.

] ifFalse:[ 

 self   add: newItem before: item.

].

^ self.



! 
  add: newItem after: existingItem 

 self  items  add: newItem after: existingItem.

 newItem menu: self.

^ self.



! 
 Brazil_MenuClasses_Menu_1_init: v 

 self ownerVisual: v.

 self items: (EnclosingObjects_Brazil_MenuClasses_Menu at: 2)  OrderedCollection new.

 self agent:nil.

^ self.



! 
 mapUsing: aMapping 

 self  agent:( aMapping createAgentForMenu: self).

^ self.



! 
  openIn: desktop above: window 

 self  openIn: desktop at: desktop mousePoint above: window.

^ self.



! 
 at: key 

^ self  items detect:[ : some | 

 some key = key.

].



! 
 submenuItemsDo: aBlock 

 self  items do:[ : each | 

 each isSubmenuItem ifTrue:[ 

 aBlock value: each.

].

].

^ self.



! 
 Brazil_MenuClasses_Menu_superInit_forVisual: v 

super  new.

^ self.



! 
 remove: anItem 

^ self  items remove: anItem.



! 
 includesKey: key 

 self   detect:[ : some | 

 some key = key.

] ifNone:[ 

^false.

].

^true.



! 
 forVisual: v 

 self Brazil_MenuClasses_Menu_superInit_forVisual: v.

 self Brazil_MenuClasses_Menu_1_init: v.

^ self.



! 
  remove: anItem ifAbsent: failureBlock 

^ self  items  remove: anItem ifAbsent: failureBlock.



! 
 isMapped 

^ self  agent notNil.



! 
  openIn: desktop at: globalTopLeft above: window 

 self  isMapped ifFalse:[ 

 self  mapUsing: desktop mapping.

].

 self  agent  openAt: globalTopLeft above: window.

^ self.



! 
  openIn: desktop at: globalTopLeft 

 self  isMapped ifFalse:[ 

 self  mapUsing: desktop mapping.

].

 self  agent openAt: globalTopLeft.

^ self.



! 
 detect: aBlock 

^ self  items detect: aBlock.



! 
ownerVisual: ownerVisual_val ownerVisual := ownerVisual_val! 
 openIn: desktop 

 self  openIn: desktop at: desktop mousePoint.

^ self.



! 
agent ^agent! 
  at: key ifAbsent: failureBlock 

^ self  items  detect:[ : some | 

 some key = key.

] ifNone: failureBlock.



! 
 !
	! (Delta mirrorFor: #Brazil_MenuClasses_Menu) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_MenuClasses_Menu := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_MenuClasses_Menu := mmd !
	 forVisual: v 

^ self basicNew forVisual: v.



! 
		 new 

^ self  forVisual:nil.



! 
		 !
	Brazil_MenuClasses metadata addNestedClass: Brazil_MenuClasses_Menu. ! 
	Brazil_MenuClasses_Menu metadata enclosingMixin: Brazil_MenuClasses !
	Delta define: #Brazil_MenuClasses_SeparatorItem as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' menu key')
	 classVariables: 'MixinMetadata_Brazil_MenuClasses_SeparatorItem EnclosingObjects_Brazil_MenuClasses_SeparatorItem')!
	(Delta mirrorFor: #Brazil_MenuClasses_SeparatorItem) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_MenuClasses_SeparatorItem) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_MenuClasses_SeparatorItem) comment: #''!
	! (Delta mirrorFor: #Brazil_MenuClasses_SeparatorItem) methodsFor: 'unclassified'!
	menu: menu_val menu := menu_val! 
 Brazil_MenuClasses_SeparatorItem_superInit_new 

super  new.

^ self.



! 
menu ^menu! 
key ^key! 
key: key_val key := key_val! 
 Brazil_MenuClasses_SeparatorItem_1_init 

 self menu:nil.

 self key:nil.

^ self.



! 
 isSubmenuItem 

^false.



! 
 dispatchTo: client 

 client visitSeparatorItem: self.

^ self.



! 
 new 

 self Brazil_MenuClasses_SeparatorItem_superInit_new.

 self Brazil_MenuClasses_SeparatorItem_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_MenuClasses_SeparatorItem) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_MenuClasses_SeparatorItem := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_MenuClasses_SeparatorItem := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_MenuClasses metadata addNestedClass: Brazil_MenuClasses_SeparatorItem. ! 
	Brazil_MenuClasses_SeparatorItem metadata enclosingMixin: Brazil_MenuClasses !
	Delta define: #Brazil_MenuClasses_SubmenuItem as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' submenu')
	 classVariables: 'MixinMetadata_Brazil_MenuClasses_SubmenuItem EnclosingObjects_Brazil_MenuClasses_SubmenuItem')!
	(Delta mirrorFor: #Brazil_MenuClasses_SubmenuItem) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_MenuClasses_SubmenuItem) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_MenuClasses_SubmenuItem) comment: #''!
	! (Delta mirrorFor: #Brazil_MenuClasses_SubmenuItem) methodsFor: 'unclassified'!
	 isSubmenuItem 

^true.



! 
submenu: submenu_val submenu := submenu_val! 
submenu ^submenu! 
 dispatchTo: client 

 client visitSubmenuItem: self.

^ self.



! 
  Brazil_MenuClasses_SubmenuItem_superInit_key: aSymbol label: aString action: aBlock 

super   key: aSymbol label: aString action: aBlock.

^ self.



! 
  Brazil_MenuClasses_SubmenuItem_1_init_key: aSymbol label: aString action: aBlock 

 self submenu:nil.

^ self.



! 
  key: aSymbol label: aString action: aBlock 

 self  Brazil_MenuClasses_SubmenuItem_superInit_key: aSymbol label: aString action: aBlock.

 self  Brazil_MenuClasses_SubmenuItem_1_init_key: aSymbol label: aString action: aBlock.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_MenuClasses_SubmenuItem) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_MenuClasses_SubmenuItem := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_MenuClasses_SubmenuItem := mmd !
	  label: aString submenu: sm 

^( self  key:nil label: aString action:[ 

nil.

]) submenu: sm.



! 
		  key: aSymbol label: aString action: aBlock 

^ self basicNew  key: aSymbol label: aString action: aBlock.



! 
		 !
	Brazil_MenuClasses metadata addNestedClass: Brazil_MenuClasses_SubmenuItem. ! 
	Brazil_MenuClasses_SubmenuItem metadata enclosingMixin: Brazil_MenuClasses !
	Delta define: #Brazil_MenuClasses_MenuItem as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' actionS labelS iconS enabled visible menu key')
	 classVariables: 'MixinMetadata_Brazil_MenuClasses_MenuItem EnclosingObjects_Brazil_MenuClasses_MenuItem')!
	(Delta mirrorFor: #Brazil_MenuClasses_MenuItem) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_MenuClasses_MenuItem) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_MenuClasses_MenuItem) comment: #''!
	! (Delta mirrorFor: #Brazil_MenuClasses_MenuItem) methodsFor: 'unclassified'!
	labelS ^labelS! 
actionS ^actionS! 
key ^key! 
 dispatchTo: client 

 client visitMenuItem: self.

^ self.



! 
  key: aSymbol label: aString action: aBlock 

 self  Brazil_MenuClasses_MenuItem_superInit_key: aSymbol label: aString action: aBlock.

 self  Brazil_MenuClasses_MenuItem_1_init_key: aSymbol label: aString action: aBlock.

^ self.



! 
 icon: newIcon 

 self  iconS: newIcon.

 self  informMenuOfChange.

^ self.



! 
  Brazil_MenuClasses_MenuItem_1_init_key: aSymbol label: aString action: aBlock 

 self menu:nil.

 self iconS:nil.

 self key: aSymbol.

 self labelS: aString.

 self actionS: aBlock.

 self enabled:true.

 self visible:true.

^ self.



! 
visible: visible_val visible := visible_val! 
 action 

^ self  actionS.



! 
labelS: labelS_val labelS := labelS_val! 
 icon 

^ self  iconS.



! 
iconS: iconS_val iconS := iconS_val! 
menu: menu_val menu := menu_val! 
enabled ^enabled! 
visible ^visible! 
enabled: enabled_val enabled := enabled_val! 
 informMenuOfChange 

 self  menu ifNotNil:[ 

 self  menu respondToItemChange: self.

].

^ self.



! 
actionS: actionS_val actionS := actionS_val! 
key: key_val key := key_val! 
 isSubmenuItem 

^false.



! 
 label 

^ self  labelS.



! 
  Brazil_MenuClasses_MenuItem_superInit_key: aSymbol label: aString action: aBlock 

super  new.

^ self.



! 
iconS ^iconS! 
 label: newLabel 

 self  labelS: newLabel.

 self  informMenuOfChange.

^ self.



! 
menu ^menu! 
 !
	! (Delta mirrorFor: #Brazil_MenuClasses_MenuItem) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_MenuClasses_MenuItem := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_MenuClasses_MenuItem := mmd !
	  label: aString action: aBlock 

^ self   key:nil label: aString action: aBlock.



! 
		  key: aSymbol label: aString action: aBlock 

^ self basicNew  key: aSymbol label: aString action: aBlock.



! 
		 !
	Brazil_MenuClasses metadata addNestedClass: Brazil_MenuClasses_MenuItem. ! 
	Brazil_MenuClasses_MenuItem metadata enclosingMixin: Brazil_MenuClasses !
	Delta define: #Brazil_PlumbingClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor_slot Brazil_PlumbingClasses_ModifierKeyState_slot Brazil_PlumbingClasses_HierarchicalReporter_slot Brazil_PlumbingClasses_InformationRetriever_slot Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor_slot Brazil_PlumbingClasses_Font_slot Brazil_PlumbingClasses_Outlet_slot Brazil_PlumbingClasses_BrazilWeakStorage_slot Brazil_PlumbingClasses_Gradient_slot Brazil_PlumbingClasses_Attribute_slot Brazil_PlumbingClasses_Duct_slot Brazil_PlumbingClasses_MappableHolder_slot Brazil_PlumbingClasses_MessageRecorder_slot Brazil_PlumbingClasses_Holder_slot')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses EnclosingObjects_Brazil_PlumbingClasses')!
	(Delta mirrorFor: #Brazil_PlumbingClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses) methodsFor: 'unclassified'!
	MappableHolder
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_MappableHolder_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_MappableHolder.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self  Holder)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_MappableHolder_slot := myNested.
		].
	^Brazil_PlumbingClasses_MappableHolder_slot! 
 Brazil_PlumbingClasses_superInit_new 

super  new.

^ self.



! 
MessageRecorder
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_MessageRecorder_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_MessageRecorder.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_MessageRecorder_slot := myNested.
		].
	^Brazil_PlumbingClasses_MessageRecorder_slot! 
Outlet
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_Outlet_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_Outlet.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_Outlet_slot := myNested.
		].
	^Brazil_PlumbingClasses_Outlet_slot! 
Duct
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_Duct_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_Duct.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_Duct_slot := myNested.
		].
	^Brazil_PlumbingClasses_Duct_slot! 
HierarchicalReporter
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_HierarchicalReporter_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_HierarchicalReporter.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_HierarchicalReporter_slot := myNested.
		].
	^Brazil_PlumbingClasses_HierarchicalReporter_slot! 
Gradient
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_Gradient_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_Gradient.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_Gradient_slot := myNested.
		].
	^Brazil_PlumbingClasses_Gradient_slot! 
 new 

 self Brazil_PlumbingClasses_superInit_new.

 self Brazil_PlumbingClasses_1_init.

^ self.



! 
InformationRetrieverUpwardInterceptor
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor_slot := myNested.
		].
	^Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor_slot! 
InformationRetriever
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_InformationRetriever_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_InformationRetriever.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_InformationRetriever_slot := myNested.
		].
	^Brazil_PlumbingClasses_InformationRetriever_slot! 
InformationRetrieverDownwardInterceptor
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor_slot := myNested.
		].
	^Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor_slot! 
Attribute
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_Attribute_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_Attribute.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self  MappableHolder)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_Attribute_slot := myNested.
		].
	^Brazil_PlumbingClasses_Attribute_slot! 
ModifierKeyState
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_ModifierKeyState_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_ModifierKeyState.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_ModifierKeyState_slot := myNested.
		].
	^Brazil_PlumbingClasses_ModifierKeyState_slot! 
BrazilWeakStorage
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_BrazilWeakStorage_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_BrazilWeakStorage.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_BrazilWeakStorage_slot := myNested.
		].
	^Brazil_PlumbingClasses_BrazilWeakStorage_slot! 
 Brazil_PlumbingClasses_1_init 

^ self.



! 
Font
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_Font_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_Font.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_Font_slot := myNested.
		].
	^Brazil_PlumbingClasses_Font_slot! 
Holder
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_PlumbingClasses_Holder_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_PlumbingClasses 
			nestedMixins at: #Brazil_PlumbingClasses_Holder.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_PlumbingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_PlumbingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_PlumbingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_PlumbingClasses_Holder_slot := myNested.
		].
	^Brazil_PlumbingClasses_Holder_slot! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil metadata addNestedClass: Brazil_PlumbingClasses. ! 
	Brazil_PlumbingClasses metadata enclosingMixin: Brazil !
	Delta define: #Brazil_PlumbingClasses_Outlet as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' ducts override response owner isExclusive')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_Outlet EnclosingObjects_Brazil_PlumbingClasses_Outlet')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Outlet) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Outlet) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Outlet) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_Outlet) methodsFor: 'unclassified'!
	  Brazil_PlumbingClasses_Outlet_1_init_response: aBlock owner: anObject 

 self owner: anObject.

 self ducts: (EnclosingObjects_Brazil_PlumbingClasses_Outlet at: 1)  BrazilWeakStorage new.

 self response: aBlock.

 self isExclusive:false.

 self override:nil.

^ self.



! 
  Brazil_PlumbingClasses_Outlet_superInit_response: aBlock owner: anObject 

super  new.

^ self.



! 
 detachFrom: aDuct 

 aDuct detach: self.

^ self.



! 
 addedToDuct: aDuct 

 self  ducts add: aDuct.

^ self.



! 
override: override_val override := override_val! 
isExclusive: isExclusive_val isExclusive := isExclusive_val! 
ducts ^ducts! 
ducts: ducts_val ducts := ducts_val! 
response: response_val response := response_val! 
 removedFromDuct: aDuct 

 self  ducts remove: aDuct.

^ self.



! 
 printOn: aStream 

super  printOn: aStream.

 self  owner ifNotNil:[ 

 aStream nextPutAll:' of: '; 

 print: self  owner.

].

^ self.



! 
  overrideWith: anOutlet while: aBlock 

|  oldOverride |

 oldOverride := self  override.

 self  override: anOutlet.

^ aBlock ensure:[ 

 self  override: oldOverride.

].



! 
  response: aBlock owner: anObject 

 self  Brazil_PlumbingClasses_Outlet_superInit_response: aBlock owner: anObject.

 self  Brazil_PlumbingClasses_Outlet_1_init_response: aBlock owner: anObject.

^ self.



! 
 receive: packet 

|  originalOverride |

#'BOGUS' yourself.

 self  isExclusive  ifTrue:[ 

 self  override ==nil  ifTrue:[ 

 self  blockWhile:[ 

 self  response clone value: packet.

].

] ifFalse:[ 

 originalOverride := self  override.

 self  blockWhile:[ 

 originalOverride clone value: packet.

].

].

] ifFalse:[ 

 self  override ==nil  ifTrue:[ 

 self  response clone value: packet.

] ifFalse:[ 

 self  override clone value: packet.

].

].

^ self.



! 
override ^override! 
response ^response! 
 unblock 

 self  setOverride:nil.

^ self.



! 
 attachTo: aDuct 

 aDuct attach: self.

^ self.



! 
 beExclusive 

 self  isExclusive:true.

^ self.



! 
isExclusive ^isExclusive! 
 setOverride: another 

|  old |

 old := self  override.

 self  override: another.

^ old.



! 
 block 

 self  setOverride:[ : x | 

nil.

].

^ self.



! 
  gatherInto: gatherBlock while: aBlock 

|  received  result |

 received := (EnclosingObjects_Brazil_PlumbingClasses_Outlet at: 2)  OrderedCollection new.

 result := self  overrideWith:[ : a | 

 received add: a.

] while: aBlock.

 gatherBlock value: received.

^ result.



! 
 blockWhile: aBlock 

^ self  overrideWith:[ : ignored | 

nil.

] while: aBlock.



! 
owner: owner_val owner := owner_val! 
 detachFromAll 

 self  ducts copy do:[ : each | 

 self detachFrom: each.

].

^ self.



! 
owner ^owner! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_Outlet) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_Outlet := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_Outlet := mmd !
	 owner: obj 

^ self   response:[ : ignored | 

nil.

] owner: obj.



! 
		  response: aBlock owner: anObject 

^ self basicNew  response: aBlock owner: anObject.



! 
		 response: block 

^ self   response: block owner:nil.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_Outlet. ! 
	Brazil_PlumbingClasses_Outlet metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_MessageRecorder as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' recordedMessages')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_MessageRecorder EnclosingObjects_Brazil_PlumbingClasses_MessageRecorder')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_MessageRecorder) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_MessageRecorder) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_MessageRecorder) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_MessageRecorder) methodsFor: 'unclassified'!
	recordedMessages: recordedMessages_val recordedMessages := recordedMessages_val! 
 doesNotUnderstand: aMessage 

 self  recordedMessages add: aMessage.

^ self.



! 
 Brazil_PlumbingClasses_MessageRecorder_superInit_new 

super  new.

^ self.



! 
 Brazil_PlumbingClasses_MessageRecorder_1_init 

 self recordedMessages: (EnclosingObjects_Brazil_PlumbingClasses_MessageRecorder at: 2)  OrderedCollection new.

^ self.



! 
 playRecordedMessagesTo: anObject 

 self  recordedMessages do:[ : each | 

 each sendTo: anObject.

].

^ self.



! 
recordedMessages ^recordedMessages! 
 new 

 self Brazil_PlumbingClasses_MessageRecorder_superInit_new.

 self Brazil_PlumbingClasses_MessageRecorder_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_MessageRecorder) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_MessageRecorder := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_MessageRecorder := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_MessageRecorder. ! 
	Brazil_PlumbingClasses_MessageRecorder metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_Attribute as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' defaultValue name')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_Attribute EnclosingObjects_Brazil_PlumbingClasses_Attribute')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Attribute) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Attribute) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Attribute) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_Attribute) methodsFor: 'unclassified'!
	defaultValue ^defaultValue! 
  Brazil_PlumbingClasses_Attribute_1_init_name: n value: v 

 self name: n.

 self defaultValue:nil.

^ self.



! 
 makeCurrentValueDefault 

 self  defaultValue: self value.

^ self.



! 
name: name_val name := name_val! 
 isValueTheDefault 

^ self value = self  defaultValue.



! 
defaultValue: defaultValue_val defaultValue := defaultValue_val! 
  Brazil_PlumbingClasses_Attribute_superInit_name: n value: v 

super  with: v.

^ self.



! 
  name: n value: v 

 self  Brazil_PlumbingClasses_Attribute_superInit_name: n value: v.

 self  Brazil_PlumbingClasses_Attribute_1_init_name: n value: v.

^ self.



! 
name ^name! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_Attribute) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_Attribute := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_Attribute := mmd !
	 name: n 

^ self   name: n value:nil.



! 
		  name: n value: v 

^ self basicNew  name: n value: v.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_Attribute. ! 
	Brazil_PlumbingClasses_Attribute metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' xyzzyParent xyzzyOwner')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor EnclosingObjects_Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor) methodsFor: 'unclassified'!
	 Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor_1_init 

 self xyzzyOwner:nil.

 self xyzzyParent:nil.

^ self.



! 
 Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor_superInit_new 

super  new.

^ self.



! 
  child: child requestsBoundsUpdateUsing: continuation 

 self  xyzzyOwner report:'<< childRequestsBoundsUpdate'.

^ self  xyzzyParent  child: child requestsBoundsUpdateUsing:[ : newBounds | 

 self  xyzzyOwner  report:'>> childRequestsBoundsUpdate' with: newBounds.

 continuation value: newBounds.

].



! 
xyzzyOwner: xyzzyOwner_val xyzzyOwner := xyzzyOwner_val! 
 doesNotUnderstand: aMessage 

^ aMessage sendTo: self  xyzzyParent.



! 
xyzzyParent ^xyzzyParent! 
xyzzyParent: xyzzyParent_val xyzzyParent := xyzzyParent_val! 
xyzzyOwner ^xyzzyOwner! 
 new 

 self Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor_superInit_new.

 self Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor. ! 
	Brazil_PlumbingClasses_InformationRetrieverUpwardInterceptor metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_Gradient as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' startOffsetY endFractionX startColor startFractionY startOffsetX endFractionY startFractionX endColor endOffsetX endOffsetY')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_Gradient EnclosingObjects_Brazil_PlumbingClasses_Gradient')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Gradient) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Gradient) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Gradient) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_Gradient) methodsFor: 'unclassified'!
	 asFillStyleWithin: bounds 

|  start  end |

 start := self  startPointWithin: bounds.

 end := self  endPointWithin: bounds.

^( (EnclosingObjects_Brazil_PlumbingClasses_Gradient at: 2)  GradientFillStyle ramp:(( self Array new:2)  at:1 put:0 -> self  startColor; 

  at:2 put:1 -> self  endColor; 

 yourself)) radial:false; 

 origin: start; 

 direction:( end -  start).



! 
  from: startColorA to: endColorA 

 self  Brazil_PlumbingClasses_Gradient_superInit_from: startColorA to: endColorA.

 self  Brazil_PlumbingClasses_Gradient_1_init_from: startColorA to: endColorA.

^ self.



! 
 asColor 

^ self  startColor.



! 
endOffsetY ^endOffsetY! 
 hasTranslucentColor 

^ self  startColor isTranslucentColor or:[ 

 self  endColor isTranslucentColor.

].



! 
startFractionX: startFractionX_val startFractionX := startFractionX_val! 
  beVerticalFrom: color1 to: color2 

 self  startColor: color1.

 self  startFractionX:0.

 self  startFractionY:0.

 self  startOffsetX:0.

 self  startOffsetY:0.

 self  endColor: color2.

 self  endFractionX:0.

 self  endOffsetX:0.

 self  endFractionY:1.

 self  endOffsetY:0.

^ self.



! 
endOffsetY: endOffsetY_val endOffsetY := endOffsetY_val! 
startFractionX ^startFractionX! 
endOffsetX ^endOffsetX! 
 startPointWithin: bounds 

|  x  y |

 x := bounds width * self  startFractionX + self  startOffsetX + bounds left.

 y := bounds height * self  startFractionY + self  startOffsetY + bounds top.

^ x rounded @ y rounded.



! 
startColor: startColor_val startColor := startColor_val! 
startColor ^startColor! 
startFractionY ^startFractionY! 
startOffsetY ^startOffsetY! 
startFractionY: startFractionY_val startFractionY := startFractionY_val! 
endFractionX ^endFractionX! 
endOffsetX: endOffsetX_val endOffsetX := endOffsetX_val! 
endColor: endColor_val endColor := endColor_val! 
 isGradient 

^true.



! 
endFractionX: endFractionX_val endFractionX := endFractionX_val! 
startOffsetX ^startOffsetX! 
endFractionY ^endFractionY! 
  beHorizontalFrom: color1 to: color2 

 self  startColor: color1.

 self  startFractionX:0.

 self  startFractionY:0.

 self  startOffsetX:0.

 self  startOffsetY:0.

 self  endColor: color2.

 self  endFractionX:1.

 self  endOffsetX:0.

 self  endFractionY:0.

 self  endOffsetY:0.

^ self.



! 
endColor ^endColor! 
  Brazil_PlumbingClasses_Gradient_1_init_from: startColorA to: endColorA 

 self startColor: startColorA.

 self startFractionX:0.

 self startFractionY:0.

 self startOffsetX:0.

 self startOffsetY:0.

 self endColor: endColorA.

 self endFractionX:0.

 self endOffsetX:0.

 self endFractionY:1.

 self endOffsetY:0.

^ self.



! 
startOffsetX: startOffsetX_val startOffsetX := startOffsetX_val! 
startOffsetY: startOffsetY_val startOffsetY := startOffsetY_val! 
 endPointWithin: bounds 

|  x  y |

 x := bounds width * self  endFractionX + self  endOffsetX + bounds left.

 y := bounds height * self  endFractionY + self  endOffsetY + bounds top.

^ x rounded @ y rounded.



! 
endFractionY: endFractionY_val endFractionY := endFractionY_val! 
  Brazil_PlumbingClasses_Gradient_superInit_from: startColorA to: endColorA 

super  new.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_Gradient) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_Gradient := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_Gradient := mmd !
	  from: startColorA to: endColorA 

^ self basicNew  from: startColorA to: endColorA.



! 
		 new 

^ self   from: (EnclosingObjects_Brazil_PlumbingClasses_Gradient at: 2)  Color white to: (EnclosingObjects_Brazil_PlumbingClasses_Gradient at: 2)  Color black.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_Gradient. ! 
	Brazil_PlumbingClasses_Gradient metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_ModifierKeyState as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' altPressed controlPressed shiftPressed')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_ModifierKeyState EnclosingObjects_Brazil_PlumbingClasses_ModifierKeyState')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_ModifierKeyState) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_ModifierKeyState) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_ModifierKeyState) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_ModifierKeyState) methodsFor: 'unclassified'!
	shiftPressed: shiftPressed_val shiftPressed := shiftPressed_val! 
altPressed ^altPressed! 
controlPressed: controlPressed_val controlPressed := controlPressed_val! 
controlPressed ^controlPressed! 
shiftPressed ^shiftPressed! 
altPressed: altPressed_val altPressed := altPressed_val! 
 Brazil_PlumbingClasses_ModifierKeyState_1_init 

 self shiftPressed:false.

 self controlPressed:false.

 self altPressed:false.

^ self.



! 
 optionPressed 

^ self  altPressed.



! 
 Brazil_PlumbingClasses_ModifierKeyState_superInit_new 

super  new.

^ self.



! 
 new 

 self Brazil_PlumbingClasses_ModifierKeyState_superInit_new.

 self Brazil_PlumbingClasses_ModifierKeyState_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_ModifierKeyState) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_ModifierKeyState := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_ModifierKeyState := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_ModifierKeyState. ! 
	Brazil_PlumbingClasses_ModifierKeyState metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_Duct as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' override owner isExclusive outlets')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_Duct EnclosingObjects_Brazil_PlumbingClasses_Duct')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Duct) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Duct) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Duct) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_Duct) methodsFor: 'unclassified'!
	 privateSendBlocked: packet 

 self  override ==nil  ifTrue:[ 

 self  blockWhile:[ 

 self  outlets copy do:[ : each | 

 each receive: packet.

].

].

] ifFalse:[ 

|  originalOverride |

 originalOverride := self  override.

 self  blockWhile:[ 

 originalOverride clone value: packet.

].

].

^ self.



! 
override: override_val override := override_val! 
 isOverridden 

^ self  override notNil.



! 
  overrideWith: overrideBlock while: aBlock 

|  oldOverride |

 oldOverride := self  override.

 self  override: overrideBlock.

^ aBlock ensure:[ 

 self  override: oldOverride.

].



! 
isExclusive: isExclusive_val isExclusive := isExclusive_val! 
 detach: anOutlet 

 self  outlets remove: anOutlet.

 anOutlet removedFromDuct: self.

^ self.



! 
 beWeak 

 self  outlets: (EnclosingObjects_Brazil_PlumbingClasses_Duct at: 1)  BrazilWeakStorage new.

^ self.



! 
 => block 

|  outlet |

 outlet := (EnclosingObjects_Brazil_PlumbingClasses_Duct at: 1)  Outlet response: block.

 self attach: outlet.

^ outlet.



! 
 attachOutletsOf: anotherDuct 

 anotherDuct outlets do:[ : each | 

 self  attach: each.

].

^ self.



! 
 Brazil_PlumbingClasses_Duct_1_init 

 self owner:nil.

 self outlets: (EnclosingObjects_Brazil_PlumbingClasses_Duct at: 2)  OrderedCollection new.

 self isExclusive:false.

 self override:nil.

^ self.



! 
 printOn: aStream 

super  printOn: aStream.

 self  owner ifNotNil:[ 

 aStream nextPutAll:' of: '; 

 print: self  owner.

].

^ self.



! 
 send: packet 

 self  isExclusive  ifTrue:[ 

 self  privateSendBlocked: packet.

] ifFalse:[ 

 self  privateSendUnblocked: packet.

].

^ self.



! 
 block 

 self  setOverride:[ : x | 

nil.

].

^ self.



! 
 privateSendUnblocked: packet 

 self  override ==nil  ifTrue:[ 

 self  outlets clone do:[ : each | 

 each receive: packet.

].

] ifFalse:[ 

 self  override clone value: packet.

].

^ self.



! 
 new 

 self Brazil_PlumbingClasses_Duct_superInit_new.

 self Brazil_PlumbingClasses_Duct_1_init.

^ self.



! 
owner: owner_val owner := owner_val! 
override ^override! 
outlets ^outlets! 
 unblock 

 self  setOverride:nil.

^ self.



! 
 beExclusive 

 self  isExclusive:true.

^ self.



! 
outlets: outlets_val outlets := outlets_val! 
 Brazil_PlumbingClasses_Duct_superInit_new 

super  new.

^ self.



! 
 setOverride: aBlock 

|  original |

 original := self  override.

 self  override: aBlock.

^ original.



! 
 attach: anOutlet 

 self  outlets add: anOutlet.

 anOutlet addedToDuct: self.

^ self.



! 
 detachAll 

 self  outlets copy do:[ : each | 

 self  detach: each.

].

^ self.



! 
  gatherInto: summaryBlock while: aBlock 

|  things  blockResult |

 things := (EnclosingObjects_Brazil_PlumbingClasses_Duct at: 2)  OrderedCollection new.

 blockResult := self   overrideWith:[ : a | 

 things add: a.

] while: aBlock.

 summaryBlock value: things.

^ blockResult.



! 
 blockWhile: aBlock 

^ self  overrideWith:[ : ignored | 

nil.

] while: aBlock.



! 
 takeOverOutletsOf: anotherDuct 

 anotherDuct outlets do:[ : each | 

 self  attach: each.

].

 anotherDuct detachAll.

^ self.



! 
isExclusive ^isExclusive! 
owner ^owner! 
  on: expected do: aBlock 

#'BOGUS' yourself.

^ self =>[ : event | 

 event = expected ifTrue:[ 

 aBlock value.

].

].



! 
 transformedUsing: transformerBlock 

|  duct |

 duct := (EnclosingObjects_Brazil_PlumbingClasses_Duct at: 1)  Duct new.

 duct owner:( self =>[ : sentValue | 

 duct send:( transformerBlock value: sentValue).

]).

^ duct.



! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_Duct) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_Duct := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_Duct := mmd !
	 owner: anObject 

^ self new owner: anObject.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_Duct. ! 
	Brazil_PlumbingClasses_Duct metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_InformationRetriever as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' downwardInterceptor upwardInterceptor')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_InformationRetriever EnclosingObjects_Brazil_PlumbingClasses_InformationRetriever')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetriever) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetriever) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetriever) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetriever) methodsFor: 'unclassified'!
	upwardInterceptor: upwardInterceptor_val upwardInterceptor := upwardInterceptor_val! 
  report: message with: arg 

 (EnclosingObjects_Brazil_PlumbingClasses_InformationRetriever at: 2)  Transcript cr; 

 nextPutAll: message; 

 nextPutAll:': '; 

 print: arg; 

 flush.

^ self.



! 
upwardInterceptor ^upwardInterceptor! 
 report: message 

 (EnclosingObjects_Brazil_PlumbingClasses_InformationRetriever at: 2)  Transcript cr; 

 nextPutAll: message; 

 flush.

^ self.



! 
  Brazil_PlumbingClasses_InformationRetriever_superInit_parent: parent child: child 

super  new.

^ self.



! 
downwardInterceptor ^downwardInterceptor! 
downwardInterceptor: downwardInterceptor_val downwardInterceptor := downwardInterceptor_val! 
  parent: parent child: child 

 self  Brazil_PlumbingClasses_InformationRetriever_superInit_parent: parent child: child.

 self  Brazil_PlumbingClasses_InformationRetriever_1_init_parent: parent child: child.

 self  upwardInterceptor:( (EnclosingObjects_Brazil_PlumbingClasses_InformationRetriever at: 1)  InformationRetrieverUpwardInterceptor new xyzzyOwner: self; 

 xyzzyParent: parent).

 self  downwardInterceptor:( (EnclosingObjects_Brazil_PlumbingClasses_InformationRetriever at: 1)  InformationRetrieverDownwardInterceptor new xyzzyOwner: self; 

 xyzzyChild: child).

^ self.



! 
  Brazil_PlumbingClasses_InformationRetriever_1_init_parent: parent child: child 

 self upwardInterceptor:nil.

 self downwardInterceptor:nil.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetriever) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_InformationRetriever := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_InformationRetriever := mmd !
	  parent: parent child: child 

^ self basicNew  parent: parent child: child.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_InformationRetriever. ! 
	Brazil_PlumbingClasses_InformationRetriever metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' xyzzyChild xyzzzyOnwer')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor EnclosingObjects_Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor) methodsFor: 'unclassified'!
	xyzzzyOnwer: xyzzzyOnwer_val xyzzzyOnwer := xyzzzyOnwer_val! 
 doesNotUnderstand: aMessage 

^ aMessage sendTo: self  xyzzyChild.



! 
xyzzyChild: xyzzyChild_val xyzzyChild := xyzzyChild_val! 
 Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor_superInit_new 

super  new.

^ self.



! 
xyzzyChild ^xyzzyChild! 
 Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor_1_init 

 self xyzzzyOnwer:nil.

 self xyzzyChild:nil.

^ self.



! 
xyzzzyOnwer ^xyzzzyOnwer! 
 new 

 self Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor_superInit_new.

 self Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor. ! 
	Brazil_PlumbingClasses_InformationRetrieverDownwardInterceptor metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_MappableHolder as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' mappingUpdateBlock updateInProgress')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_MappableHolder EnclosingObjects_Brazil_PlumbingClasses_MappableHolder')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_MappableHolder) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_MappableHolder) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_MappableHolder) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_MappableHolder) methodsFor: 'unclassified'!
	 unmap 

 self  mappingUpdateBlock:[ : newValue | 

nil.

].

^ self.



! 
updateInProgress: updateInProgress_val updateInProgress := updateInProgress_val! 
 acceptValueFromMapping: anObject 

 self  updateInProgress ifFalse:[ 

 self changingS ifNotNil:[ 

 self changingS send: anObject.

].

].

 self valueS: anObject.

 self  updateInProgress ifFalse:[ 

 self changedS ifNotNil:[ 

 self changedS send: anObject.

].

].

^ self.



! 
 Brazil_PlumbingClasses_MappableHolder_superInit_with: obj 

super  with: obj.

^ self.



! 
 value: anObject 

 self changingS ifNotNil:[ 

 self changingS send: anObject.

].

 self valueS: anObject.

 self  updateMapping.

 self changedS ifNotNil:[ 

 self changedS send: anObject.

].

^ self.



! 
 updateMapping 

|  oldState |

 oldState := self  updateInProgress.

 self  updateInProgress:true.

^[ 

 self  mappingUpdateBlock reentrant value: self valueS.

] ensure:[ 

 self  updateInProgress: oldState.

].



! 
updateInProgress ^updateInProgress! 
mappingUpdateBlock: mappingUpdateBlock_val mappingUpdateBlock := mappingUpdateBlock_val! 
 mapTo: aBlock 

 self  mappingUpdateBlock: aBlock.

^ self.



! 
 Brazil_PlumbingClasses_MappableHolder_1_init: obj 

 self updateInProgress:false.

 self mappingUpdateBlock:[ : newValue | 

nil.

].

^ self.



! 
 with: obj 

 self Brazil_PlumbingClasses_MappableHolder_superInit_with: obj.

 self Brazil_PlumbingClasses_MappableHolder_1_init: obj.

^ self.



! 
mappingUpdateBlock ^mappingUpdateBlock! 
  value: anObject beforeChanged: aBlock 

 self changingS ifNotNil:[ 

 self changingS send: anObject.

].

 self valueS: anObject.

 self  updateMapping.

 aBlock value: anObject.

 self changedS ifNotNil:[ 

 self changedS send: anObject.

].

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_MappableHolder) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_MappableHolder := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_MappableHolder := mmd !
	 with: obj 

^ self basicNew with: obj.



! 
		 new 

^ self  with:nil.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_MappableHolder. ! 
	Brazil_PlumbingClasses_MappableHolder metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_Font as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' sizeX')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_Font EnclosingObjects_Brazil_PlumbingClasses_Font')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Font) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Font) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Font) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_Font) methodsFor: 'unclassified'!
	sizeX ^sizeX! 
 size: n 

 self Brazil_PlumbingClasses_Font_superInit_size: n.

 self Brazil_PlumbingClasses_Font_1_init: n.

^ self.



! 
 Brazil_PlumbingClasses_Font_1_init: n 

 self sizeX: n.

^ self.



! 
sizeX: sizeX_val sizeX := sizeX_val! 
 Brazil_PlumbingClasses_Font_superInit_size: n 

super  new.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_Font) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_Font := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_Font := mmd !
	 large 

^ self  size:4.



! 
		 size: n 

^ self basicNew size: n.



! 
		 tiny 

^ self  size:1.



! 
		 small 

^ self  size:2.



! 
		 huge 

^ self  size:5.



! 
		 normal 

^ self  size:3.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_Font. ! 
	Brazil_PlumbingClasses_Font metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_Holder as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' changingS valueS changedS')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_Holder EnclosingObjects_Brazil_PlumbingClasses_Holder')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Holder) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Holder) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_Holder) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_Holder) methodsFor: 'unclassified'!
	changingS: changingS_val changingS := changingS_val! 
changedS ^changedS! 
valueS: valueS_val valueS := valueS_val! 
 Brazil_PlumbingClasses_Holder_superInit_with: obj 

super  new.

^ self.



! 
changingS ^changingS! 
 changed 

^ self  changedS ifNil:[ 

 self  changedS:( (EnclosingObjects_Brazil_PlumbingClasses_Holder at: 1)  Duct owner: self).

 self  changedS.

].



! 
 with: obj 

 self Brazil_PlumbingClasses_Holder_superInit_with: obj.

 self Brazil_PlumbingClasses_Holder_1_init: obj.

^ self.



! 
 Brazil_PlumbingClasses_Holder_1_init: obj 

 self valueS: obj.

 self changingS:nil.

 self changedS:nil.

^ self.



! 
valueS ^valueS! 
 value: anObject 

 self  changingS ifNotNil:[ 

 self  changingS send: anObject.

].

 self  valueS: anObject.

 self  changedS ifNotNil:[ 

 self  changedS send: anObject.

].

^ self.



! 
 changing 

^ self  changingS ifNil:[ 

 self  changingS:( (EnclosingObjects_Brazil_PlumbingClasses_Holder at: 1)  Duct owner: self).

 self  changingS.

].



! 
 value 

^ self  valueS.



! 
 printOn: aStream 

super  printOn: aStream.

 aStream space; 

 print: self  value.

^ self.



! 
changedS: changedS_val changedS := changedS_val! 
 quietlySetValue: newValue 

 self  valueS: newValue.

^ self.



! 
  value: anObject beforeChanged: aBlock 

 self  changingS ifNotNil:[ 

 self  changingS send: anObject.

].

 self  valueS: anObject.

 aBlock value.

 self  changedS ifNotNil:[ 

 self  changedS send: anObject.

].

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_Holder) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_Holder := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_Holder := mmd !
	 with: obj 

^ self basicNew with: obj.



! 
		 new 

^ self  with:nil.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_Holder. ! 
	Brazil_PlumbingClasses_Holder metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_HierarchicalReporter as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' stream currentIndent')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_HierarchicalReporter EnclosingObjects_Brazil_PlumbingClasses_HierarchicalReporter')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_HierarchicalReporter) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_HierarchicalReporter) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_HierarchicalReporter) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_HierarchicalReporter) methodsFor: 'unclassified'!
	 Brazil_PlumbingClasses_HierarchicalReporter_1_init: stm 

 self stream: stm.

 self currentIndent:0.

^ self.



! 
 indentStep 

^1.



! 
 contents 

^ self  stream contents.



! 
stream: stream_val stream := stream_val! 
 decreaseIndent 

 self  currentIndent:( self  currentIndent -  self  indentStep).

^ self.



! 
 space 

 self  stream space.

^ self.



! 
 print: anObject 

 self  stream print: anObject.

^ self.



! 
currentIndent: currentIndent_val currentIndent := currentIndent_val! 
 on: stm 

 self Brazil_PlumbingClasses_HierarchicalReporter_superInit_on: stm.

 self Brazil_PlumbingClasses_HierarchicalReporter_1_init: stm.

^ self.



! 
 cr 

 self  stream cr.

 self  printIndent.

^ self.



! 
 nextPutAll: aString 

 self  stream nextPutAll: aString.

^ self.



! 
currentIndent ^currentIndent! 
stream ^stream! 
 printIndent 

 self  stream  next: self  currentIndent put: self Character tab.

^ self.



! 
 increaseIndent 

 self  currentIndent:( self  currentIndent + self  indentStep).

^ self.



! 
 flush 

 self  stream flush.

^ self.



! 
 nextPut: aCharacter 

 self  stream nextPutAll: aCharacter.

^ self.



! 
 Brazil_PlumbingClasses_HierarchicalReporter_superInit_on: stm 

super  new.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_HierarchicalReporter) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_HierarchicalReporter := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_HierarchicalReporter := mmd !
	 on: stm 

^ self basicNew on: stm.



! 
		 new 

^ self  on:( (EnclosingObjects_Brazil_PlumbingClasses_HierarchicalReporter at: 2)  CharacterReadWriteStream on: self String new).



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_HierarchicalReporter. ! 
	Brazil_PlumbingClasses_HierarchicalReporter metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_PlumbingClasses_BrazilWeakStorage as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' storage lastUsedIndex')
	 classVariables: 'MixinMetadata_Brazil_PlumbingClasses_BrazilWeakStorage EnclosingObjects_Brazil_PlumbingClasses_BrazilWeakStorage')!
	(Delta mirrorFor: #Brazil_PlumbingClasses_BrazilWeakStorage) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_BrazilWeakStorage) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_PlumbingClasses_BrazilWeakStorage) comment: #''!
	! (Delta mirrorFor: #Brazil_PlumbingClasses_BrazilWeakStorage) methodsFor: 'unclassified'!
	 Brazil_PlumbingClasses_BrazilWeakStorage_1_init 

 self storage:( (EnclosingObjects_Brazil_PlumbingClasses_BrazilWeakStorage at: 2)  WeakArray new:5).

 self lastUsedIndex:0.

^ self.



! 
 includes: anObject 

^( self  storage indexOf: anObject) >0.



! 
 add: anObject 

 self  findAvailableIndex.

^ self  storage  at: self  lastUsedIndex put: anObject.



! 
lastUsedIndex ^lastUsedIndex! 
 removeAll 

 self  storage:( (EnclosingObjects_Brazil_PlumbingClasses_BrazilWeakStorage at: 2)  WeakArray new:5).

 self  lastUsedIndex:0.

^ self.



! 
lastUsedIndex: lastUsedIndex_val lastUsedIndex := lastUsedIndex_val! 
storage ^storage! 
storage: storage_val storage := storage_val! 
 isEmpty 

^ self  size =0.



! 
 remove: anObject 

|  index |

 index := self  storage indexOf: anObject.

 index >0 ifTrue:[ 

 self  storage  at: index put:nil.

].

^ self.



! 
 findAvailableIndex 

|  limit  newStorage |

 self  lastUsedIndex:( self  lastUsedIndex +1).

( self  lastUsedIndex <= self  storage size and:[ 

( self  storage at: self  lastUsedIndex) isNil.

]) ifTrue:[ 

^ self  lastUsedIndex.

].

 self  lastUsedIndex:1.

 limit := self  storage size.

[ 

 self  lastUsedIndex <= limit.

] whileTrue:[ 

( self  storage at: self  lastUsedIndex) isNil ifTrue:[ 

^ self  lastUsedIndex.

].

 self  lastUsedIndex:( self  lastUsedIndex +1).

].

 newStorage := (EnclosingObjects_Brazil_PlumbingClasses_BrazilWeakStorage at: 2)  WeakArray new:( self  storage size +( self  storage size min:100)).

 newStorage  replaceFrom:1 to: self  storage size with: self  storage startingAt:1.

 self  storage: newStorage.

^ self  lastUsedIndex.



! 
 do: aBlock 

 self  storage do:[ : each | 

 each ifNotNil:[ 

 aBlock value: each.

].

].

^ self.



! 
 size 

^ self  storage  inject:0 into:[ : size : each | 

 size +( each isNil  ifTrue:[ 

0.

] ifFalse:[ 

1.

]).

].



! 
 Brazil_PlumbingClasses_BrazilWeakStorage_superInit_new 

super  new.

^ self.



! 
 new 

 self Brazil_PlumbingClasses_BrazilWeakStorage_superInit_new.

 self Brazil_PlumbingClasses_BrazilWeakStorage_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_PlumbingClasses_BrazilWeakStorage) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_PlumbingClasses_BrazilWeakStorage := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_PlumbingClasses_BrazilWeakStorage := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_PlumbingClasses metadata addNestedClass: Brazil_PlumbingClasses_BrazilWeakStorage. ! 
	Brazil_PlumbingClasses_BrazilWeakStorage metadata enclosingMixin: Brazil_PlumbingClasses !
	Delta define: #Brazil_ToolClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' Menu ListBox Button CellWidthEqualizer Brazil_ToolClasses_FilePickerDirectoryPanel_slot Blank Brazil_ToolClasses_FilePicker_slot Label TextView Brazil_ToolClasses_MessageBox_slot VerticalViewport Row Brazil_ToolClasses_AbstractFileDialog_slot Column Brazil_ToolClasses_DirectoryPicker_slot HorizontalViewport Holder Window MenuItem Desktop TextDisplay Brazil_ToolClasses_BrazilDirectorySelector_slot Brazil_ToolClasses_BrazilInspector_slot Brazil_ToolClasses_BrazilFileSelector_slot Brazil_ToolClasses_NewFilePicker_slot Brazil_ToolClasses_Prompter_slot Brazil_ToolClasses_FilePickerFilePanel_slot')
	 classVariables: 'MixinMetadata_Brazil_ToolClasses EnclosingObjects_Brazil_ToolClasses')!
	(Delta mirrorFor: #Brazil_ToolClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ToolClasses) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ToolClasses) comment: #''!
	! (Delta mirrorFor: #Brazil_ToolClasses) methodsFor: 'unclassified'!
	Label: Label_val Label := Label_val! 
ListBox ^ListBox! 
MessageBox
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ToolClasses_MessageBox_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ToolClasses 
			nestedMixins at: #Brazil_ToolClasses_MessageBox.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ToolClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ToolClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ToolClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ToolClasses_MessageBox_slot := myNested.
		].
	^Brazil_ToolClasses_MessageBox_slot! 
Menu: Menu_val Menu := Menu_val! 
CellWidthEqualizer ^CellWidthEqualizer! 
FilePicker
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ToolClasses_FilePicker_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ToolClasses 
			nestedMixins at: #Brazil_ToolClasses_FilePicker.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ToolClasses Mirror on: self  AbstractFileDialog)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ToolClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ToolClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ToolClasses_FilePicker_slot := myNested.
		].
	^Brazil_ToolClasses_FilePicker_slot! 
ListBox: ListBox_val ListBox := ListBox_val! 
MenuItem: MenuItem_val MenuItem := MenuItem_val! 
Label ^Label! 
Column: Column_val Column := Column_val! 
Row ^Row! 
Prompter
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ToolClasses_Prompter_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ToolClasses 
			nestedMixins at: #Brazil_ToolClasses_Prompter.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ToolClasses Mirror on: self  MessageBox)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ToolClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ToolClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ToolClasses_Prompter_slot := myNested.
		].
	^Brazil_ToolClasses_Prompter_slot! 
 new 

 self Brazil_ToolClasses_superInit_new.

 self Brazil_ToolClasses_1_init.

^ self.



! 
TextView: TextView_val TextView := TextView_val! 
TextDisplay: TextDisplay_val TextDisplay := TextDisplay_val! 
DirectoryPicker
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ToolClasses_DirectoryPicker_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ToolClasses 
			nestedMixins at: #Brazil_ToolClasses_DirectoryPicker.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ToolClasses Mirror on: self  AbstractFileDialog)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ToolClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ToolClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ToolClasses_DirectoryPicker_slot := myNested.
		].
	^Brazil_ToolClasses_DirectoryPicker_slot! 
AbstractFileDialog
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ToolClasses_AbstractFileDialog_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ToolClasses 
			nestedMixins at: #Brazil_ToolClasses_AbstractFileDialog.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ToolClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ToolClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ToolClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ToolClasses_AbstractFileDialog_slot := myNested.
		].
	^Brazil_ToolClasses_AbstractFileDialog_slot! 
Menu ^Menu! 
BrazilDirectorySelector
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ToolClasses_BrazilDirectorySelector_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ToolClasses 
			nestedMixins at: #Brazil_ToolClasses_BrazilDirectorySelector.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ToolClasses Mirror on: self  BrazilFileSelector)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ToolClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ToolClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ToolClasses_BrazilDirectorySelector_slot := myNested.
		].
	^Brazil_ToolClasses_BrazilDirectorySelector_slot! 
Window: Window_val Window := Window_val! 
BrazilFileSelector
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ToolClasses_BrazilFileSelector_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ToolClasses 
			nestedMixins at: #Brazil_ToolClasses_BrazilFileSelector.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ToolClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ToolClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ToolClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ToolClasses_BrazilFileSelector_slot := myNested.
		].
	^Brazil_ToolClasses_BrazilFileSelector_slot! 
Row: Row_val Row := Row_val! 
Holder: Holder_val Holder := Holder_val! 
MenuItem ^MenuItem! 
Button ^Button! 
Desktop ^Desktop! 
FilePickerFilePanel
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ToolClasses_FilePickerFilePanel_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ToolClasses 
			nestedMixins at: #Brazil_ToolClasses_FilePickerFilePanel.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ToolClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ToolClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ToolClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ToolClasses_FilePickerFilePanel_slot := myNested.
		].
	^Brazil_ToolClasses_FilePickerFilePanel_slot! 
 Brazil_ToolClasses_1_init 

 self Button: (EnclosingObjects_Brazil_ToolClasses at: 1)  widgets Button.

 self Menu: (EnclosingObjects_Brazil_ToolClasses at: 1)  menus Menu.

 self MenuItem: (EnclosingObjects_Brazil_ToolClasses at: 1)  menus MenuItem.

 self Desktop: (EnclosingObjects_Brazil_ToolClasses at: 1)  containers Desktop.

 self Row: (EnclosingObjects_Brazil_ToolClasses at: 1)  containers Row.

 self CellWidthEqualizer: (EnclosingObjects_Brazil_ToolClasses at: 1)  areas CellWidthEqualizer.

 self Column: (EnclosingObjects_Brazil_ToolClasses at: 1)  containers Column.

 self HorizontalViewport: (EnclosingObjects_Brazil_ToolClasses at: 1)  containers HorizontalViewport.

 self TextView: (EnclosingObjects_Brazil_ToolClasses at: 1)  widgets TextView.

 self Window: (EnclosingObjects_Brazil_ToolClasses at: 1)  containers Window.

 self Holder: (EnclosingObjects_Brazil_ToolClasses at: 1)  plumbing Holder.

 self ListBox: (EnclosingObjects_Brazil_ToolClasses at: 1)  widgets ListBox.

 self Label: (EnclosingObjects_Brazil_ToolClasses at: 1)  widgets Label.

 self VerticalViewport: (EnclosingObjects_Brazil_ToolClasses at: 1)  containers VerticalViewport.

 self Blank: (EnclosingObjects_Brazil_ToolClasses at: 1)  widgets Blank.

 self TextDisplay: (EnclosingObjects_Brazil_ToolClasses at: 1)  widgets TextDisplay.

^ self.



! 
FilePickerDirectoryPanel
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ToolClasses_FilePickerDirectoryPanel_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ToolClasses 
			nestedMixins at: #Brazil_ToolClasses_FilePickerDirectoryPanel.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ToolClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ToolClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ToolClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ToolClasses_FilePickerDirectoryPanel_slot := myNested.
		].
	^Brazil_ToolClasses_FilePickerDirectoryPanel_slot! 
Blank ^Blank! 
VerticalViewport ^VerticalViewport! 
TextView ^TextView! 
CellWidthEqualizer: CellWidthEqualizer_val CellWidthEqualizer := CellWidthEqualizer_val! 
Column ^Column! 
Desktop: Desktop_val Desktop := Desktop_val! 
HorizontalViewport ^HorizontalViewport! 
Holder ^Holder! 
Window ^Window! 
HorizontalViewport: HorizontalViewport_val HorizontalViewport := HorizontalViewport_val! 
Blank: Blank_val Blank := Blank_val! 
VerticalViewport: VerticalViewport_val VerticalViewport := VerticalViewport_val! 
TextDisplay ^TextDisplay! 
Button: Button_val Button := Button_val! 
NewFilePicker
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ToolClasses_NewFilePicker_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ToolClasses 
			nestedMixins at: #Brazil_ToolClasses_NewFilePicker.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ToolClasses Mirror on: self  AbstractFileDialog)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ToolClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ToolClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ToolClasses_NewFilePicker_slot := myNested.
		].
	^Brazil_ToolClasses_NewFilePicker_slot! 
BrazilInspector
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ToolClasses_BrazilInspector_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ToolClasses 
			nestedMixins at: #Brazil_ToolClasses_BrazilInspector.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ToolClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ToolClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ToolClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ToolClasses_BrazilInspector_slot := myNested.
		].
	^Brazil_ToolClasses_BrazilInspector_slot! 
 Brazil_ToolClasses_superInit_new 

super  new.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ToolClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ToolClasses := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ToolClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil metadata addNestedClass: Brazil_ToolClasses. ! 
	Brazil_ToolClasses metadata enclosingMixin: Brazil !
	Delta define: #Brazil_ToolClasses_FilePickerDirectoryPanel as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' includeFiles directory list fileFilterX')
	 classVariables: 'MixinMetadata_Brazil_ToolClasses_FilePickerDirectoryPanel EnclosingObjects_Brazil_ToolClasses_FilePickerDirectoryPanel')!
	(Delta mirrorFor: #Brazil_ToolClasses_FilePickerDirectoryPanel) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ToolClasses_FilePickerDirectoryPanel) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ToolClasses_FilePickerDirectoryPanel) comment: 'Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ToolClasses_FilePickerDirectoryPanel) methodsFor: 'unclassified'!
	includeFiles ^includeFiles! 
 selectEntryNamed: name 

|  entry |

 entry := self  list list  detect:[ : some | 

 some name = name.

] ifNone:[ 

^ self.

].

 self  list select: entry.

^ self.



! 
 doubleClickAction: aBlock 

 self  list doubleClickAction: aBlock.

^ self.



! 
 fileFilter: newFilter 

 self  fileFilterX: newFilter.

 self  list ifNotNil:[ 

 self  populateList.

].

^ self.



! 
 createVisual 

 self  list: (EnclosingObjects_Brazil_ToolClasses_FilePickerDirectoryPanel at: 1)  ListBox new.

 self  list displayBlock: self  fileDisplayBlock.

 self  populateList.

^ self  list.



! 
 Brazil_ToolClasses_FilePickerDirectoryPanel_superInit_new 

super  new.

^ self.



! 
 fileFilter 

^ self  fileFilterX.



! 
 Brazil_ToolClasses_FilePickerDirectoryPanel_1_init 

 self directory:nil.

 self fileFilterX:nil.

 self includeFiles:nil.

 self list:nil.

^ self.



! 
list: list_val list := list_val! 
includeFiles: includeFiles_val includeFiles := includeFiles_val! 
 visual 

 self  list isNil ifTrue:[ 

 self  createVisual.

].

^ self  list.



! 
directory ^directory! 
 new 

 self Brazil_ToolClasses_FilePickerDirectoryPanel_superInit_new.

 self Brazil_ToolClasses_FilePickerDirectoryPanel_1_init.

 self  fileFilterX:'*'.

 self  includeFiles:true.

^ self.



! 
 populateList 

|  directories  files  sortBlock |

 directories := (EnclosingObjects_Brazil_ToolClasses_FilePickerDirectoryPanel at: 2)  OrderedCollection new.

 files := (EnclosingObjects_Brazil_ToolClasses_FilePickerDirectoryPanel at: 2)  OrderedCollection new.

 self  directory entries do:[ : each | 

( each isDirectory  ifTrue:[ 

 directories.

] ifFalse:[ 

 files.

]) add: each.

].

 files := files select:[ : each | 

 self  fileFilter match: each name.

].

 sortBlock :=[ : a : b | 

 a name < b name.

].

 self  list list:( self  includeFiles  ifTrue:[ 

( directories asSortedList: sortBlock) concatenate:( files asSortedList: sortBlock).

] ifFalse:[ 

 directories asSortedList: sortBlock.

]).

^ self.



! 
 selection 

^ self  list selection.



! 
 selectionChannel 

^ self  visual selectionChanged.



! 
list ^list! 
 fileDisplayBlock 

^[ : entry | 

 entry isDirectory  ifTrue:[ 

'[ ' , entry name ,' ]'.

] ifFalse:[ 

 entry name.

].

].



! 
 desiredWidth 

^200.



! 
directory: directory_val directory := directory_val! 
fileFilterX: fileFilterX_val fileFilterX := fileFilterX_val! 
 isDirectoryPanel 

^true.



! 
fileFilterX ^fileFilterX! 
 !
	! (Delta mirrorFor: #Brazil_ToolClasses_FilePickerDirectoryPanel) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ToolClasses_FilePickerDirectoryPanel := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ToolClasses_FilePickerDirectoryPanel := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ToolClasses metadata addNestedClass: Brazil_ToolClasses_FilePickerDirectoryPanel. ! 
	Brazil_ToolClasses_FilePickerDirectoryPanel metadata enclosingMixin: Brazil_ToolClasses !
	Delta define: #Brazil_ToolClasses_FilePicker as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' selectedPath fileFilter filterField')
	 classVariables: 'MixinMetadata_Brazil_ToolClasses_FilePicker EnclosingObjects_Brazil_ToolClasses_FilePicker')!
	(Delta mirrorFor: #Brazil_ToolClasses_FilePicker) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ToolClasses_FilePicker) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ToolClasses_FilePicker) comment: 'Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ToolClasses_FilePicker) methodsFor: 'unclassified'!
	 defaultOKButtonLabel 

^'Open'.



! 
 defaultWindowLabel 

^'Open File'.



! 
filterField: filterField_val filterField := filterField_val! 
selectedPath: selectedPath_val selectedPath := selectedPath_val! 
fileFilter: fileFilter_val fileFilter := fileFilter_val! 
 enableOrDisableOKForSelection: item 

 self okButton enabled:( item notNil and:[ 

 item isDirectory not.

]).

^ self.



! 
 setupNewDirectoryPanel: panel 

 panel fileFilter: self  fileFilter.

super  setupNewDirectoryPanel: panel.

^ self.



! 
selectedPath ^selectedPath! 
 respondToCancel 

 self  selectedPath:nil.

super  respondToCancel.

^ self.



! 
 buildButtons 

|  row |

 row :=super  buildButtons.

 self  enableOrDisableOKForSelection:nil.

^ row.



! 
  respondToSelection: item in: panel 

super   respondToSelection: item in: panel.

 self  selectedPath:( item ifNotNil:[ 

 self hereDirectory fullNameFor: item name.

]).

 self  enableOrDisableOKForSelection: item.

^ self.



! 
 Brazil_ToolClasses_FilePicker_1_init 

 self fileFilter:nil.

 self filterField:nil.

 self selectedPath:nil.

^ self.



! 
 new 

 self Brazil_ToolClasses_FilePicker_superInit_new.

 self Brazil_ToolClasses_FilePicker_1_init.

 self showNewFolderButton:false.

 self  fileFilter:'*'.

^ self.



! 
fileFilter ^fileFilter! 
 buildFilterField 

 self  filterField:( (EnclosingObjects_Brazil_ToolClasses_FilePicker at: 1)  TextView new text: self  fileFilter).

 self  filterField hasEditsFromUserChannel =>[ : a | 

 self newFilterTyped: a.

].

 self  filterField enterKeyResponse:[ : defaultResponse | 

nil.

].

^ self  filterField.



! 
 Brazil_ToolClasses_FilePicker_superInit_new 

super  new.

^ self.



! 
 buildTopRow 

|  row |

 row :=super  buildTopRow.

 row addBlankSize:10; 

 add:( (EnclosingObjects_Brazil_ToolClasses_FilePicker at: 1)  Label new text:'Filter:') wrapped beCentered; 

 addBlankSize:10; 

 add: self  buildFilterField.

 self  filterField area width:100.

^ row.



! 
 newFilterTyped: ignored 

 self  fileFilter: self  filterField text asString.

 self panels last fileFilter: self  fileFilter.

^ self.



! 
filterField ^filterField! 
 !
	! (Delta mirrorFor: #Brazil_ToolClasses_FilePicker) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ToolClasses_FilePicker := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ToolClasses_FilePicker := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ToolClasses metadata addNestedClass: Brazil_ToolClasses_FilePicker. ! 
	Brazil_ToolClasses_FilePicker metadata enclosingMixin: Brazil_ToolClasses !
	Delta define: #Brazil_ToolClasses_NewFilePicker as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' nameField fileNameX')
	 classVariables: 'MixinMetadata_Brazil_ToolClasses_NewFilePicker EnclosingObjects_Brazil_ToolClasses_NewFilePicker')!
	(Delta mirrorFor: #Brazil_ToolClasses_NewFilePicker) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ToolClasses_NewFilePicker) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ToolClasses_NewFilePicker) comment: 'Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ToolClasses_NewFilePicker) methodsFor: 'unclassified'!
	 defaultOKButtonLabel 

^'Save'.



! 
 buildNameField 

|  row |

 self  nameField: (EnclosingObjects_Brazil_ToolClasses_NewFilePicker at: 1)  TextView new.

 self  nameField hasEditsFromUserChannel =>[ : x | 

 self  enableOrDisableOK.

].

 self  nameField text: self  fileName; 

 enterKeyResponse:[ : defaultResponse | 

 self okButton enabled ifTrue:[ 

 self respondToOK.

].

].

^ self  nameField.



! 
 Brazil_ToolClasses_NewFilePicker_superInit_new 

super  new.

^ self.



! 
 fileName: newName 

 self  fileNameX: newName.

 self  nameField ifNotNil:[ 

 self  nameField text: newName.

].

^ self.



! 
nameField ^nameField! 
 fileName 

^ self  fileNameX.



! 
 selectedPath 

^( self  nameField notNil and:[ 

 self  nameField text notEmpty.

])  ifTrue:[ 

 self hereDirectory fullNameFor: self  nameField text.

] ifFalse:[ 

nil.

].



! 
fileNameX: fileNameX_val fileNameX := fileNameX_val! 
 defaultWindowLabel 

^'Save File'.



! 
 buildButtons 

|  buttons |

 buttons := (EnclosingObjects_Brazil_ToolClasses_NewFilePicker at: 1)  Row new.

 self showNewFolderButton ifTrue:[ 

 buttons add: self buildNewFolderButton.

].

 buttons addElasticBlank; 

 add:( (EnclosingObjects_Brazil_ToolClasses_NewFilePicker at: 1)  Label new text:'Save as:') wrapped beCentered; 

 addBlankSize:10; 

 add: self  buildNameField; 

 addBlankSize:10.

 self  nameField area width:200; 

 elasticity:2.

 self okButton:( buttons  addNew: (EnclosingObjects_Brazil_ToolClasses_NewFilePicker at: 1)  Button setup:[ : button | 

 button label: self okButtonLabel; 

 action:[ 

 self respondToOK.

].

]).

 self  enableOrDisableOK.

 buttons addBlankSize:10.

 self cancelButton:( buttons  addNew: (EnclosingObjects_Brazil_ToolClasses_NewFilePicker at: 1)  Button setup:[ : button | 

 button label:'Cancel'; 

 action:[ 

 self respondToCancel.

].

]).

 (EnclosingObjects_Brazil_ToolClasses_NewFilePicker at: 1)  CellWidthEqualizer equalizeRowElements:(( self Array new:2)  at:1 put: self okButton; 

  at:2 put: self cancelButton; 

 yourself).

^ buttons.



! 
fileNameX ^fileNameX! 
 enableOrDisableOK 

nil = self okButton ifTrue:[ 

^ self.

].

 self okButton enabled: self  nameField text isEmpty not.

^ self.



! 
  respondToSelection: item in: panel 

( item notNil and:[ 

 item isDirectory not.

]) ifTrue:[ 

 self  nameField text: item name.

].

 self  enableOrDisableOK.

super   respondToSelection: item in: panel.

^ self.



! 
nameField: nameField_val nameField := nameField_val! 
 Brazil_ToolClasses_NewFilePicker_1_init 

 self fileNameX: self String new.

 self nameField:nil.

^ self.



! 
 new 

 self Brazil_ToolClasses_NewFilePicker_superInit_new.

 self Brazil_ToolClasses_NewFilePicker_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ToolClasses_NewFilePicker) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ToolClasses_NewFilePicker := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ToolClasses_NewFilePicker := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ToolClasses metadata addNestedClass: Brazil_ToolClasses_NewFilePicker. ! 
	Brazil_ToolClasses_NewFilePicker metadata enclosingMixin: Brazil_ToolClasses !
	Delta define: #Brazil_ToolClasses_AbstractFileDialog as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' upButton locationButton window okButton showNewFolderButton okButtonLabel locationField shouldClose cancelButton closedWithOK panels viewport')
	 classVariables: 'MixinMetadata_Brazil_ToolClasses_AbstractFileDialog EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog')!
	(Delta mirrorFor: #Brazil_ToolClasses_AbstractFileDialog) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ToolClasses_AbstractFileDialog) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ToolClasses_AbstractFileDialog) comment: 'NOTE: Should eventually remove the locationButton field and related stuff.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ToolClasses_AbstractFileDialog) methodsFor: 'unclassified'!
	panels: panels_val panels := panels_val! 
 defaultWindowLabel 

^'Select a File'.



! 
viewport ^viewport! 
 buildLocationMenu 

|  menu |

 menu := (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  Menu forVisual: self  window.

 self  directoriesFromHereToRootDo:[ : each | 

|  label |

 label := each localName isEmpty  ifTrue:[ 

 self  drivesPseudoDirectoryName.

] ifFalse:[ 

 each localName.

].

 menu add:( (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  MenuItem  label: label action:[ 

 self  retargetAt: each.

] fixTemps).

].

^ menu.



! 
 buildButtons 

|  buttons |

 buttons := (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  Row new.

 self  showNewFolderButton ifTrue:[ 

 buttons add: self  buildNewFolderButton.

].

 buttons addElasticBlank.

 self  okButton:( buttons  addNew: (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  Button setup:[ : button | 

 button label: self  okButtonLabel; 

 action:[ 

 self  respondToOK.

].

]).

 buttons addBlankSize:10.

 self  cancelButton:( buttons  addNew: (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  Button setup:[ : button | 

 button label:'Cancel'; 

 action:[ 

 self  respondToCancel.

].

]).

 (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  CellWidthEqualizer equalizeRowElements:(( self Array new:2)  at:1 put: self  okButton; 

  at:2 put: self  cancelButton; 

 yourself).

^ buttons.



! 
closedWithOK: closedWithOK_val closedWithOK := closedWithOK_val! 
  respondToSelection: item in: panel 

 self removePanelsAfter: panel.

 item notNil ifTrue:[ 

 item isDirectory  ifTrue:[ 

|  newDirectory |

 newDirectory := self  hereDirectory / item name.

^ self  addNewPanel:( self  createPanelFor: newDirectory).

] ifFalse:[ 

|  newFile |

 newFile := self  hereDirectory directoryEntryFor: item name.

^ self  addNewPanel:( self   createFilePanelFor: newFile in: self  hereDirectory).

].

].

^ self.



! 
 new 

 self Brazil_ToolClasses_AbstractFileDialog_superInit_new.

 self Brazil_ToolClasses_AbstractFileDialog_1_init.

^ self.



! 
 baseDirectoryDelimitedPathName 

|  base  baseName |

 base := self  baseDirectory.

 baseName := base pathName.

^ baseName isEmpty  ifTrue:[ 

#''.

] ifFalse:[ 

 baseName copyWith: base pathNameDelimiter.

].



! 
 Brazil_ToolClasses_AbstractFileDialog_1_init 

 self okButtonLabel: self  defaultOKButtonLabel.

 self showNewFolderButton:true.

 self window:nil.

 self locationButton:nil.

 self locationField:nil.

 self upButton:nil.

 self viewport:nil.

 self panels: (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 2)  OrderedCollection new.

 self okButton:nil.

 self cancelButton:nil.

 self shouldClose:false.

 self closedWithOK:false.

^ self.



! 
 respondToUpButtonClick 

 self  retargetAt: self  baseDirectory containingDirectory.

^ self.



! 
 buildNewFolderButton 

|  button |

 button := (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  Button new.

 button label:'New Folder...'; 

 action:[ 

 self  respondToNewFolder.

].

^ button.



! 
 navigateToLocationInField 

|  target |

 target := (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 2)  FileDirectory on: self  locationField text asString.

 target exists  ifFalse:[ 

 self  locationField flash.

] ifTrue:[ 

 self  retargetAt: target.

].

^ self.



! 
window: window_val window := window_val! 
 removePanelsAfter: panel 

|  index |

 index := self  panels indexOf: panel.

( self  panels size  to: index +1 by:-1) do:[ : indexToRemove | 

|  toRemove |

 toRemove := self  panels at: indexToRemove.

 self  viewport remove: toRemove visual.

 self  panels remove: toRemove.

].

^ self.



! 
 Brazil_ToolClasses_AbstractFileDialog_superInit_new 

super  new.

^ self.



! 
 buildWindow 

 self  window: (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  Window new.

 self  window title: self  defaultWindowLabel.

^ self.



! 
 refreshUpButton 

|  directoryName |

 directoryName := self  baseDirectory localName.

 self  upButton enabled: directoryName isEmpty not.

^ self.



! 
viewport: viewport_val viewport := viewport_val! 
okButtonLabel ^okButtonLabel! 
locationField ^locationField! 
 respondToCancel 

 self  closedWithOK:false.

 self  shouldClose:true.

^ self.



! 
showNewFolderButton: showNewFolderButton_val showNewFolderButton := showNewFolderButton_val! 
 buildTopRow 

|  row |

 row := (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  Row new.

 row  add: self  buildLocationField setup:[ : field | 

 field area elasticity:1.

]; 

 addBlankSize:5; 

 add: self  buildUpButton.

^ row.



! 
 afterOpen 

 self  retargetAt: self  initialDirectory.

^ self.



! 
 refreshLocationField 

 self  locationField text: self  baseDirectoryDelimitedPathName.

^ self.



! 
okButtonLabel: okButtonLabel_val okButtonLabel := okButtonLabel_val! 
 drivesPseudoDirectoryName 

^'<Drives>'.



! 
upButton ^upButton! 
 buildCenterColumn 

|  column |

 column := (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  Column new.

 column add: self  buildTopRow; 

 addBlankSize:5.

 self  viewport:( column  addNew: (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  HorizontalViewport setup:[ : it | 

 it color:( (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 2)  Color gray:9/10).

 it area elasticity:1.

]).

 column addBlankSize:10; 

  add: self  buildButtons setup:[ : it | 

 it area height:26.

]; 

 addBlankSize:5.

^ column.



! 
shouldClose ^shouldClose! 
cancelButton ^cancelButton! 
 populateWindow 

 self  window content: (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  Row new.

 self  window content addBlankSize:5; 

  add: self  buildCenterColumn setup:[ : it | 

 it area elasticity:1.

]; 

 addBlankSize:5.

^ self.



! 
locationField: locationField_val locationField := locationField_val! 
 lastDirectoryPanel 

 self  panels reverseDo:[ : each | 

 each isDirectoryPanel ifTrue:[ 

^ each.

].

].

 (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 2)  error:'invalid state - no directory panels'.

^ self.



! 
 directoriesFromHereToRootDo: aBlock 

|  here |

 here := self  baseDirectory containingDirectory.

[ 

 here localName isEmpty.

] whileFalse:[ 

 aBlock value: here.

 here := here containingDirectory.

].

( here isKindOf: (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 2)  DosFileDirectory) ifTrue:[ 

 aBlock value: here.

].

^ self.



! 
okButton ^okButton! 
 selectedPath 

 self subclassResponsibility.

^ self.



! 
 open 

|  windowSize |

 windowSize :=700 @500.

 self  buildWindow.

 self  populateWindow.

 self  window bounds:( (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 2)  theDesktop bounds center - ( windowSize //2) extent: windowSize); 

  openModalWhileFalse:[ 

 self  shouldClose.

] afterOpening:[ 

 self  afterOpen.

].

^ self  closedWithOK.



! 
shouldClose: shouldClose_val shouldClose := shouldClose_val! 
panels ^panels! 
 hereDirectory 

^ self  panels last directory.



! 
closedWithOK ^closedWithOK! 
 defaultDirectory 

^ (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 2)  FileDirectory default.



! 
 initialDirectory 

|  lastDirectoryPath  lastDirectory |

 lastDirectoryPath := (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 2)  lastVisitedDirectory.

 lastDirectoryPath isNil ifTrue:[ 

^ self  defaultDirectory.

].

 lastDirectory := (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 2)  FileDirectory on: lastDirectoryPath.

^ lastDirectory exists  ifTrue:[ 

 lastDirectory.

] ifFalse:[ 

 self  defaultDirectory.

].



! 
showNewFolderButton ^showNewFolderButton! 
 baseDirectorySummaryString 

|  base  delimiter  parts |

 base := self  baseDirectory.

 delimiter := self String with: base pathNameDelimiter.

 parts := base pathParts.

^ parts size <3  ifTrue:[ 

 base pathName , delimiter.

] ifFalse:[ 

 parts first ,'...' , delimiter , parts last , delimiter.

].



! 
 respondToLocationClick 

|  menu |

 menu := self  buildLocationMenu.

 menu  openIn: self  window desktop above: self  window.

^ self.



! 
okButton: okButton_val okButton := okButton_val! 
cancelButton: cancelButton_val cancelButton := cancelButton_val! 
 respondToDoubleClickIn: panel 

 panel selection ifNotNil:[ : item | 

 item isDirectory ifTrue:[ 

 self  retargetAt:( panel directory / item name).

].

].

^ self.



! 
 buildUpButton 

 self  upButton:( (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  Button new label:'Up').

 self  upButton action:[ 

 self  respondToUpButtonClick.

].

^ self  upButton.



! 
 retargetAt: directory 

|  seed |

 self  panels do:[ : each | 

 self  viewport remove: each visual.

].

 seed := self  createPanelFor: directory.

 self  panels:( (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 2)  OrderedCollection with: seed).

 self  viewport  add: seed visual setup:[ : it | 

 it area width:200.

].

 self  refreshLocationField.

 self  refreshUpButton.

^ self.



! 
 respondToOK 

 (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 2)  lastVisitedDirectory: self  hereDirectory pathName.

 self  closedWithOK:true.

 self  shouldClose:true.

^ self.



! 
 setupNewDirectoryPanel: panel 

 panel selectionChannel =>[ : selection | 

 self   respondToSelection: selection in: panel.

].

 panel doubleClickAction:[ 

 self  respondToDoubleClickIn: panel.

].

^ self.



! 
 addNewPanel: panel 

 self  panels add: panel.

 self  viewport  add: panel visual setup:[ : it | 

 it area width: panel desiredWidth.

].

 self  scrollViewportToEnd.

^ self.



! 
locationButton ^locationButton! 
window ^window! 
 buildLocationField 

 self  locationField: (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  TextView new.

 self  locationField enterKeyResponse:[ : defaultResponse | 

 self  navigateToLocationInField.

].

^ self  locationField.



! 
 respondToNewFolder 

|  newName |

 newName := (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  Prompter new title:'New Folder Name'; 

 open.

 newName isNil ifTrue:[ 

^ self.

].

 newName := newName withBlanksTrimmed.

 newName isEmpty ifTrue:[ 

^ self.

].

( self  hereDirectory fileOrDirectoryExists: newName) ifFalse:[ 

 self  hereDirectory createDirectory: newName.

].

 self  lastDirectoryPanel populateList; 

 selectEntryNamed: newName.

^ self.



! 
 defaultOKButtonLabel 

^'OK'.



! 
 buildLocationButton 

 self  locationButton: (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  Button new.

 self  locationButton action:[ 

 self  respondToLocationClick.

].

^ self  locationButton.



! 
  createFilePanelFor: entry in: directory 

|  panel |

 panel := (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  FilePickerFilePanel new fileEntry: entry; 

 directory: directory.

^ panel.



! 
upButton: upButton_val upButton := upButton_val! 
locationButton: locationButton_val locationButton := locationButton_val! 
 createPanelFor: directory 

|  panel |

 panel := (EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog at: 1)  FilePickerDirectoryPanel new directory: directory.

 self  setupNewDirectoryPanel: panel.

^ panel.



! 
 scrollViewportToEnd 

|  lastPanelEnd  targetPosition  overshoot |

 overshoot :=5.

 lastPanelEnd := self  panels last visual bounds right.

 targetPosition := lastPanelEnd -  self  viewport innerExtent x + overshoot.

 targetPosition > self  viewport scrollPosition x ifTrue:[ 

 self  viewport scrollPosition:(( targetPosition max:0) @0).

].

^ self.



! 
 baseDirectory 

^ self  panels first directory.



! 
 !
	! (Delta mirrorFor: #Brazil_ToolClasses_AbstractFileDialog) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ToolClasses_AbstractFileDialog := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ToolClasses_AbstractFileDialog := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ToolClasses metadata addNestedClass: Brazil_ToolClasses_AbstractFileDialog. ! 
	Brazil_ToolClasses_AbstractFileDialog metadata enclosingMixin: Brazil_ToolClasses !
	Delta define: #Brazil_ToolClasses_BrazilFileSelector as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' upButton window fileFilterHolder okAction selectedName okButton directory cancelButton filterInput fileList')
	 classVariables: 'MixinMetadata_Brazil_ToolClasses_BrazilFileSelector EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector')!
	(Delta mirrorFor: #Brazil_ToolClasses_BrazilFileSelector) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ToolClasses_BrazilFileSelector) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ToolClasses_BrazilFileSelector) comment: 'A BrazilFileSelector is a dialog box-like application with a list box and two buttons that allows to navigate the file system and select an existing file.

In the current incarnation, the selector opens modelessly and is configured with an action block that gets invoked when the user clicks the OK button. Usage example:

	| fileSelector |
	fileSelector:: BrazilFileSelector new
		fileFilter: ''*.st'';
		okAction: 
			[:filename |
			Cursor wait showWhile: [doStuffWith: filename]].
	fileSelector open

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ToolClasses_BrazilFileSelector) methodsFor: 'unclassified'!
	 createUI 

|  top  middle  bottom |

 self  createWindow.

 self  window content:( (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 1)  Column new gap:5).

 top := self  createTopPanel.

 middle := self  createMiddlePanel.

 bottom := self  createBottomPanel.

 self  window content add: top; 

 add: middle; 

 add: bottom.

 middle area elasticity:1.

^ self.



! 
 windowTitle 

^'Select a File'.



! 
fileList: fileList_val fileList := fileList_val! 
 activate: entry 

 entry isDirectory  ifTrue:[ 

 self  enterDirectory: entry.

] ifFalse:[ 

 self  finalSelection: entry.

].

^ self.



! 
cancelButton ^cancelButton! 
 fileFilter: filter 

 self  fileFilterHolder value: filter.

^ self.



! 
okAction ^okAction! 
fileList ^fileList! 
 open 

 self  createUI.

 self  refreshUI.

 self  window open.

^ self.



! 
 fileListDoubleClicked 

 self  fileList selectionDo:[ : selection | 

 self  activate: selection.

].

^ self.



! 
 refreshUI 

 self  fileFilter: self  fileFilter.

 self  populateList.

 self  okButton enabled: self  fileList hasSelection.

^ self.



! 
selectedName: selectedName_val selectedName := selectedName_val! 
 selectFileNamed: name 

|  entry |

 entry := self  fileList list  detect:[ : some | 

 some name = name.

] ifNone:[ 

^ self.

].

 self  fileList select: entry.

^ self.



! 
 enterDirectory: entry 

 self  directory:( self  directory / entry name).

 self  refreshUI.

^ self.



! 
 new 

 self Brazil_ToolClasses_BrazilFileSelector_superInit_new.

 self Brazil_ToolClasses_BrazilFileSelector_1_init.

^ self.



! 
 populateList 

|  directories  files  sortBlock |

 directories := (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 2)  OrderedCollection new.

 files := (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 2)  OrderedCollection new.

 self  directory entries do:[ : each | 

( each isDirectory  ifTrue:[ 

 directories.

] ifFalse:[ 

 files.

]) add: each.

].

 files := files select:[ : each | 

 self  fileFilter match: each name.

].

 sortBlock :=[ : a : b | 

 a name < b name.

].

 self  fileList list:(( directories sortBy: sortBlock) ,( files sortBy: sortBlock)).

^ self.



! 
okAction: okAction_val okAction := okAction_val! 
okButton ^okButton! 
filterInput: filterInput_val filterInput := filterInput_val! 
 cancelClicked 

 self  selectedName:nil.

 self  window close.

^ self.



! 
 okClicked 

 self  activate: self  fileList selection.

^ self.



! 
 newFilterTyped: ignored 

 self  fileFilter: self  filterInput text asString.

 self  refreshUI.

^ self.



! 
window: window_val window := window_val! 
 createTopPanel 

|  panel |

 panel := (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 1)  Row new gap:5.

 self  filterInput:( (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 1)  TextView new text: self  fileFilter).

 self  filterInput hasEditsFromUserChannel =>[ : a | 

 self newFilterTyped: a.

].

 self  upButton:( (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 1)  Button new label:'Up'; 

 action:[ 

 self  upClicked.

]).

 panel add: self  filterInput; 

 add: self  upButton.

 self  filterInput area elasticity:1.

 panel area height:25.

^ panel.



! 
fileFilterHolder ^fileFilterHolder! 
upButton ^upButton! 
cancelButton: cancelButton_val cancelButton := cancelButton_val! 
window ^window! 
 createWindow 

 self  window:( (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 1)  Window new title: self  windowTitle).

 self  window bounds:(300 @300 extent:(200 @300)).

^ self.



! 
directory: directory_val directory := directory_val! 
 Brazil_ToolClasses_BrazilFileSelector_superInit_new 

super  new.

^ self.



! 
 fileFilter 

^ self  fileFilterHolder value.



! 
 Brazil_ToolClasses_BrazilFileSelector_1_init 

 self directory:nil.

 self fileFilterHolder:nil.

 self window:nil.

 self filterInput:nil.

 self upButton:nil.

 self fileList:nil.

 self okButton:nil.

 self cancelButton:nil.

 self selectedName:nil.

 self okAction:nil.

^ self.



! 
directory ^directory! 
 upClicked 

|  last |

 last := self  directory.

 self  directory: self  directory containingDirectory.

 self  refreshUI.

 self  selectFileNamed: last localName.

^ self.



! 
 createBottomPanel 

|  panel |

 panel := (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 1)  Row new.

 self  okButton:( (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 1)  Button new label:'OK'; 

 action:[ 

 self  okClicked.

]).

 self  cancelButton:( (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 1)  Button new label:'Cancel'; 

 action:[ 

 self  cancelClicked.

]).

 panel add: self  okButton; 

 addBlankSize:5; 

 add: self  cancelButton.

 self  okButton area elasticity:1.

 self  cancelButton area elasticity:1.

^ panel.



! 
 finalSelection: entry 

 self  selectedName:( self  directory fullNameFor: entry name).

 self  window close.

 self  okAction ifNotNil:[ 

 self  okAction value: self  selectedName.

].

^ self.



! 
okButton: okButton_val okButton := okButton_val! 
selectedName ^selectedName! 
 initialize 

 self  directory: (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 2)  FileDirectory default.

 self  fileFilterHolder:( (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 1)  Holder with:'*').

^ self.



! 
 fileDisplayBlock 

^[ : entry | 

 entry isDirectory  ifTrue:[ 

'[-' , entry name ,'-]'.

] ifFalse:[ 

 entry name.

].

].



! 
upButton: upButton_val upButton := upButton_val! 
 createMiddlePanel 

 self  fileList: (EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector at: 1)  ListBox new.

 self  fileList displayBlock: self  fileDisplayBlock; 

 doubleClickAction:[ 

 self  fileListDoubleClicked.

].

 self  fileList selectionChanged =>[ : selection | 

 self  okButton enabled: selection notNil.

].

^ self  fileList.



! 
fileFilterHolder: fileFilterHolder_val fileFilterHolder := fileFilterHolder_val! 
filterInput ^filterInput! 
 !
	! (Delta mirrorFor: #Brazil_ToolClasses_BrazilFileSelector) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ToolClasses_BrazilFileSelector := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ToolClasses_BrazilFileSelector := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ToolClasses metadata addNestedClass: Brazil_ToolClasses_BrazilFileSelector. ! 
	Brazil_ToolClasses_BrazilFileSelector metadata enclosingMixin: Brazil_ToolClasses !
	Delta define: #Brazil_ToolClasses_BrazilInspector as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' window subject')
	 classVariables: 'MixinMetadata_Brazil_ToolClasses_BrazilInspector EnclosingObjects_Brazil_ToolClasses_BrazilInspector')!
	(Delta mirrorFor: #Brazil_ToolClasses_BrazilInspector) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ToolClasses_BrazilInspector) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ToolClasses_BrazilInspector) comment: 'Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ToolClasses_BrazilInspector) methodsFor: 'unclassified'!
	  setup: label toInspect: object 

 label mouseUpAction:[ 

 object explore.

].

^ self.



! 
window ^window! 
subject: subject_val subject := subject_val! 
window: window_val window := window_val! 
 createWindow 

 self  window: (EnclosingObjects_Brazil_ToolClasses_BrazilInspector at: 1)  Window new.

 self  window title: self  subject printString; 

 content: (EnclosingObjects_Brazil_ToolClasses_BrazilInspector at: 1)  VerticalViewport new.

^ self.



! 
subject ^subject! 
 Brazil_ToolClasses_BrazilInspector_superInit_new 

super  new.

^ self.



! 
 buildIn: container 

 self  addSelfLineTo: container.

 self  subject class allInstVarNames keysAndValuesDo:[ : index : name | 

 self   addInstVarNamed: name value:( self  subject instVarAt: index) to: container.

].

^ self.



! 
  addInstVarNamed: name value: value to: container 

 container  addNew: (EnclosingObjects_Brazil_ToolClasses_BrazilInspector at: 1)  Label setup:[ : label | 

 label label:( name ,': ' , value printString).

 self   setup: label toInspect: value.

].

^ self.



! 
 open 

 self  createWindow.

 self  buildIn: self  window content.

 self  window open.

^ self.



! 
 Brazil_ToolClasses_BrazilInspector_1_init 

 self subject:nil.

 self window:nil.

^ self.



! 
 addSelfLineTo: container 

 container  addNew: (EnclosingObjects_Brazil_ToolClasses_BrazilInspector at: 1)  Label setup:[ : label | 

 label label:('self: ' , self  subject printString).

 self   setup: label toInspect: self  subject.

].

^ self.



! 
 new 

 self Brazil_ToolClasses_BrazilInspector_superInit_new.

 self Brazil_ToolClasses_BrazilInspector_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ToolClasses_BrazilInspector) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ToolClasses_BrazilInspector := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ToolClasses_BrazilInspector := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ToolClasses metadata addNestedClass: Brazil_ToolClasses_BrazilInspector. ! 
	Brazil_ToolClasses_BrazilInspector metadata enclosingMixin: Brazil_ToolClasses !
	Delta define: #Brazil_ToolClasses_Prompter as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' initialText textView cancelled')
	 classVariables: 'MixinMetadata_Brazil_ToolClasses_Prompter EnclosingObjects_Brazil_ToolClasses_Prompter')!
	(Delta mirrorFor: #Brazil_ToolClasses_Prompter) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ToolClasses_Prompter) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ToolClasses_Prompter) comment: 'A utility dialog with a one-line text view that allows entering a short text and an OK and Cancel buttons.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ToolClasses_Prompter) methodsFor: 'unclassified'!
	 Brazil_ToolClasses_Prompter_superInit_new 

super  new.

^ self.



! 
textView: textView_val textView := textView_val! 
 respondToOK 

 self  cancelled:false.

 self shouldClose:true.

^ self.



! 
initialText: initialText_val initialText := initialText_val! 
cancelled: cancelled_val cancelled := cancelled_val! 
 createButtons 

|  row  buttons |

 buttons := (EnclosingObjects_Brazil_ToolClasses_Prompter at: 2)  OrderedCollection new.

 row := (EnclosingObjects_Brazil_ToolClasses_Prompter at: 1)  Row new addElasticBlank; 

  addNew: (EnclosingObjects_Brazil_ToolClasses_Prompter at: 1)  Button setup:[ : button | 

 buttons add: button.

 button label:'OK'; 

 action:[ 

 self  respondToOK.

].

]; 

 addBlankSize:5; 

  addNew: (EnclosingObjects_Brazil_ToolClasses_Prompter at: 1)  Button setup:[ : button | 

 buttons add: button.

 button label:'Cancel'; 

 action:[ 

 self  respondToCancel.

].

]; 

 addBlankSize:5; 

 yourself.

 (EnclosingObjects_Brazil_ToolClasses_Prompter at: 1)  CellWidthEqualizer equalizeRowElements: buttons.

^ row.



! 
 Brazil_ToolClasses_Prompter_1_init 

 self initialText:nil.

 self textView:nil.

 self cancelled:nil.

^ self.



! 
 open 

 self  createUI.

 self dialog  openModalWhileFalse:[ 

 self shouldClose.

] afterOpening:[ 

 self setWindowBounds.

].

^( self  cancelled isNil or:[ 

 self  cancelled.

])  ifTrue:[ 

nil.

] ifFalse:[ 

 self  textView text asString.

].



! 
initialText ^initialText! 
 initialize 

super  initialize.

 self  initialText: self String new.

^ self.



! 
 new 

 self Brazil_ToolClasses_Prompter_superInit_new.

 self Brazil_ToolClasses_Prompter_1_init.

^ self.



! 
 createTextView 

 self  textView: (EnclosingObjects_Brazil_ToolClasses_Prompter at: 1)  TextView new.

 self  textView text: self  initialText; 

 enterKeyResponse:[ : defaultResponse | 

 self  respondToOK.

]; 

 escapeKeyResponse:[ : defaultResponse | 

 self  respondToCancel.

].

^ self  textView.



! 
 text 

^ self  textView text asString.



! 
 respondToCancel 

 self  cancelled:true.

 self shouldClose:true.

^ self.



! 
 createUI 

 self dialog:( (EnclosingObjects_Brazil_ToolClasses_Prompter at: 1)  Window new title: self title).

 self dialog content: (EnclosingObjects_Brazil_ToolClasses_Prompter at: 1)  Column new.

 self dialog content addBlankSize:5; 

 add: self  createTextView; 

 addBlankSize:5.

 self dialog content children last area elasticity:1.

 self dialog content add: self  createButtons; 

 addBlankSize:5.

 self  textView area height:25.

^ self.



! 
textView ^textView! 
cancelled ^cancelled! 
 !
	! (Delta mirrorFor: #Brazil_ToolClasses_Prompter) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ToolClasses_Prompter := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ToolClasses_Prompter := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ToolClasses metadata addNestedClass: Brazil_ToolClasses_Prompter. ! 
	Brazil_ToolClasses_Prompter metadata enclosingMixin: Brazil_ToolClasses !
	Delta define: #Brazil_ToolClasses_FilePickerFilePanel as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' fileEntry visualX directory')
	 classVariables: 'MixinMetadata_Brazil_ToolClasses_FilePickerFilePanel EnclosingObjects_Brazil_ToolClasses_FilePickerFilePanel')!
	(Delta mirrorFor: #Brazil_ToolClasses_FilePickerFilePanel) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ToolClasses_FilePickerFilePanel) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ToolClasses_FilePickerFilePanel) comment: 'Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ToolClasses_FilePickerFilePanel) methodsFor: 'unclassified'!
	visualX ^visualX! 
 timestampString 

^( (EnclosingObjects_Brazil_ToolClasses_FilePickerFilePanel at: 2)  TimeStamp fromSeconds: self  fileEntry modificationTime) printString.



! 
 fileSizeString 

|  size  k  m  g |

 size := self  fileEntry fileSize.

 k :=1024.

 m :=1024 * k.

 g :=1024 * m.

 size < k ifTrue:[ 

^ size printString ,' bytes'.

].

 size < m ifTrue:[ 

^( self   rounded: size in: k) printString ,' K'.

].

 size < g ifTrue:[ 

^( self   rounded: size in: m) printString ,' M'.

].

^( self   rounded: size in: g) printString ,' G'.



! 
 createVisual 

 self  visualX: (EnclosingObjects_Brazil_ToolClasses_FilePickerFilePanel at: 1)  Row new.

 self  visualX addBlankSize:4; 

 add: self  createBlurb.

^ self  visualX.



! 
 createBlurb 

|  blurb |

 blurb := (EnclosingObjects_Brazil_ToolClasses_FilePickerFilePanel at: 1)  Column new.

 blurb add:( (EnclosingObjects_Brazil_ToolClasses_FilePickerFilePanel at: 1)  Label new text: self  fileEntry name); 

 add:( (EnclosingObjects_Brazil_ToolClasses_FilePickerFilePanel at: 1)  Label new text:('Size: ' , self  fileSizeString)); 

 add:( (EnclosingObjects_Brazil_ToolClasses_FilePickerFilePanel at: 1)  Label new text: self  timestampString).

^ blurb.



! 
 isDirectoryPanel 

^false.



! 
fileEntry ^fileEntry! 
 visual 

 self  visualX isNil ifTrue:[ 

 self  createVisual.

].

^ self  visualX.



! 
directory ^directory! 
 new 

 self Brazil_ToolClasses_FilePickerFilePanel_superInit_new.

 self Brazil_ToolClasses_FilePickerFilePanel_1_init.

^ self.



! 
directory: directory_val directory := directory_val! 
 Brazil_ToolClasses_FilePickerFilePanel_superInit_new 

super  new.

^ self.



! 
  rounded: size in: divisor 

^( size *10 / divisor) rounded asFloat /10.



! 
 desiredWidth 

^nil.



! 
fileEntry: fileEntry_val fileEntry := fileEntry_val! 
visualX: visualX_val visualX := visualX_val! 
 Brazil_ToolClasses_FilePickerFilePanel_1_init 

 self directory:nil.

 self fileEntry:nil.

 self visualX:nil.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ToolClasses_FilePickerFilePanel) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ToolClasses_FilePickerFilePanel := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ToolClasses_FilePickerFilePanel := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ToolClasses metadata addNestedClass: Brazil_ToolClasses_FilePickerFilePanel. ! 
	Brazil_ToolClasses_FilePickerFilePanel metadata enclosingMixin: Brazil_ToolClasses !
	Delta define: #Brazil_ToolClasses_MessageBox as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' buttonLabels selection message title buttons shouldClose dialog messageArea width buttonSelections')
	 classVariables: 'MixinMetadata_Brazil_ToolClasses_MessageBox EnclosingObjects_Brazil_ToolClasses_MessageBox')!
	(Delta mirrorFor: #Brazil_ToolClasses_MessageBox) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ToolClasses_MessageBox) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ToolClasses_MessageBox) comment: 'Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ToolClasses_MessageBox) methodsFor: 'unclassified'!
	 createUI 

|  column |

 self  dialog:( (EnclosingObjects_Brazil_ToolClasses_MessageBox at: 1)  Window new title: self  title).

 self  dialog content: (EnclosingObjects_Brazil_ToolClasses_MessageBox at: 1)  Row new.

 self  dialog content addBlankSize:10.

 column := (EnclosingObjects_Brazil_ToolClasses_MessageBox at: 1)  Column new.

 column addBlankSize:5.

 column add:( (EnclosingObjects_Brazil_ToolClasses_MessageBox at: 1)  TextDisplay new text: self  message asString).

 column addBlankSize:15.

 column children last area elasticity:1.

 column add: self  createButtonRow.

 column addBlankSize:10.

 self  dialog content add: column.

 column area elasticity:1.

 self  dialog content addBlankSize:10.

^ self.



! 
 ok: text 

 self  message: text.

 self   buttonLabels:(( self Array new:1)  at:1 put:'OK'; 

 yourself) selections:(( self Array new:1)  at:1 put:#'ok'; 

 yourself).

^ self.



! 
buttons ^buttons! 
 open 

 self  createUI.

 self  dialog  openModalWhileFalse:[ 

 self  shouldClose.

] afterOpening:[ 

 self  setWindowBounds.

].

^ self  selection.



! 
dialog ^dialog! 
shouldClose: shouldClose_val shouldClose := shouldClose_val! 
 new 

 self Brazil_ToolClasses_MessageBox_superInit_new.

 self Brazil_ToolClasses_MessageBox_1_init.

 self  ok:'<no message provided>'.

^ self.



! 
title ^title! 
message ^message! 
 yesNo: text 

 self  message: text.

 self   buttonLabels:(( self Array new:2)  at:1 put:'Yes'; 

  at:2 put:'No'; 

 yourself) selections:(( self Array new:2)  at:1 put:#'yes'; 

  at:2 put:#'no'; 

 yourself).

^ self.



! 
  buttonLabels: labels selections: selections 

 self  buttonLabels: labels.

 self  buttonSelections: selections.

^ self.



! 
 yesNoCancel: text 

 self  message: text.

 self   buttonLabels:(( self Array new:3)  at:1 put:'Yes'; 

  at:2 put:'No'; 

  at:3 put:'Cancel'; 

 yourself) selections:(( self Array new:3)  at:1 put:#'yes'; 

  at:2 put:#'no'; 

  at:3 put:#'cancel'; 

 yourself).

^ self.



! 
messageArea ^messageArea! 
width ^width! 
buttons: buttons_val buttons := buttons_val! 
buttonSelections: buttonSelections_val buttonSelections := buttonSelections_val! 
 Brazil_ToolClasses_MessageBox_superInit_new 

super  new.

^ self.



! 
selection ^selection! 
message: message_val message := message_val! 
selection: selection_val selection := selection_val! 
 oldInitialize 

 self  width:400.

 self  title: (EnclosingObjects_Brazil_ToolClasses_MessageBox at: 2)  SystemScope soleInstance systemName.

 self  shouldClose:false.

 self  ok:'<no message provided>'.

^ self.



! 
 setWindowBounds 

|  extent  bounds |

 extent := self  width isNil  ifTrue:[ 

 self  dialog content naturalExtent +(10 @0).

] ifFalse:[ 

 self  width @( self  dialog naturalHeightForWidth: self  width).

].

 bounds := self  dialog desktop centeredRectangleOfExtent: extent.

 self  dialog area bounds: bounds.

^ self.



! 
 Brazil_ToolClasses_MessageBox_1_init 

 self title: (EnclosingObjects_Brazil_ToolClasses_MessageBox at: 2)  SystemScope soleInstance systemName.

 self shouldClose:false.

 self width:400.

 self buttonLabels:nil.

 self buttonSelections:nil.

 self dialog:nil.

 self message:nil.

 self messageArea:nil.

 self buttons:nil.

 self selection:nil.

^ self.



! 
  createButtonLabelled: label selection: tag 

|  button |

 button := (EnclosingObjects_Brazil_ToolClasses_MessageBox at: 1)  Button new label: label.

 button action:[ 

 self  selection: tag.

 self  shouldClose:true.

].

^ button.



! 
buttonLabels ^buttonLabels! 
messageArea: messageArea_val messageArea := messageArea_val! 
dialog: dialog_val dialog := dialog_val! 
 okCancel: text 

 self  message: text.

 self   buttonLabels:(( self Array new:2)  at:1 put:'OK'; 

  at:2 put:'Cancel'; 

 yourself) selections:(( self Array new:2)  at:1 put:#'ok'; 

  at:2 put:#'cancel'; 

 yourself).

^ self.



! 
shouldClose ^shouldClose! 
buttonSelections ^buttonSelections! 
width: width_val width := width_val! 
title: title_val title := title_val! 
 createButtonRow 

|  buttonsOnly |

 self  buttons:( (EnclosingObjects_Brazil_ToolClasses_MessageBox at: 1)  Row new gap:5).

 buttonsOnly := (EnclosingObjects_Brazil_ToolClasses_MessageBox at: 2)  OrderedCollection new.

 self  buttons add: (EnclosingObjects_Brazil_ToolClasses_MessageBox at: 1)  Blank new.

 self  buttons children last area elasticity:1.

 self  buttonLabels  with: self  buttonSelections do:[ : label : tag | 

|  button |

 button := self   createButtonLabelled: label selection: tag.

 buttonsOnly add: button.

 self  buttons add: button.

].

 self  buttons add: (EnclosingObjects_Brazil_ToolClasses_MessageBox at: 1)  Blank new.

 (EnclosingObjects_Brazil_ToolClasses_MessageBox at: 1)  CellWidthEqualizer equalizeRowElements: buttonsOnly.

 self  buttons children last area elasticity:1.

^ self  buttons.



! 
buttonLabels: buttonLabels_val buttonLabels := buttonLabels_val! 
 !
	! (Delta mirrorFor: #Brazil_ToolClasses_MessageBox) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ToolClasses_MessageBox := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ToolClasses_MessageBox := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ToolClasses metadata addNestedClass: Brazil_ToolClasses_MessageBox. ! 
	Brazil_ToolClasses_MessageBox metadata enclosingMixin: Brazil_ToolClasses !
	Delta define: #Brazil_ToolClasses_DirectoryPicker as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_ToolClasses_DirectoryPicker EnclosingObjects_Brazil_ToolClasses_DirectoryPicker')!
	(Delta mirrorFor: #Brazil_ToolClasses_DirectoryPicker) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ToolClasses_DirectoryPicker) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ToolClasses_DirectoryPicker) comment: 'Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ToolClasses_DirectoryPicker) methodsFor: 'unclassified'!
	 defaultWindowLabel 

^'Select a Folder'.



! 
 selectedPath 

^( self closedWithOK and:[ 

 self panels size >1.

])  ifTrue:[ 

 self hereDirectory fullName.

] ifFalse:[ 

nil.

].



! 
 Brazil_ToolClasses_DirectoryPicker_superInit_new 

super  new.

^ self.



! 
 setupNewDirectoryPanel: panel 

 panel includeFiles:false.

super  setupNewDirectoryPanel: panel.

^ self.



! 
 buildButtons 

|  buttons |

 buttons :=super  buildButtons.

 self okButton enabled:false.

^ buttons.



! 
 Brazil_ToolClasses_DirectoryPicker_1_init 

^ self.



! 
 afterOpen 

|  current  parent  entry |

 parent := self initialDirectory containingDirectory.

 parent fullName = self initialDirectory fullName ifTrue:[ 

^super  afterOpen.

].

 entry := self initialDirectory directoryEntry.

 self retargetAt: parent.

 self   respondToSelection: entry in: self panels first.

^ self.



! 
  respondToSelection: item in: panel 

super   respondToSelection: item in: panel.

 self okButton enabled:( self panels size >1).

^ self.



! 
 new 

 self Brazil_ToolClasses_DirectoryPicker_superInit_new.

 self Brazil_ToolClasses_DirectoryPicker_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ToolClasses_DirectoryPicker) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ToolClasses_DirectoryPicker := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ToolClasses_DirectoryPicker := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ToolClasses metadata addNestedClass: Brazil_ToolClasses_DirectoryPicker. ! 
	Brazil_ToolClasses_DirectoryPicker metadata enclosingMixin: Brazil_ToolClasses !
	Delta define: #Brazil_ToolClasses_BrazilDirectorySelector as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_ToolClasses_BrazilDirectorySelector EnclosingObjects_Brazil_ToolClasses_BrazilDirectorySelector')!
	(Delta mirrorFor: #Brazil_ToolClasses_BrazilDirectorySelector) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ToolClasses_BrazilDirectorySelector) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ToolClasses_BrazilDirectorySelector) comment: 'A dialog box-like application that presents a list of subdirectories of a given directory and allows to navigate in the directory tree.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ToolClasses_BrazilDirectorySelector) methodsFor: 'unclassified'!
	 Brazil_ToolClasses_BrazilDirectorySelector_1_init 

^ self.



! 
 windowTitle 

^'Select a Directory'.



! 
 Brazil_ToolClasses_BrazilDirectorySelector_superInit_new 

super  new.

^ self.



! 
 populateList 

|  directories  sortBlock |

 directories := (EnclosingObjects_Brazil_ToolClasses_BrazilDirectorySelector at: 2)  OrderedCollection new.

 self directory entries do:[ : each | 

 each isDirectory ifTrue:[ 

 directories add: each.

].

].

 sortBlock :=[ : a : b | 

 a name < b name.

].

 self fileList list:( directories sortBy: sortBlock).

^ self.



! 
 new 

 self Brazil_ToolClasses_BrazilDirectorySelector_superInit_new.

 self Brazil_ToolClasses_BrazilDirectorySelector_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ToolClasses_BrazilDirectorySelector) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ToolClasses_BrazilDirectorySelector := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ToolClasses_BrazilDirectorySelector := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ToolClasses metadata addNestedClass: Brazil_ToolClasses_BrazilDirectorySelector. ! 
	Brazil_ToolClasses_BrazilDirectorySelector metadata enclosingMixin: Brazil_ToolClasses !
	Delta define: #Brazil_VisualClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' MappableHolder Brazil_VisualClasses_HorizontalVisualSequence_slot Anchor FutureArea Brazil_VisualClasses_LeafVisual_slot Blank Brazil_VisualClasses_Visual_slot RowCell Brazil_VisualClasses_BoxShape_slot Brazil_VisualClasses_VisualSequence_slot Brazil_VisualClasses_ContainerVisual_slot ColumnCell Duct Brazil_VisualClasses_Shape_slot Frame InformationRetriever ShapeArea Attribute Wrapper Brazil_VisualClasses_VisualCollection_slot GridRowCell HierarchicalReporter Brazil_VisualClasses_VerticalVisualSequence_slot')
	 classVariables: 'MixinMetadata_Brazil_VisualClasses EnclosingObjects_Brazil_VisualClasses')!
	(Delta mirrorFor: #Brazil_VisualClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_VisualClasses) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_VisualClasses) comment: #''!
	! (Delta mirrorFor: #Brazil_VisualClasses) methodsFor: 'unclassified'!
	 postInit 

 self  Attribute: (EnclosingObjects_Brazil_VisualClasses at: 1)  plumbing Attribute.

 self  ShapeArea: (EnclosingObjects_Brazil_VisualClasses at: 1)  areas ShapeArea.

 self  Duct: (EnclosingObjects_Brazil_VisualClasses at: 1)  plumbing Duct.

 self  FutureArea: (EnclosingObjects_Brazil_VisualClasses at: 1)  areas FutureArea.

 self  MappableHolder: (EnclosingObjects_Brazil_VisualClasses at: 1)  plumbing MappableHolder.

 self  InformationRetriever: (EnclosingObjects_Brazil_VisualClasses at: 1)  plumbing InformationRetriever.

 self  Frame: (EnclosingObjects_Brazil_VisualClasses at: 1)  areas Frame.

 self  Anchor: (EnclosingObjects_Brazil_VisualClasses at: 1)  areas Anchor.

 self  GridRowCell: (EnclosingObjects_Brazil_VisualClasses at: 1)  areas GridRowCell.

 self  RowCell: (EnclosingObjects_Brazil_VisualClasses at: 1)  areas RowCell.

 self  ColumnCell: (EnclosingObjects_Brazil_VisualClasses at: 1)  areas ColumnCell.

 self  HierarchicalReporter: (EnclosingObjects_Brazil_VisualClasses at: 1)  plumbing HierarchicalReporter.

 self  Wrapper: (EnclosingObjects_Brazil_VisualClasses at: 1)  containers Wrapper.

 self  Blank: (EnclosingObjects_Brazil_VisualClasses at: 1)  widgets Blank.

^ self.



! 
HierarchicalReporter: HierarchicalReporter_val HierarchicalReporter := HierarchicalReporter_val! 
GridRowCell ^GridRowCell! 
Attribute: Attribute_val Attribute := Attribute_val! 
GridRowCell: GridRowCell_val GridRowCell := GridRowCell_val! 
FutureArea: FutureArea_val FutureArea := FutureArea_val! 
Anchor: Anchor_val Anchor := Anchor_val! 
RowCell ^RowCell! 
Wrapper: Wrapper_val Wrapper := Wrapper_val! 
Duct ^Duct! 
 Brazil_VisualClasses_1_init 

 self Attribute:nil.

 self ShapeArea:nil.

 self Duct:nil.

 self FutureArea:nil.

 self MappableHolder:nil.

 self InformationRetriever:nil.

 self Frame:nil.

 self Anchor:nil.

 self GridRowCell:nil.

 self RowCell:nil.

 self ColumnCell:nil.

 self HierarchicalReporter:nil.

 self Wrapper:nil.

 self Blank:nil.

^ self.



! 
MappableHolder: MappableHolder_val MappableHolder := MappableHolder_val! 
 new 

 self Brazil_VisualClasses_superInit_new.

 self Brazil_VisualClasses_1_init.

^ self.



! 
VisualCollection
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_VisualClasses_VisualCollection_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_VisualClasses 
			nestedMixins at: #Brazil_VisualClasses_VisualCollection.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_VisualClasses Mirror on: self  ContainerVisual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_VisualClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_VisualClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_VisualClasses_VisualCollection_slot := myNested.
		].
	^Brazil_VisualClasses_VisualCollection_slot! 
ColumnCell: ColumnCell_val ColumnCell := ColumnCell_val! 
ShapeArea: ShapeArea_val ShapeArea := ShapeArea_val! 
Wrapper ^Wrapper! 
Shape
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_VisualClasses_Shape_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_VisualClasses 
			nestedMixins at: #Brazil_VisualClasses_Shape.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_VisualClasses Mirror on: self  LeafVisual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_VisualClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_VisualClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_VisualClasses_Shape_slot := myNested.
		].
	^Brazil_VisualClasses_Shape_slot! 
InformationRetriever ^InformationRetriever! 
HorizontalVisualSequence
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_VisualClasses_HorizontalVisualSequence_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_VisualClasses 
			nestedMixins at: #Brazil_VisualClasses_HorizontalVisualSequence.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_VisualClasses Mirror on: self  VisualSequence)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_VisualClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_VisualClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_VisualClasses_HorizontalVisualSequence_slot := myNested.
		].
	^Brazil_VisualClasses_HorizontalVisualSequence_slot! 
MappableHolder ^MappableHolder! 
 Brazil_VisualClasses_superInit_new 

super  new.

^ self.



! 
Anchor ^Anchor! 
FutureArea ^FutureArea! 
LeafVisual
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_VisualClasses_LeafVisual_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_VisualClasses 
			nestedMixins at: #Brazil_VisualClasses_LeafVisual.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_VisualClasses Mirror on: self  Visual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_VisualClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_VisualClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_VisualClasses_LeafVisual_slot := myNested.
		].
	^Brazil_VisualClasses_LeafVisual_slot! 
ColumnCell ^ColumnCell! 
ContainerVisual
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_VisualClasses_ContainerVisual_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_VisualClasses 
			nestedMixins at: #Brazil_VisualClasses_ContainerVisual.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_VisualClasses Mirror on: self  Visual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_VisualClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_VisualClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_VisualClasses_ContainerVisual_slot := myNested.
		].
	^Brazil_VisualClasses_ContainerVisual_slot! 
Frame: Frame_val Frame := Frame_val! 
BoxShape
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_VisualClasses_BoxShape_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_VisualClasses 
			nestedMixins at: #Brazil_VisualClasses_BoxShape.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_VisualClasses Mirror on: self  Shape)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_VisualClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_VisualClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_VisualClasses_BoxShape_slot := myNested.
		].
	^Brazil_VisualClasses_BoxShape_slot! 
VisualSequence
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_VisualClasses_VisualSequence_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_VisualClasses 
			nestedMixins at: #Brazil_VisualClasses_VisualSequence.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_VisualClasses Mirror on: self  VisualCollection)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_VisualClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_VisualClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_VisualClasses_VisualSequence_slot := myNested.
		].
	^Brazil_VisualClasses_VisualSequence_slot! 
VerticalVisualSequence
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_VisualClasses_VerticalVisualSequence_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_VisualClasses 
			nestedMixins at: #Brazil_VisualClasses_VerticalVisualSequence.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_VisualClasses Mirror on: self  VisualSequence)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_VisualClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_VisualClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_VisualClasses_VerticalVisualSequence_slot := myNested.
		].
	^Brazil_VisualClasses_VerticalVisualSequence_slot! 
Blank: Blank_val Blank := Blank_val! 
ShapeArea ^ShapeArea! 
Attribute ^Attribute! 
RowCell: RowCell_val RowCell := RowCell_val! 
Duct: Duct_val Duct := Duct_val! 
HierarchicalReporter ^HierarchicalReporter! 
Frame ^Frame! 
Visual
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_VisualClasses_Visual_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_VisualClasses 
			nestedMixins at: #Brazil_VisualClasses_Visual.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_VisualClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_VisualClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_VisualClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_VisualClasses_Visual_slot := myNested.
		].
	^Brazil_VisualClasses_Visual_slot! 
InformationRetriever: InformationRetriever_val InformationRetriever := InformationRetriever_val! 
Blank ^Blank! 
 !
	! (Delta mirrorFor: #Brazil_VisualClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_VisualClasses := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_VisualClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil metadata addNestedClass: Brazil_VisualClasses. ! 
	Brazil_VisualClasses metadata enclosingMixin: Brazil !
	Delta define: #Brazil_VisualClasses_Visual as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' parent owner visibleA updateLockLevel duct agent currentNaturalExtent area boundsH')
	 classVariables: 'MixinMetadata_Brazil_VisualClasses_Visual EnclosingObjects_Brazil_VisualClasses_Visual')!
	(Delta mirrorFor: #Brazil_VisualClasses_Visual) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_VisualClasses_Visual) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_VisualClasses_Visual) comment: #''!
	! (Delta mirrorFor: #Brazil_VisualClasses_Visual) methodsFor: 'unclassified'!
	 createAgentSubtreeUsing: agentFactory 

 self createAgentUsing: agentFactory.

 self  childrenDo:[ : each | 

 each createAgentSubtreeUsing: agentFactory.

].

^ self.



! 
 finishedMapping 

 self  childrenDo:[ : each | 

 each finishedMapping.

].

 self  agent finishedMapping.

 self  updateGeometricProperties.

^ self.



! 
 announceLayoutChange 

 self  notifications send:#'layoutChanged'.

^ self.



! 
 isBlank 

^false.



! 
 legalAreaClassesInVerticalVisualSequence 

^( self Array new:1)  at:1 put: (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  ColumnCell; 

 yourself.



! 
 setupAreaForWindow 

 self  setArea:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Frame visual: self) fullyCoverParent.

^ self.



! 
 reiterateBounds 

 self  setBounds: self  bounds.

 self  childrenDo:[ : each | 

 each reiterateBounds.

].

^ self.



! 
 Brazil_VisualClasses_Visual_1_init 

 self parent:nil.

 self agent:nil.

 self owner:nil.

 self visibleA:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Attribute  name:#'visible' value:true).

 self duct:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Duct owner: self).

 self area: (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  FutureArea new.

 self boundsH:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  MappableHolder with:(0 @0 corner:(0 @0))).

 self updateLockLevel:1.

 self currentNaturalExtent:(0 @0).

^ self.



! 
 isAreaClassLegalForSelf: aClass 

^ self  parent isNil or:[ 

(( self  parent legalAreaClassesFor: self) select:[ : some | 

 aClass includesBehavior: some.

]) isEmpty not.

].



! 
duct: duct_val duct := duct_val! 
area: area_val area := area_val! 
 blockIncrementalLayoutUpdatesWhile: aBlock 

|  result |

 result := self blockIncrementalLayoutUpdatesSilentlyWhile: aBlock.

 self  updateLockLevel <1 ifTrue:[ 

 self  flushLayoutCaches.

 self  requestBoundsUpdateUsing:[ : newBounds | 

 self  forceBounds: newBounds.

].

].

^ result.



! 
 new 

 self Brazil_VisualClasses_Visual_superInit_new.

 self Brazil_VisualClasses_Visual_1_init.

^ self.



! 
 childrenReverseDo: action 

^ self  children reverseDo: action.



! 
 mousePoint 

^ self  agent  ifNil:[ 

0 @0.

] ifNotNil:[ : it | 

 it mousePoint.

].



! 
 origin 

^ self  bounds origin.



! 
 areUpdatesLocked 

^ self  updateLockLevel >0.



! 
 windowRelativeBounds 

^ self  localBounds translateBy:( self globalOrigin -  self  window globalOrigin).



! 
 wrapped 

^ (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Wrapper with: self.



! 
 setArea: newArea 

|  oldArea |

 oldArea := self  area.

 self  area: newArea.

 oldArea notNil ifTrue:[ 

 oldArea copyConfigurationTo: self  area.

].

^ self.



! 
 requestBoundsUpdate 

 self  requestBoundsUpdateUsing:[ : newBounds | 

 self  occupyBounds: newBounds.

].

^ self.



! 
 flushLayoutCaches 

 self  area flushLayoutCaches.

 self  agent ifNotNil:[ : it | 

 it flushLayoutCaches.

].

 self  childrenDo:[ : each | 

 each flushLayoutCaches.

].

^ self.



! 
 mapSubtree 

 self  mapSubtreeUsing: self  desktop mapping.

 self  requestBoundsUpdateUsing:[ : newBounds | 

 self  forceBounds: newBounds.

].

^ self.



! 
 printHierarchyLayoutReportOn: aStream 

 self printLayoutReportOn: aStream.

 self  parent ifNotNil:[ : it | 

 aStream cr.

 it printHierarchyLayoutReportOn: aStream.

].

^ self.



! 
 reportNaturalExtentChange 

 self  flushLayoutCaches.

#'BOGUS' yourself.

 self  requestBoundsUpdate.

 self  announceNaturalExtentChange.

^ self.



! 
duct ^duct! 
 addTo: parent 

 parent add: self.

^ self.



! 
 legalAreaClassesInGridRow 

^( self Array new:1)  at:1 put: (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  GridRowCell; 

 yourself.



! 
owner ^owner! 
 releaseMouse 

 self  agent ifNotNil:[ : it | 

 it releaseMouse.

].

^ self.



! 
 childrenDo: aBlock 

 self subclassResponsibility.

^ self.



! 
 ensureUpToDateAppearance 

 self  agent ifNotNil:[ : it | 

 it ensureUpToDateAppearance.

].

^ self.



! 
 refreshLayout 

 self  flushLayoutCaches.

 self  requestBoundsUpdateUsing:[ : newBounds | 

 self  forceBounds: newBounds.

].

^ self.



! 
 extent 

^ self  bounds extent.



! 
visibleA: visibleA_val visibleA := visibleA_val! 
 unmapSubtree 

 self unmap.

 self  parent agent ifNotNil:[ : it | 

 it noticeChangeInChildAgentStructure.

].

^ self.



! 
 setupAreaForGridRow 

 self  setArea:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  GridRowCell visual: self).

^ self.



! 
 legalAreaClassesInFlow 

^( self Array new:2)  at:1 put: (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Frame; 

  at:2 put: (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Anchor; 

 yourself.



! 
 parentMayAccommodateNaturalWidthChange 

^ self  hasParent and:[ 

 self  area mayAccommodateVisualsNaturalWidthChange.

].



! 
 parentMayAccommodateNaturalHeightChange 

^ self  hasParent and:[ 

 self  area mayAccommodateVisualsNaturalHeightChange.

].



! 
 effectivelyVisible 

^ self  visible and:[ 

 self  parent isNil or:[ 

 self  parent effectivelyVisible.

].

].



! 
 setupAreaForVerticalViewport 

 self  setArea:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  ColumnCell visual: self).

^ self.



! 
 setupAreaForFlow 

 self  setArea:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Anchor visual: self).

^ self.



! 
 updateGeometricProperties 

 self  currentNaturalExtent: self  computeNaturalExtent.

^ self.



! 
 setupAreaForColumn 

 self  setArea:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  ColumnCell visual: self).

^ self.



! 
area ^area! 
 unmap 

 self  agent notNil ifTrue:[ 

 self  agent destroy.

 self  agent:nil.

].

 self  childrenDo:[ : each | 

 each unmap.

].

 self  area flushLayoutCaches.

^ self.



! 
 legalAreaClassesInCompositeVisual 

^( self Array new:2)  at:1 put: (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Frame; 

  at:2 put: (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Anchor; 

 yourself.



! 
 isSqueezing 

^ self  area isSqueezing.



! 
 reportToTranscript: reportBlock 

 self  report: reportBlock using:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  HierarchicalReporter on: (EnclosingObjects_Brazil_VisualClasses_Visual at: 2)  Transcript).

^ self.



! 
 occupyBoundsResponse: newBounds 

 self setBounds: newBounds.

^ self.



! 
 setupAreaForRow 

 self  setArea:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  RowCell visual: self).

^ self.



! 
currentNaturalExtent: currentNaturalExtent_val currentNaturalExtent := currentNaturalExtent_val! 
 printOn: aStream 

super  printOn: aStream.

 aStream space; 

 nextPutAll:'in '; 

 print: self  area class.

^ self.



! 
 window 

^ self  parent ifNotNil:[ 

 self  parent window.

].



! 
boundsH: boundsH_val boundsH := boundsH_val! 
 localBounds 

^0 @0 extent: self  extent.



! 
boundsH ^boundsH! 
 bounds 

^ self  boundsH value.



! 
agent ^agent! 
 computeNaturalExtent 

 self subclassResponsibility.

^ self.



! 
 boundsChangedChannel 

^ self  boundsH changed.



! 
 setBounds: newBounds 

 self  boundsH value: newBounds.

^ self.



! 
 Brazil_VisualClasses_Visual_superInit_new 

super  new.

^ self.



! 
 reportGeometryToTranscript 

 self  reportToTranscript:[ : visual : reporter | 

 reporter print: visual; 

 nextPutAll:' ('; 

 print: visual bounds; 

 nextPutAll:') n.e.: '; 

 print: visual naturalExtent.

].

^ self.



! 
 forceBoundsResponse: newBounds 

 self  boundsH value: newBounds.

^ self.



! 
 allChildrenDo: aBlock 

 self  childrenDo:[ : each | 

 aBlock value: each.

 each allChildrenDo: aBlock.

].

^ self.



! 
 discardMappings 

 self  agent ifNotNil:[ 

 self  agent deactivate.

 self  agent:nil.

].

 self  childrenDo:[ : each | 

 each discardMappings.

].

 self  area flushLayoutCaches.

^ self.



! 
 unlinkFromParent 

 self  incrementUpdateLockLevelBy:1.

 self  unmapSubtree.

 self  parent:nil.

 self  flushLayoutCaches.

^ self.



! 
 setupAreaForHorizontalViewport 

 self  setArea:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  RowCell visual: self).

^ self.



! 
 createAgentUsing: agentFactory 

 self subclassResponsibility.

^ self.



! 
 visible: state 

 self  visibleA value: state.

^ self.



! 
updateLockLevel ^updateLockLevel! 
agent: agent_val agent := agent_val! 
 linkToParent: theParent 

 self  parent: theParent.

 self  area isFuture ifTrue:[ 

 self  parent setupAreaIn: self.

].

( self  isAreaClassLegalForSelf: self  area class) ifFalse:[ 

 (EnclosingObjects_Brazil_VisualClasses_Visual at: 2)  error:'the child was given an invalid area for this parent'.

].

 self  flushLayoutCaches.

 self  incrementUpdateLockLevelBy:( self  parent updateLockLevel -  self  updateLockLevel).

^ self.



! 
 hasParent 

^ self  parent notNil.



! 
 setupAreaForWrapper 

 self  setArea:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Anchor visual: self).

^ self.



! 
  report: reportBlock using: aReporter 

 reportBlock  value: self value: aReporter.

 aReporter increaseIndent.

 self  childrenDo:[ : each | 

 aReporter cr.

 each  report: reportBlock using: aReporter.

].

 aReporter decreaseIndent.

^ self.



! 
 blockIncrementalLayoutUpdatesSilentlyWhile: aBlock 

 self  incrementUpdateLockLevelBy:1.

^ aBlock ensure:[ 

 self  incrementUpdateLockLevelBy:-1.

].



! 
 setupAreaForCompositeVisual 

 self  setArea:( (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Frame visual: self).

^ self.



! 
 hierarchyLayoutReport 

|  stream |

 stream := (EnclosingObjects_Brazil_VisualClasses_Visual at: 2)  CharacterReadWriteStream on: self String new.

 self  printHierarchyLayoutReportOn: stream.

^ stream contents.



! 
owner: owner_val owner := owner_val! 
 isSquishy 

^false.



! 
 report: reportBlock 

|  reporter |

 reporter := (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  HierarchicalReporter new.

 self   report: reportBlock using: reporter.

^ reporter contents.



! 
 requestBoundsUpdateUsing: aBlock 

 self  updateLockLevel <1 ifTrue:[ 

 self  area visualRequestsBoundsUpdateUsing: aBlock.

].

^ self.



! 
 containsMouse 

^ self  localBounds containsPoint: self  mousePoint.



! 
 globalOrigin 

^ self  parent ==nil  ifTrue:[ 

 self  origin.

] ifFalse:[ 

 self  parent globalOriginForChildren + self  origin.

].



! 
updateLockLevel: updateLockLevel_val updateLockLevel := updateLockLevel_val! 
 notifications 

^ self  duct.



! 
 areaClass: aClass 

( self  isAreaClassLegalForSelf: aClass) ifFalse:[ 

 (EnclosingObjects_Brazil_VisualClasses_Visual at: 2)  error:'invalid area class for this parent-child combination'.

].

 self  setArea:( aClass visual: self).

 self  requestBoundsUpdate.

^ self.



! 
parent: parent_val parent := parent_val! 
 printLayoutReportOn: aStream 

 aStream print: self; 

 cr; 

 nextPutAll:'bounds: '; 

 print: self  bounds; 

 nextPutAll:' (extent: '; 

 print: self  extent; 

 nextPutAll:')'; 

 cr; 

 nextPutAll:'currentNE: '; 

 print: self  currentNaturalExtent; 

 cr.

^ self.



! 
 reportGeometry 

^ self  report:[ : visual : reporter | 

 reporter print: visual; 

 nextPutAll:' ('; 

 print: visual bounds; 

 nextPutAll:') n.e.: '; 

 print: visual naturalExtent.

].



! 
 installSpy 

|  spy |

 self  parent isNil ifTrue:[ 

^ (EnclosingObjects_Brazil_VisualClasses_Visual at: 2)  error:'no parent'.

].

( self  parent isKindOf: (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Visual) ifFalse:[ 

^ (EnclosingObjects_Brazil_VisualClasses_Visual at: 2)  error:'already spying'.

].

 spy := (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  InformationRetriever  parent: self  parent child: self.

 self  parent  installInformationRetriever: spy on: self.

 self  parent: spy upwardInterceptor.

^ self.



! 
 isMapped 

^ self  agent ~~nil and:[ 

 self  agent fullyMapped.

].



! 
 legalAreaClassesInHorizontalVisualSequence 

^( self Array new:1)  at:1 put: (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  RowCell; 

 yourself.



! 
 flash 

 self  isMapped ifTrue:[ 

 self  agent flash.

].

^ self.



! 
 isDescendantOf: another 

^ self  parent == another or:[ 

 self  parent notNil and:[ 

 self  parent isDescendantOf: another.

].

].



! 
 incrementUpdateLockLevelBy: delta 

 self  withAllChildrenDo:[ : each | 

 each updateLockLevel:( each updateLockLevel + delta).

].

^ self.



! 
 hasChildren 

 self  childrenDo:[ : any | 

^true.

].

^false.



! 
 affectsNaturalExtent: attribute 

 attribute changed =>[ : ignored | 

 self  reportNaturalExtentChange.

].

^ self.



! 
 naturalHeightForWidth: width 

^ self  naturalExtent y.



! 
 naturalExtent 

^ self  currentNaturalExtent.



! 
 legalAreaClassesInWrapper 

^( self Array new:2)  at:1 put: (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Frame; 

  at:2 put: (EnclosingObjects_Brazil_VisualClasses_Visual at: 1)  Anchor; 

 yourself.



! 
 announceNaturalExtentChange 

 self  agent ifNotNil:[ : it | 

 it noticeChangeInNaturalExtent.

].

 self  notifications send:#'naturalExtentChanged'.

^ self.



! 
parent ^parent! 
 desktop 

^ self  parent ifNotNil:[ 

 self  parent desktop.

].



! 
 children 

|  result |

 result := (EnclosingObjects_Brazil_VisualClasses_Visual at: 2)  OrderedCollection new:10.

 self childrenDo:[ : each | 

 result add: each.

].

^ result.



! 
 withAllChildrenDo: aBlock 

 aBlock value: self.

 self  allChildrenDo: aBlock.

^ self.



! 
 visible 

^ self  visibleA value.



! 
 grabMouse 

 self  agent ifNotNil:[ : it | 

 it grabMouse.

].

^ self.



! 
 occupyBounds: newBounds 

|  endK |

 endK := self  agent ifNotNil:[ : it | 

 it noteBeginningOfBoundsChangeAndProvideEndContinuation.

].

[ 

 self  occupyBoundsResponse: newBounds.

] ensure:[ 

 endK ifNotNil:[ : it | 

 it value.

].

].

^ self.



! 
 mapSubtreeUsing: agentFactory 

 self createAgentSubtreeUsing: agentFactory.

 self  agent createArtifactsForSubtree.

 self finishedMapping.

 self  parent agent noticeChangeInChildAgentStructure.

^ self.



! 
visibleA ^visibleA! 
 forceBounds: newBounds 

|  endK |

 endK := self  agent ifNotNil:[ : it | 

 it noteBeginningOfBoundsChangeAndProvideEndContinuation.

].

[ 

 self  forceBoundsResponse: newBounds.

] ensure:[ 

 endK ifNotNil:[ : it | 

 it value.

].

].

^ self.



! 
currentNaturalExtent ^currentNaturalExtent! 
  on: expected do: action 

^ self  notifications =>[ : received | 

 received = expected ifTrue:[ 

 action value.

].

].



! 
 !
	! (Delta mirrorFor: #Brazil_VisualClasses_Visual) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_VisualClasses_Visual := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_VisualClasses_Visual := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_VisualClasses metadata addNestedClass: Brazil_VisualClasses_Visual. ! 
	Brazil_VisualClasses_Visual metadata enclosingMixin: Brazil_VisualClasses !
	Delta define: #Brazil_VisualClasses_Shape as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' entryAction borderColorA exitAction mouseUpAction mouseDownAction mouseMovedAction colorA borderWidthA')
	 classVariables: 'MixinMetadata_Brazil_VisualClasses_Shape EnclosingObjects_Brazil_VisualClasses_Shape')!
	(Delta mirrorFor: #Brazil_VisualClasses_Shape) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_VisualClasses_Shape) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_VisualClasses_Shape) comment: #''!
	! (Delta mirrorFor: #Brazil_VisualClasses_Shape) methodsFor: 'unclassified'!
	 Brazil_VisualClasses_Shape_superInit_new 

super  new.

^ self.



! 
mouseMovedAction ^mouseMovedAction! 
 mouseEntryResponse: response 

 self  entryAction: response.

^ self.



! 
exitAction ^exitAction! 
 borderWidth: width 

 self  borderWidthA value: width.

^ self.



! 
borderWidthA: borderWidthA_val borderWidthA := borderWidthA_val! 
 respondToMouseDownLeft 

 self  mouseDownAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 Brazil_VisualClasses_Shape_1_init 

 self colorA:( (EnclosingObjects_Brazil_VisualClasses_Shape at: 1)  Attribute  name:#'color' value: (EnclosingObjects_Brazil_VisualClasses_Shape at: 2)  Color black).

 self borderColorA:( (EnclosingObjects_Brazil_VisualClasses_Shape at: 1)  Attribute  name:#'borderColor' value: (EnclosingObjects_Brazil_VisualClasses_Shape at: 2)  Color black).

 self borderWidthA:( (EnclosingObjects_Brazil_VisualClasses_Shape at: 1)  Attribute  name:#'borderWidth' value:0).

 self entryAction:nil.

 self exitAction:nil.

 self mouseDownAction:nil.

 self mouseUpAction:nil.

 self mouseMovedAction:nil.

^ self.



! 
mouseDownAction ^mouseDownAction! 
 color: aColor 

 self  colorA value: aColor.

^ self.



! 
 new 

 self Brazil_VisualClasses_Shape_superInit_new.

 self Brazil_VisualClasses_Shape_1_init.

^ self.



! 
borderColorA: borderColorA_val borderColorA := borderColorA_val! 
 mouseExitResponse: response 

 self  exitAction: response.

^ self.



! 
mouseUpAction ^mouseUpAction! 
 borderWidth 

^ self  borderWidthA value.



! 
mouseUpAction: mouseUpAction_val mouseUpAction := mouseUpAction_val! 
colorA ^colorA! 
 setupAreaForCompositeVisual 

 self setArea:( (EnclosingObjects_Brazil_VisualClasses_Shape at: 1)  ShapeArea visual: self).

^ self.



! 
borderColorA ^borderColorA! 
mouseMovedAction: mouseMovedAction_val mouseMovedAction := mouseMovedAction_val! 
 respondToMouseUpLeft 

 self  mouseUpAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 borderColor 

^ self  borderColorA value.



! 
exitAction: exitAction_val exitAction := exitAction_val! 
 respondToMouseEntry 

 self  entryAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 respondToMouseMove 

 self  mouseMovedAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 respondToMouseExit 

 self  exitAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 color 

^ self  colorA value.



! 
 borderColor: aColor 

 self  borderColorA value: aColor.

^ self.



! 
mouseDownAction: mouseDownAction_val mouseDownAction := mouseDownAction_val! 
 legalAreaClassesInCompositeVisual 

^(( self Array new:1)  at:1 put: (EnclosingObjects_Brazil_VisualClasses_Shape at: 1)  ShapeArea; 

 yourself) ,super  legalAreaClassesInCompositeVisual.



! 
 mouseUpLeftResponse: response 

 self  mouseUpAction: response.

^ self.



! 
entryAction: entryAction_val entryAction := entryAction_val! 
colorA: colorA_val colorA := colorA_val! 
 mouseMoveResponse: response 

 self  mouseMovedAction: response.

^ self.



! 
borderWidthA ^borderWidthA! 
 mouseDownLeftResponse: response 

 self  mouseDownAction: response.

^ self.



! 
entryAction ^entryAction! 
 !
	! (Delta mirrorFor: #Brazil_VisualClasses_Shape) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_VisualClasses_Shape := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_VisualClasses_Shape := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_VisualClasses metadata addNestedClass: Brazil_VisualClasses_Shape. ! 
	Brazil_VisualClasses_Shape metadata enclosingMixin: Brazil_VisualClasses !
	Delta define: #Brazil_VisualClasses_ContainerVisual as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' colorA')
	 classVariables: 'MixinMetadata_Brazil_VisualClasses_ContainerVisual EnclosingObjects_Brazil_VisualClasses_ContainerVisual')!
	(Delta mirrorFor: #Brazil_VisualClasses_ContainerVisual) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_VisualClasses_ContainerVisual) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_VisualClasses_ContainerVisual) comment: #''!
	! (Delta mirrorFor: #Brazil_VisualClasses_ContainerVisual) methodsFor: 'unclassified'!
	 globalOriginForChildren 

^ self globalOrigin.



! 
 color 

^ self  colorA value.



! 
 Brazil_VisualClasses_ContainerVisual_superInit_new 

super  new.

^ self.



! 
 innerExtent 

^ self  innerBounds extent.



! 
 mayAccommodateNaturalWidthChangeOf: child 

^ self parentMayAccommodateNaturalWidthChange.



! 
 innerBounds 

 self subclassResponsibility.

^ self.



! 
 color: newColor 

 self  colorA value: newColor.

^ self.



! 
 compositionExtent 

^ self  innerExtent.



! 
 new 

 self Brazil_VisualClasses_ContainerVisual_superInit_new.

 self Brazil_VisualClasses_ContainerVisual_1_init.

^ self.



! 
  child: child requestsBoundsUpdateUsing: continuation 

 self subclassResponsibility.

^ self.



! 
 setupAreaIn: child 

 self subclassResponsibility.

^ self.



! 
 restructuring: restructureBlock 

|  result |

 self notifications send:#'childrenChanging'.

 result := restructureBlock value.

 self notifications send:#'childrenChanged'.

^ result.



! 
 legalAreaClassesFor: child 

 self subclassResponsibility.

^ self.



! 
 compositionBounds 

^0 @0 extent: self  innerExtent.



! 
 Brazil_VisualClasses_ContainerVisual_1_init 

 self colorA:( (EnclosingObjects_Brazil_VisualClasses_ContainerVisual at: 1)  Attribute  name:#'color' value: (EnclosingObjects_Brazil_VisualClasses_ContainerVisual at: 2)  Color transparent).

^ self.



! 
 mayAccommodateNaturalHeightChangeOf: child 

^ self parentMayAccommodateNaturalHeightChange.



! 
colorA: colorA_val colorA := colorA_val! 
colorA ^colorA! 
 !
	! (Delta mirrorFor: #Brazil_VisualClasses_ContainerVisual) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_VisualClasses_ContainerVisual := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_VisualClasses_ContainerVisual := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_VisualClasses metadata addNestedClass: Brazil_VisualClasses_ContainerVisual. ! 
	Brazil_VisualClasses_ContainerVisual metadata enclosingMixin: Brazil_VisualClasses !
	Delta define: #Brazil_VisualClasses_VisualCollection as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' childrenX')
	 classVariables: 'MixinMetadata_Brazil_VisualClasses_VisualCollection EnclosingObjects_Brazil_VisualClasses_VisualCollection')!
	(Delta mirrorFor: #Brazil_VisualClasses_VisualCollection) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_VisualClasses_VisualCollection) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_VisualClasses_VisualCollection) comment: #''!
	! (Delta mirrorFor: #Brazil_VisualClasses_VisualCollection) methodsFor: 'unclassified'!
	 add: newChild 

 self subclassResponsibility.

^ self.



! 
childrenX: childrenX_val childrenX := childrenX_val! 
 Brazil_VisualClasses_VisualCollection_1_init 

 self childrenX: (EnclosingObjects_Brazil_VisualClasses_VisualCollection at: 2)  OrderedCollection new.

^ self.



! 
 innerExtent 

^ self  innerBounds extent.



! 
 addAtBack: newChild 

 self subclassResponsibility.

^ self.



! 
 remove: aChild 

 self subclassResponsibility.

^ self.



! 
 innerBounds 

^0 @0 extent: self extent.



! 
 size 

^ self  children size.



! 
 new 

 self Brazil_VisualClasses_VisualCollection_superInit_new.

 self Brazil_VisualClasses_VisualCollection_1_init.

^ self.



! 
  add: newChild in: areaClass 

(( self legalAreaClassesFor: newChild) select:[ : some | 

 areaClass includesBehavior: some.

]) isEmpty not ifFalse:[ 

 (EnclosingObjects_Brazil_VisualClasses_VisualCollection at: 2)  error:'invalid area class for this child in this container'.

].

 newChild areaClass: areaClass.

 self add: newChild.

^ newChild.



! 
 Brazil_VisualClasses_VisualCollection_superInit_new 

super  new.

^ self.



! 
childrenX ^childrenX! 
 setupAreaForWrapper 

 self setArea:( (EnclosingObjects_Brazil_VisualClasses_VisualCollection at: 1)  Frame visual: self) fullyCoverParent.

^ self.



! 
  addNew: visualClass setup: setupBlock 

|  child |

 child := visualClass new.

 setupBlock value: child.

 self  add: child.

^ child.



! 
 flushLayoutCaches 

super  flushLayoutCaches.

 self updateGeometricProperties.

^ self.



! 
  addNewWrapped: visualClass setup: setupBlock 

|  child  wrapper |

 child := visualClass new.

 wrapper := (EnclosingObjects_Brazil_VisualClasses_VisualCollection at: 1)  Wrapper with: child.

 setupBlock value: child.

 self  add: wrapper.

^ child.



! 
  installInformationRetriever: spy on: child 

 self  children  at:( self  children indexOf: child) put: spy downwardInterceptor.

^ self.



! 
 children 

^ self  childrenX.



! 
  add: newChild setup: setupBlock 

 self add: newChild.

 setupBlock value: newChild.

^ newChild.



! 
 childrenDo: aBlock 

 self  children do: aBlock.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_VisualClasses_VisualCollection) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_VisualClasses_VisualCollection := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_VisualClasses_VisualCollection := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_VisualClasses metadata addNestedClass: Brazil_VisualClasses_VisualCollection. ! 
	Brazil_VisualClasses_VisualCollection metadata enclosingMixin: Brazil_VisualClasses !
	Delta define: #Brazil_VisualClasses_VerticalVisualSequence as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_VisualClasses_VerticalVisualSequence EnclosingObjects_Brazil_VisualClasses_VerticalVisualSequence')!
	(Delta mirrorFor: #Brazil_VisualClasses_VerticalVisualSequence) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_VisualClasses_VerticalVisualSequence) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_VisualClasses_VerticalVisualSequence) comment: #''!
	! (Delta mirrorFor: #Brazil_VisualClasses_VerticalVisualSequence) methodsFor: 'unclassified'!
	 computeNaturalHeightForWidth: width 

|  total |

 total :=0.

 self childrenDo:[ : each | 

 total := total +( each area naturalHeightForWidth: width).

].

^ total +(( self children size - 1 max:0) * self gap).



! 
 repositionAllChildrenWithNoElasticityByForce: force 

|  base  across |

 base :=0.

 across := self  orthogonalOf: self innerExtent.

 self childrenDo:[ : each | 

|  allocated |

 allocated := each area naturalHeightForWidth: across.

 each area currentLayoutBasis: allocated.

 force  ifTrue:[ 

 each forceBounds:( self   childRectangleFrom: base size: allocated).

] ifFalse:[ 

 each occupyBounds:( self   childRectangleFrom: base size: allocated).

].

 base := base + allocated + self gap.

].

^ self.



! 
  childInElasticLineup: child requestsBoundsUpdateUsing: continuation 

|  newDesiredHeight |

 newDesiredHeight := child area naturalHeightForWidth: self innerExtent x.

^ newDesiredHeight = child area currentLayoutBasis  ifTrue:[ 

 continuation value: child bounds.

] ifFalse:[ 

super   childInElasticLineup: child requestsBoundsUpdateUsing: continuation.

].



! 
 repositionAllChildrenWithElasticityByForce: force 

|  excess  totalElasticity  elasticityFactor  base  across |

 across := self innerExtent x.

 excess := self innerExtent y - ( self naturalHeightForWidth: across).

 totalElasticity :=0.

 self childrenDo:[ : each | 

 totalElasticity := totalElasticity + each area elasticity.

].

 elasticityFactor := totalElasticity =0  ifTrue:[ 

0.

] ifFalse:[ 

 excess asFloat / totalElasticity.

].

 base :=0.

 self childrenDo:[ : each | 

|  requested  allocated |

 requested := each area naturalHeightForWidth: across.

 each area currentLayoutBasis: requested.

 allocated := requested +( each area elasticity * elasticityFactor) floor.

 force  ifTrue:[ 

 each forceBounds:( self   childRectangleFrom: base size: allocated).

] ifFalse:[ 

 each occupyBounds:( self   childRectangleFrom: base size: allocated).

].

 base := base + allocated + self gap.

].

^ self.



! 
 new 

 self Brazil_VisualClasses_VerticalVisualSequence_superInit_new.

 self Brazil_VisualClasses_VerticalVisualSequence_1_init.

^ self.



! 
 Brazil_VisualClasses_VerticalVisualSequence_1_init 

^ self.



! 
  pointPrincipal: y orthogonal: x 

^ x @ y.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForVerticalVisualSequence: self.

^ self.



! 
  childInRigidSquishyLineup: child requestsBoundsUpdateUsing: continuation 

|  newDesiredHeight |

 newDesiredHeight := child area naturalHeightForWidth: self innerExtent x.

^ newDesiredHeight = child area currentLayoutBasis  ifTrue:[ 

 continuation value: child bounds.

] ifFalse:[ 

super   childInRigidSquishyLineup: child requestsBoundsUpdateUsing: continuation.

].



! 
  repositionChildrenStartingWith: child using: continuation 

|  index  boundsNow  base  size  shift |

 index := self indexOf: child.

 boundsNow := child bounds.

 base := boundsNow top.

 size := child area naturalHeightForWidth: self innerExtent x.

 child area currentLayoutBasis: size.

 shift := size -  boundsNow height.

 shift =0  ifTrue:[ 

 continuation value: child bounds.

] ifFalse:[ 

 continuation value:( self   childRectangleFrom: base size: size).

 index +1  to: self children size do:[ : i | 

|  each |

 each := self children at: i.

 each occupyBounds:( self   shiftRectangle: each bounds by: shift).

].

].

^ self.



! 
 isSqueezing 

^true.



! 
 legalAreaClassesFor: child 

^ child legalAreaClassesInVerticalVisualSequence.



! 
  shiftRectangle: rect by: shift 

^ rect origin +(0 @ shift) extent: rect extent.



! 
 principalOf: aPoint 

^ aPoint y.



! 
 orthogonalOf: aPoint 

^ aPoint x.



! 
  childRectangleFrom: base size: size 

|  box |

 box := self innerBounds.

^ box left @ base corner:( box right @( base + size)).



! 
 setPositionOfNewlyInserted: child 

|  index  base  childSize  shift |

 index := self children indexOf: child.

 base := index >1  ifTrue:[ 

( self children at:( index - 1)) bounds bottom + self gap.

] ifFalse:[ 

0.

].

 childSize := child area naturalHeightForWidth: self orthogonalSize.

 child area currentLayoutBasis: childSize.

 child occupyBounds:( self   childRectangleFrom: base size: childSize).

 shift := childSize + self gap.

 index +1  to: self children size do:[ : i | 

|  each |

 each := self children at: i.

 each occupyBounds:( self   shiftRectangle: each bounds by: shift).

].

^ self.



! 
  repositionAllChildrenByRequestFrom: child using: continuation 

|  across  excessY  totalElasticity  elasticityFactor  base |

 across := self innerExtent x.

 excessY := self innerExtent y - ( self naturalHeightForWidth: across).

 totalElasticity :=0.

 self childrenDo:[ : each | 

 totalElasticity := totalElasticity + each area elasticity.

].

 elasticityFactor := totalElasticity =0  ifTrue:[ 

0.

] ifFalse:[ 

 excessY asFloat / totalElasticity.

].

 base :=0.

 self childrenDo:[ : each | 

|  requested  allocated |

 requested := each area naturalHeightForWidth: across.

 each area currentLayoutBasis: requested.

 allocated := requested +( each area elasticity * elasticityFactor) floor.

 each == child  ifTrue:[ 

 continuation value:( self   childRectangleFrom: base size: allocated).

] ifFalse:[ 

 each occupyBounds:( self   childRectangleFrom: base size: allocated).

].

 base := base + allocated + self gap.

].

^ self.



! 
 Brazil_VisualClasses_VerticalVisualSequence_superInit_new 

super  new.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_VisualClasses_VerticalVisualSequence) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_VisualClasses_VerticalVisualSequence := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_VisualClasses_VerticalVisualSequence := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_VisualClasses metadata addNestedClass: Brazil_VisualClasses_VerticalVisualSequence. ! 
	Brazil_VisualClasses_VerticalVisualSequence metadata enclosingMixin: Brazil_VisualClasses !
	Delta define: #Brazil_VisualClasses_HorizontalVisualSequence as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_VisualClasses_HorizontalVisualSequence EnclosingObjects_Brazil_VisualClasses_HorizontalVisualSequence')!
	(Delta mirrorFor: #Brazil_VisualClasses_HorizontalVisualSequence) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_VisualClasses_HorizontalVisualSequence) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_VisualClasses_HorizontalVisualSequence) comment: #''!
	! (Delta mirrorFor: #Brazil_VisualClasses_HorizontalVisualSequence) methodsFor: 'unclassified'!
	 computeNaturalHeightForWidth: suggestedWidth 

|  excess  totalElasticity  elasticityFactor  base  across  maxHeight |

 excess := suggestedWidth - ( self  principalOf: self naturalExtent).

 totalElasticity :=0.

 self childrenDo:[ : each | 

 totalElasticity := totalElasticity + each area elasticity.

].

 elasticityFactor :=[ 

 excess asFloat / totalElasticity.

]  on: (EnclosingObjects_Brazil_VisualClasses_HorizontalVisualSequence at: 2)  ZeroDivide do:[ : ex | 

 ex return:0.

].

 base :=0.

 maxHeight :=0.

 self childrenDo:[ : each | 

|  allocated |

 allocated := each area principalSize +( each area elasticity * elasticityFactor) floor.

 maxHeight := maxHeight max:( each area naturalHeightForWidth: allocated).

].

^ maxHeight.



! 
 repositionAllChildrenWithNoElasticityByForce: force 

|  base |

 base :=0.

 self childrenDo:[ : each | 

|  allocated |

 allocated := each area principalSize.

 each area currentLayoutBasis: allocated.

 force  ifTrue:[ 

 each forceBounds:( self   childRectangleFrom: base size: allocated).

] ifFalse:[ 

 each occupyBounds:( self   childRectangleFrom: base size: allocated).

].

 base := base + allocated + self gap.

].

^ self.



! 
 setPositionOfNewlyInserted: child 

|  index  base  childSize  shift |

 index := self children indexOf: child.

 base := index >1  ifTrue:[ 

( self children at:( index - 1)) bounds right + self gap.

] ifFalse:[ 

0.

].

 childSize := child area principalSize.

 child area currentLayoutBasis: childSize.

 child occupyBounds:( self   childRectangleFrom: base size: childSize).

 shift := childSize + self gap.

 index +1  to: self children size do:[ : i | 

|  each |

 each := self children at: i.

 each occupyBounds:( self   shiftRectangle: each bounds by: shift).

].

^ self.



! 
  childRectangleFrom: base size: size 

|  box |

 box := self innerBounds.

^ base @ box top corner:( base + size @ box bottom).



! 
 legalAreaClassesFor: child 

^ child legalAreaClassesInHorizontalVisualSequence.



! 
  shiftRectangle: rect by: shift 

^ rect origin +( shift @0) extent: rect extent.



! 
 repositionAllChildrenWithElasticityByForce: force 

|  excess  totalElasticity  elasticityFactor  base |

 excess := self innerExtent x -  self naturalExtent x.

 totalElasticity :=0.

 self childrenDo:[ : each | 

 totalElasticity := totalElasticity + each area elasticity.

].

 elasticityFactor := totalElasticity =0  ifTrue:[ 

0.

] ifFalse:[ 

 excess asFloat / totalElasticity.

].

 base :=0.

 self childrenDo:[ : each | 

|  requested  allocated |

 requested := each area principalSize.

 each area currentLayoutBasis: requested.

 allocated := requested +( each area elasticity * elasticityFactor) floor.

 force  ifTrue:[ 

 each forceBounds:( self   childRectangleFrom: base size: allocated).

] ifFalse:[ 

 each occupyBounds:( self   childRectangleFrom: base size: allocated).

].

 base := base + allocated + self gap.

].

^ self.



! 
  pointPrincipal: x orthogonal: y 

^ x @ y.



! 
 principalOf: aPoint 

^ aPoint x.



! 
 orthogonalOf: aPoint 

^ aPoint y.



! 
 Brazil_VisualClasses_HorizontalVisualSequence_superInit_new 

super  new.

^ self.



! 
  repositionChildrenStartingWith: child using: continuation 

|  index  base  size  shift |

 index := self indexOf: child.

 base := child bounds origin x.

 size := child area principalSize.

 shift := size -  child extent x.

 shift =0  ifTrue:[ 

 continuation value: child bounds.

] ifFalse:[ 

 continuation value:( self   childRectangleFrom: base size: size).

 index +1  to: self children size do:[ : i | 

|  each |

 each := self children at: i.

 each occupyBounds:( self   shiftRectangle: each bounds by: shift).

].

].

^ self.



! 
  repositionAllChildrenByRequestFrom: child using: continuation 

|  excessX  totalElasticity  elasticityFactor  base |

 excessX := self innerExtent x -  self naturalExtent x.

 totalElasticity :=0.

 self childrenDo:[ : each | 

 totalElasticity := totalElasticity + each area elasticity.

].

 elasticityFactor := totalElasticity =0  ifTrue:[ 

0.

] ifFalse:[ 

 excessX asFloat / totalElasticity.

].

 base :=0.

 self childrenDo:[ : each | 

|  requested  allocatedX |

 requested := each area principalSize.

 each area currentLayoutBasis: requested.

 allocatedX := requested +( each area elasticity * elasticityFactor) floor.

 each == child  ifTrue:[ 

 continuation value:( self   childRectangleFrom: base size: allocatedX).

] ifFalse:[ 

 each occupyBounds:( self   childRectangleFrom: base size: allocatedX).

].

 base := base + allocatedX + self gap.

].

^ self.



! 
 Brazil_VisualClasses_HorizontalVisualSequence_1_init 

^ self.



! 
 new 

 self Brazil_VisualClasses_HorizontalVisualSequence_superInit_new.

 self Brazil_VisualClasses_HorizontalVisualSequence_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_VisualClasses_HorizontalVisualSequence) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_VisualClasses_HorizontalVisualSequence := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_VisualClasses_HorizontalVisualSequence := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_VisualClasses metadata addNestedClass: Brazil_VisualClasses_HorizontalVisualSequence. ! 
	Brazil_VisualClasses_HorizontalVisualSequence metadata enclosingMixin: Brazil_VisualClasses !
	Delta define: #Brazil_VisualClasses_VisualSequence as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' cachedNaturalHeightWidth gapA cachedNaturalHeightForWidth')
	 classVariables: 'MixinMetadata_Brazil_VisualClasses_VisualSequence EnclosingObjects_Brazil_VisualClasses_VisualSequence')!
	(Delta mirrorFor: #Brazil_VisualClasses_VisualSequence) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_VisualClasses_VisualSequence) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_VisualClasses_VisualSequence) comment: #''!
	! (Delta mirrorFor: #Brazil_VisualClasses_VisualSequence) methodsFor: 'unclassified'!
	 orthogonalSize 

^ self  orthogonalOf: self extent.



! 
 computeNaturalHeightForWidth: size 

 self subclassResponsibility.

^ self.



! 
  add: child before: existing 

^ self restructuring:[ 

 self   privateAdd: child using:[ 

 self children  add: child before: existing.

].

].



! 
 gap 

^ self  gapA value.



! 
 principalSize 

^ self  principalOf: self extent.



! 
 forceBoundsResponse: newBounds 

super  forceBoundsResponse: newBounds.

 self  repositionAllChildrenByForce:true.

^ self.



! 
 indexOf: child 

 self children keysAndValuesDo:[ : index : each | 

 each == child ifTrue:[ 

^ index.

].

].

 (EnclosingObjects_Brazil_VisualClasses_VisualSequence at: 2)  error:'the argument is not a child of the receiver'.

^ self.



! 
 repositionAllChildrenWithElasticityByForce: force 

 self subclassResponsibility.

^ self.



! 
cachedNaturalHeightWidth: cachedNaturalHeightWidth_val cachedNaturalHeightWidth := cachedNaturalHeightWidth_val! 
  pointPrincipal: principalSize orthogonal: orthogonalSize 

 self subclassResponsibility.

^ self.



! 
 Brazil_VisualClasses_VisualSequence_1_init 

 self gapA:( (EnclosingObjects_Brazil_VisualClasses_VisualSequence at: 1)  Attribute  name:#'gap' value:0).

 self cachedNaturalHeightWidth:nil.

 self cachedNaturalHeightForWidth:nil.

^ self.



! 
 addAtBack: child 

^ self restructuring:[ 

 self  privateAdd: child using:[ 

 self children addFirst: child.

].

].



! 
 createAgentUsing: aMapping 

 aMapping createAgentForVisualSequence: self.

^ self.



! 
  shiftChildrenAtAndAfter: index by: shift 

 index  to: self children size do:[ : i | 

|  child |

 child := self children at: i.

 child occupyBounds:( self   shiftRectangle: child bounds by: shift).

].

^ self.



! 
  privateAdd: child using: modifier 

 modifier value.

 child linkToParent: self.

 self  cachedNaturalHeightWidth:nil.

 self isMapped ifTrue:[ 

 self  updateGeometricProperties.

 self requestBoundsUpdateUsing:[ : newBounds | 

( self bounds = newBounds and:[ 

 self  hasElasticChildren not.

])  ifTrue:[ 

 self  setPositionOfNewlyInserted: child.

] ifFalse:[ 

 self boundsH value: newBounds.

 self  repositionAllChildrenByForce:false.

].

].

 child mapSubtree.

].

 self announceNaturalExtentChange.

^ child.



! 
 hasElasticChildren 

 self childrenDo:[ : each | 

( each area isFuture not and:[ 

 each area isElastic.

]) ifTrue:[ 

^true.

].

].

^false.



! 
 new 

 self Brazil_VisualClasses_VisualSequence_superInit_new.

 self Brazil_VisualClasses_VisualSequence_1_init.

^ self.



! 
gapA: gapA_val gapA := gapA_val! 
  childInRigidFixedLineup: child requestsBoundsUpdateUsing: continuation 

|  oldNaturalExtent |

 oldNaturalExtent := self naturalExtent.

 self  updateGeometricProperties.

 self  cachedNaturalHeightWidth:nil.

 self naturalExtent = oldNaturalExtent  ifTrue:[ 

 self   repositionChildrenStartingWith: child using: continuation.

] ifFalse:[ 

 self requestBoundsUpdateUsing:[ : newBounds | 

|  crossSizeChanged |

 crossSizeChanged :=( self  orthogonalOf: self bounds extent) ~=( self  orthogonalOf: newBounds extent).

 self setBounds: newBounds.

 crossSizeChanged  ifTrue:[ 

 self   repositionAllChildrenByRequestFrom: child using: continuation.

] ifFalse:[ 

 self   repositionChildrenStartingWith: child using: continuation.

].

].

 self announceNaturalExtentChange.

].

^ self.



! 
  child: child requestsBoundsUpdateUsing: continuation 

 self  hasElasticChildren  ifTrue:[ 

 self   childInElasticLineup: child requestsBoundsUpdateUsing: continuation.

] ifFalse:[ 

 self   childInRigidLineup: child requestsBoundsUpdateUsing: continuation.

].

^ self.



! 
  repositionChildrenStartingWith: child using: continuation 

 self subclassResponsibility.

^ self.



! 
 setPositionOfNewlyInserted: child 

 self subclassResponsibility.

^ self.



! 
  shiftRectangle: rect by: shift 

 self subclassResponsibility.

^ self.



! 
  childInRigidLineup: child requestsBoundsUpdateUsing: continuation 

( self isSqueezing and:[ 

 child area isVisualSquishy.

])  ifTrue:[ 

 self   childInRigidSquishyLineup: child requestsBoundsUpdateUsing: continuation.

] ifFalse:[ 

 self   childInRigidFixedLineup: child requestsBoundsUpdateUsing: continuation.

].

^ self.



! 
 flushLayoutCaches 

 self  cachedNaturalHeightWidth:nil.

 self children do:[ : each | 

 each area flushLayoutCaches.

].

super  flushLayoutCaches.

^ self.



! 
gapA ^gapA! 
  childInElasticLineup: child requestsBoundsUpdateUsing: continuation 

|  oldNaturalExtent |

 self  cachedNaturalHeightWidth:nil.

 oldNaturalExtent := self naturalExtent.

 self  updateGeometricProperties.

 self requestBoundsUpdateUsing:[ : newBounds | 

 self setBounds: newBounds.

 self   repositionAllChildrenByRequestFrom: child using: continuation.

 self currentNaturalExtent = self naturalExtent ifFalse:[ 

 self announceNaturalExtentChange.

].

].

^ self.



! 
 addFirst: newChild 

^ self addAtBack: newChild.



! 
 privateSetChildren: newChildren 

 self childrenX: newChildren.

 self childrenX do:[ : each | 

 each linkToParent: self.

].

 self  cachedNaturalHeightWidth:nil.

 self isMapped ifTrue:[ 

 self  updateGeometricProperties.

 self requestBoundsUpdateUsing:[ : newBounds | 

 self boundsH value: newBounds.

 self  repositionAllChildrenByForce:true.

].

 self children do:[ : each | 

 each mapSubtree.

].

].

^ self childrenX.



! 
 addBlank 

^ self  add: (EnclosingObjects_Brazil_VisualClasses_VisualSequence at: 1)  Blank new.



! 
 add: child 

^ self restructuring:[ 

 self  privateAdd: child using:[ 

 self children add: child.

].

].



! 
 repositionAllChildrenWithNoElasticityByForce: force 

 self subclassResponsibility.

^ self.



! 
  childRectangleFrom: base size: size 

 self subclassResponsibility.

^ self.



! 
  add: child after: existing 

^ self restructuring:[ 

 self   privateAdd: child using:[ 

 self children  add: child after: existing.

].

].



! 
 addElasticBlank 

^ self  addNew: (EnclosingObjects_Brazil_VisualClasses_VisualSequence at: 1)  Blank setup:[ : blank | 

 blank area elasticity:1.

].



! 
  childInRigidSquishyLineup: child requestsBoundsUpdateUsing: continuation 

|  oldNaturalExtent |

 self  cachedNaturalHeightWidth:nil.

 oldNaturalExtent := self naturalExtent.

 self  updateGeometricProperties.

 self requestBoundsUpdateUsing:[ : newBounds | 

|  crossSizeChanged |

 crossSizeChanged :=( self  orthogonalOf: self bounds extent) ~=( self  orthogonalOf: newBounds extent).

 self setBounds: newBounds.

 crossSizeChanged  ifTrue:[ 

 self   repositionAllChildrenByRequestFrom: child using: continuation.

] ifFalse:[ 

 self   repositionChildrenStartingWith: child using: continuation.

].

].

 self naturalExtent = oldNaturalExtent ifFalse:[ 

 self announceNaturalExtentChange.

].

^ self.



! 
 gap: newGap 

|  oldNaturalExtent |

 oldNaturalExtent := self naturalExtent.

 self  gapA value: newGap.

 self  cachedNaturalHeightWidth:nil.

 self  updateGeometricProperties.

 self  repositionAllChildrenByForce:false.

 oldNaturalExtent ~= self naturalExtent ifTrue:[ 

 self announceNaturalExtentChange.

].

^ self.



! 
 addBlankSize: size 

^ self  addNew: (EnclosingObjects_Brazil_VisualClasses_VisualSequence at: 1)  Blank setup:[ : blank | 

 blank area principalSize: size.

].



! 
cachedNaturalHeightWidth ^cachedNaturalHeightWidth! 
 reorder: visuals 

( visuals reject:[ : ea | 

 self children includes: ea.

]) isEmpty ifFalse:[ 

 (EnclosingObjects_Brazil_VisualClasses_VisualSequence at: 2)  error:'bad argument'.

].

 self childrenX: visuals asMutableArrayList.

 self  repositionAllChildrenByForce:false.

^ self.



! 
 at: index 

^ self children at: index.



! 
cachedNaturalHeightForWidth ^cachedNaturalHeightForWidth! 
 removeAt: index 

 self  remove:( self  at: index).

^ self.



! 
 updateGeometricProperties 

 self  cachedNaturalHeightWidth:nil.

super  updateGeometricProperties.

^ self.



! 
  repositionAllChildrenByRequestFrom: child using: continuation 

 self subclassResponsibility.

^ self.



! 
 children: newChildren 

 self restructuring:[ 

 self  privateRemoveAllChildren.

 self  privateSetChildren: newChildren.

].

 self announceNaturalExtentChange.

^ self.



! 
  add: child afterIndex: index 

^ self restructuring:[ 

 self   privateAdd: child using:[ 

 self children  add: child afterIndex: index.

].

].



! 
cachedNaturalHeightForWidth: cachedNaturalHeightForWidth_val cachedNaturalHeightForWidth := cachedNaturalHeightForWidth_val! 
 isSquishy 

 self childrenDo:[ : each | 

 each area isVisualSquishy ifTrue:[ 

^true.

].

].

^false.



! 
 Brazil_VisualClasses_VisualSequence_superInit_new 

super  new.

^ self.



! 
 computeNaturalExtent 

|  principalSum  gapSum  orthogonalMax |

 principalSum :=0.

 orthogonalMax :=0.

 self childrenDo:[ : each | 

|  eachTarget |

 eachTarget := each area naturalExtent.

 each area lastKnownNaturalExtent: eachTarget.

 principalSum := principalSum +( self  principalOf: eachTarget).

 orthogonalMax := orthogonalMax max:( self  orthogonalOf: eachTarget).

].

 gapSum :=( self children size - 1 max:0) * self  gap.

^ self   pointPrincipal: principalSum + gapSum orthogonal: orthogonalMax.



! 
 occupyBoundsResponse: newBounds 

|  oldExtent |

 oldExtent := self innerExtent.

super  occupyBoundsResponse: newBounds.

 oldExtent = self innerExtent  ifTrue:[ 

 self childrenDo:[ : each | 

 each reiterateBounds.

].

] ifFalse:[ 

 self  hasElasticChildren  ifTrue:[ 

 self  repositionAllChildrenWithElasticityByForce:false.

] ifFalse:[ 

( self  orthogonalOf: oldExtent) =( self  orthogonalOf: self innerExtent) ifFalse:[ 

 self  repositionAllChildrenWithNoElasticityByForce:false.

].

].

].

^ self.



! 
 privateRemoveAllChildren 

|  formerChildren |

 formerChildren := self childrenX.

 self childrenX: (EnclosingObjects_Brazil_VisualClasses_VisualSequence at: 2)  OrderedCollection new.

 formerChildren do:[ : each | 

 each unlinkFromParent.

].

 self  cachedNaturalHeightWidth:nil.

 self  updateGeometricProperties.

 self requestBoundsUpdateUsing:[ : newBounds | 

 self boundsH value: newBounds.

].

^ self.



! 
  add: child beforeIndex: index 

^ self restructuring:[ 

 self   privateAdd: child using:[ 

 self children  add: child beforeIndex: index.

].

].



! 
 remove: aChild 

|  hadElasticChildren  index  shift |

 hadElasticChildren := self  hasElasticChildren.

 index := self  indexOf: aChild.

 shift :=( self  principalOf: aChild extent) + self  gap.

 self restructuring:[ 

 self children remove: aChild.

 aChild unlinkFromParent.

 self  cachedNaturalHeightWidth:nil.

 self  updateGeometricProperties.

 self requestBoundsUpdateUsing:[ : newBounds | 

( self bounds = newBounds and:[ 

 hadElasticChildren not.

])  ifTrue:[ 

 self   shiftChildrenAtAndAfter: index by: shift negated.

] ifFalse:[ 

 self boundsH value: newBounds.

 self  repositionAllChildrenByForce:false.

].

].

].

 self announceNaturalExtentChange.

^ self.



! 
 naturalHeightForWidth: width 

 self  cachedNaturalHeightWidth = width ifFalse:[ 

 self  cachedNaturalHeightWidth: width.

 self  cachedNaturalHeightForWidth:( self  computeNaturalHeightForWidth: width).

].

^ self  cachedNaturalHeightForWidth.



! 
 principalOf: aPoint 

 self subclassResponsibility.

^ self.



! 
 orthogonalOf: aPoint 

 self subclassResponsibility.

^ self.



! 
  at: index put: child 

#'BOGUS' yourself.

 self  remove:( self  at: index).

^ self   add: child beforeIndex: index.



! 
 repositionAllChildrenByForce: force 

 self  hasElasticChildren  ifTrue:[ 

 self  repositionAllChildrenWithElasticityByForce: force.

] ifFalse:[ 

 self  repositionAllChildrenWithNoElasticityByForce: force.

].

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_VisualClasses_VisualSequence) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_VisualClasses_VisualSequence := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_VisualClasses_VisualSequence := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_VisualClasses metadata addNestedClass: Brazil_VisualClasses_VisualSequence. ! 
	Brazil_VisualClasses_VisualSequence metadata enclosingMixin: Brazil_VisualClasses !
	Delta define: #Brazil_VisualClasses_BoxShape as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' sizeS')
	 classVariables: 'MixinMetadata_Brazil_VisualClasses_BoxShape EnclosingObjects_Brazil_VisualClasses_BoxShape')!
	(Delta mirrorFor: #Brazil_VisualClasses_BoxShape) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_VisualClasses_BoxShape) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_VisualClasses_BoxShape) comment: #''!
	! (Delta mirrorFor: #Brazil_VisualClasses_BoxShape) methodsFor: 'unclassified'!
	 size: newSize 

 self  sizeS: newSize.

 self reportNaturalExtentChange.

^ self.



! 
sizeS ^sizeS! 
 naturalExtent 

^ self  sizeS.



! 
 computeNaturalExtent 

^ self  sizeS.



! 
sizeS: sizeS_val sizeS := sizeS_val! 
 Brazil_VisualClasses_BoxShape_superInit_new 

super  new.

^ self.



! 
 Brazil_VisualClasses_BoxShape_1_init 

 self sizeS:(0 @0).

^ self.



! 
 size 

^ self  sizeS.



! 
 new 

 self Brazil_VisualClasses_BoxShape_superInit_new.

 self Brazil_VisualClasses_BoxShape_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_VisualClasses_BoxShape) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_VisualClasses_BoxShape := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_VisualClasses_BoxShape := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_VisualClasses metadata addNestedClass: Brazil_VisualClasses_BoxShape. ! 
	Brazil_VisualClasses_BoxShape metadata enclosingMixin: Brazil_VisualClasses !
	Delta define: #Brazil_VisualClasses_LeafVisual as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_VisualClasses_LeafVisual EnclosingObjects_Brazil_VisualClasses_LeafVisual')!
	(Delta mirrorFor: #Brazil_VisualClasses_LeafVisual) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_VisualClasses_LeafVisual) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_VisualClasses_LeafVisual) comment: #''!
	! (Delta mirrorFor: #Brazil_VisualClasses_LeafVisual) methodsFor: 'unclassified'!
	 Brazil_VisualClasses_LeafVisual_1_init 

^ self.



! 
 children 

^ self Array new.



! 
 childrenDo: aBlock 

^ self.



! 
 hasChildren 

^false.



! 
 Brazil_VisualClasses_LeafVisual_superInit_new 

super  new.

^ self.



! 
 new 

 self Brazil_VisualClasses_LeafVisual_superInit_new.

 self Brazil_VisualClasses_LeafVisual_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_VisualClasses_LeafVisual) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_VisualClasses_LeafVisual := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_VisualClasses_LeafVisual := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_VisualClasses metadata addNestedClass: Brazil_VisualClasses_LeafVisual. ! 
	Brazil_VisualClasses_LeafVisual metadata enclosingMixin: Brazil_VisualClasses !
	Delta define: #Brazil_AreaClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' Brazil_AreaClasses_GridRowCell_slot Brazil_AreaClasses_FutureArea_slot MessageRecorder Brazil_AreaClasses_Area_slot Brazil_AreaClasses_Frame_slot Brazil_AreaClasses_Anchor_slot Brazil_AreaClasses_RowCell_slot Brazil_AreaClasses_ColumnCell_slot Brazil_AreaClasses_PolygonArea_slot Brazil_AreaClasses_WidthEqualizingRowCell_slot Brazil_AreaClasses_LineArea_slot Brazil_AreaClasses_ShapeArea_slot Brazil_AreaClasses_SequenceCell_slot Brazil_AreaClasses_CellWidthEqualizer_slot')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses EnclosingObjects_Brazil_AreaClasses')!
	(Delta mirrorFor: #Brazil_AreaClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses) methodsFor: 'unclassified'!
	ColumnCell
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_ColumnCell_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_ColumnCell.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self  SequenceCell)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_ColumnCell_slot := myNested.
		].
	^Brazil_AreaClasses_ColumnCell_slot! 
Anchor
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_Anchor_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_Anchor.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self  Area)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_Anchor_slot := myNested.
		].
	^Brazil_AreaClasses_Anchor_slot! 
MessageRecorder: MessageRecorder_val MessageRecorder := MessageRecorder_val! 
CellWidthEqualizer
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_CellWidthEqualizer_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_CellWidthEqualizer.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_CellWidthEqualizer_slot := myNested.
		].
	^Brazil_AreaClasses_CellWidthEqualizer_slot! 
LineArea
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_LineArea_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_LineArea.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self  Area)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_LineArea_slot := myNested.
		].
	^Brazil_AreaClasses_LineArea_slot! 
MessageRecorder ^MessageRecorder! 
FutureArea
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_FutureArea_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_FutureArea.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self  MessageRecorder)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_FutureArea_slot := myNested.
		].
	^Brazil_AreaClasses_FutureArea_slot! 
RowCell
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_RowCell_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_RowCell.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self  SequenceCell)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_RowCell_slot := myNested.
		].
	^Brazil_AreaClasses_RowCell_slot! 
WidthEqualizingRowCell
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_WidthEqualizingRowCell_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_WidthEqualizingRowCell.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self  RowCell)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_WidthEqualizingRowCell_slot := myNested.
		].
	^Brazil_AreaClasses_WidthEqualizingRowCell_slot! 
Frame
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_Frame_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_Frame.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self  Area)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_Frame_slot := myNested.
		].
	^Brazil_AreaClasses_Frame_slot! 
 Brazil_AreaClasses_1_init 

 self MessageRecorder: (EnclosingObjects_Brazil_AreaClasses at: 1)  plumbing MessageRecorder.

^ self.



! 
 Brazil_AreaClasses_superInit_new 

super  new.

^ self.



! 
ShapeArea
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_ShapeArea_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_ShapeArea.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self  Area)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_ShapeArea_slot := myNested.
		].
	^Brazil_AreaClasses_ShapeArea_slot! 
PolygonArea
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_PolygonArea_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_PolygonArea.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self  Area)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_PolygonArea_slot := myNested.
		].
	^Brazil_AreaClasses_PolygonArea_slot! 
GridRowCell
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_GridRowCell_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_GridRowCell.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self  RowCell)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_GridRowCell_slot := myNested.
		].
	^Brazil_AreaClasses_GridRowCell_slot! 
 new 

 self Brazil_AreaClasses_superInit_new.

 self Brazil_AreaClasses_1_init.

^ self.



! 
SequenceCell
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_SequenceCell_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_SequenceCell.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self  Area)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_SequenceCell_slot := myNested.
		].
	^Brazil_AreaClasses_SequenceCell_slot! 
Area
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AreaClasses_Area_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AreaClasses 
			nestedMixins at: #Brazil_AreaClasses_Area.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AreaClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AreaClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AreaClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AreaClasses_Area_slot := myNested.
		].
	^Brazil_AreaClasses_Area_slot! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil metadata addNestedClass: Brazil_AreaClasses. ! 
	Brazil_AreaClasses metadata enclosingMixin: Brazil !
	Delta define: #Brazil_AreaClasses_Anchor as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' yOffsetS xFractionS cachedSuggestedParentExtent yAnchorFractionS lastSuggestedExtentKnownToParent xOffsetS yFractionS xAnchorFractionS')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_Anchor EnclosingObjects_Brazil_AreaClasses_Anchor')!
	(Delta mirrorFor: #Brazil_AreaClasses_Anchor) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_Anchor) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_Anchor) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_Anchor) methodsFor: 'unclassified'!
	 beTopCenter 

 self  xFractionS:1/2.

 self  yFractionS:0.

 self  xOffsetS:0.

 self  yOffsetS:0.

 self  xAnchorFractionS:1/2.

 self  yAnchorFractionS:0.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 yOffset: offset 

 self  yOffsetS: offset.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 yAnchorFraction: fraction 

 self  yAnchorFractionS: fraction.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 beLeftCenter 

 self  xFractionS:0.

 self  yFractionS:1/2.

 self  xOffsetS:0.

 self  yOffsetS:0.

 self  xAnchorFractionS:0.

 self  yAnchorFractionS:1/2.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 beRightCenter 

 self  xFractionS:1.

 self  yFractionS:1/2.

 self  xOffsetS:0.

 self  yOffsetS:0.

 self  xAnchorFractionS:1.

 self  yAnchorFractionS:1/2.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 xOffset: offset 

 self  xOffsetS: offset.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 mayAccommodateVisualsNaturalHeightChange 

^true.



! 
 xAnchorFraction: fraction 

 self  xAnchorFractionS: fraction.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
yOffsetS: yOffsetS_val yOffsetS := yOffsetS_val! 
 copyConfigurationTo: another 

 another copyConfigurationFromAnchor: self.

^ self.



! 
 anchorPosition: newOrigin 

 self  xFractionS:0.

 self  xOffsetS: newOrigin x.

 self  yFractionS:0.

 self  yOffsetS: newOrigin y.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 new 

 self Brazil_AreaClasses_Anchor_superInit_new.

 self Brazil_AreaClasses_Anchor_1_init.

^ self.



! 
 suggestedParentHeightForWidth: width 

^ self  suggestedParentExtent y.



! 
 xFraction: fraction 

 self  xFractionS: fraction.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 beCentered 

 self  xFractionS:1/2.

 self  yFractionS:1/2.

 self  xOffsetS:0.

 self  yOffsetS:0.

 self  xAnchorFractionS:1/2.

 self  yAnchorFractionS:1/2.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 yFraction: fraction 

 self  yFractionS: fraction.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 Brazil_AreaClasses_Anchor_1_init 

 self xFractionS:nil.

 self xOffsetS:nil.

 self yFractionS:nil.

 self yOffsetS:nil.

 self xAnchorFractionS:nil.

 self yAnchorFractionS:nil.

 self cachedSuggestedParentExtent:nil.

 self lastSuggestedExtentKnownToParent:nil.

^ self.



! 
 copyConfigurationFromAnchor: another 

 self  xFraction: another xFraction.

 self  xOffset: another yOffset.

 self  yFraction: another yFraction.

 self  yOffset: another yOffset.

^ self.



! 
 flushLayoutCaches 

 self  cachedSuggestedParentExtent:nil.

^ self.



! 
 yFraction 

^ self  yFractionS.



! 
lastSuggestedExtentKnownToParent: lastSuggestedExtentKnownToParent_val lastSuggestedExtentKnownToParent := lastSuggestedExtentKnownToParent_val! 
 yAnchorFraction 

^ self  yAnchorFractionS.



! 
 origin: newOrigin 

 self  xFractionS:0.

 self  xOffsetS: newOrigin x.

 self  yFractionS:0.

 self  yOffsetS: newOrigin y.

 self  xAnchorFractionS:0.

 self  yAnchorFractionS:0.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
lastSuggestedExtentKnownToParent ^lastSuggestedExtentKnownToParent! 
cachedSuggestedParentExtent ^cachedSuggestedParentExtent! 
 xFraction 

^ self  xFractionS.



! 
 beBottomLeft 

 self  xFractionS:0.

 self  yFractionS:1.

 self  xOffsetS:0.

 self  yOffsetS:0.

 self  xAnchorFractionS:0.

 self  yAnchorFractionS:1.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
xFractionS ^xFractionS! 
 xAnchorFraction 

^ self  xAnchorFractionS.



! 
 isRelative 

^ self  xFraction ~=0 or:[ 

 self  yFraction ~=0.

].



! 
yFractionS ^yFractionS! 
cachedSuggestedParentExtent: cachedSuggestedParentExtent_val cachedSuggestedParentExtent := cachedSuggestedParentExtent_val! 
yFractionS: yFractionS_val yFractionS := yFractionS_val! 
  suggestedParentSizeForFraction: fraction offset: offset size: size anchorFraction: anchorFraction 

|  size1  size2 |

 size1 := fraction ~=1  ifTrue:[ 

1 -  anchorFraction * size + offset /(1 -  fraction).

] ifFalse:[ 

0.

].

 size2 := fraction ~=0  ifTrue:[ 

 anchorFraction * size -  offset / fraction.

] ifFalse:[ 

0.

].

^ size1 rounded max: size2 rounded.



! 
 xOffset 

^ self  xOffsetS.



! 
 suggestedParentExtent 

 self  cachedSuggestedParentExtent ==nil ifTrue:[ 

 self  cachedSuggestedParentExtent: self  computeSuggestedParentExtent.

].

^ self  cachedSuggestedParentExtent.



! 
 beBottomCenter 

 self  xFractionS:1/2.

 self  yFractionS:1.

 self  xOffsetS:0.

 self  yOffsetS:0.

 self  xAnchorFractionS:1/2.

 self  yAnchorFractionS:1.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 beTopLeft 

 self  xFractionS:0.

 self  yFractionS:0.

 self  xOffsetS:0.

 self  yOffsetS:0.

 self  xAnchorFractionS:0.

 self  yAnchorFractionS:0.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 yOffset 

^ self  yOffsetS.



! 
 beBottomRight 

 self  xFractionS:1.

 self  yFractionS:1.

 self  xOffsetS:0.

 self  yOffsetS:0.

 self  xAnchorFractionS:1.

 self  yAnchorFractionS:1.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
yOffsetS ^yOffsetS! 
 beTopRight 

 self  xFractionS:1.

 self  yFractionS:0.

 self  xOffsetS:0.

 self  yOffsetS:0.

 self  xAnchorFractionS:1.

 self  yAnchorFractionS:0.

 self  flushLayoutCaches.

 self requestBoundsUpdate.

^ self.



! 
 Brazil_AreaClasses_Anchor_superInit_new 

super  new.

^ self.



! 
 isSqueezing 

^false.



! 
xAnchorFractionS: xAnchorFractionS_val xAnchorFractionS := xAnchorFractionS_val! 
yAnchorFractionS ^yAnchorFractionS! 
xOffsetS ^xOffsetS! 
xOffsetS: xOffsetS_val xOffsetS := xOffsetS_val! 
xAnchorFractionS ^xAnchorFractionS! 
xFractionS: xFractionS_val xFractionS := xFractionS_val! 
 visual: aVisual 

super  visual: aVisual.

 self  resetLastSuggestedExtentKnownToParent.

 self  xFraction:0.

 self  yFraction:0.

 self  xOffset:0.

 self  yOffset:0.

 self  xAnchorFraction:0.

 self  yAnchorFraction:0.

^ self.



! 
 resetLastSuggestedExtentKnownToParent 

 self  lastSuggestedExtentKnownToParent:(-1 @-1).

^ self.



! 
 isVisualSquishy 

^false.



! 
yAnchorFractionS: yAnchorFractionS_val yAnchorFractionS := yAnchorFractionS_val! 
 boundsWithin: referenceBounds 

|  parentOrigin  parentExtent  width  height  naturalExtent  anchorX  anchorY |

 parentExtent := referenceBounds extent.

 width := parentExtent x.

 height := parentExtent y.

 naturalExtent := self visual naturalExtent.

 anchorX := width * self  xFraction + self  xOffset - ( naturalExtent x * self  xAnchorFraction).

 anchorY := height * self  yFraction + self  yOffset - ( naturalExtent y * self  yAnchorFraction).

^ (EnclosingObjects_Brazil_AreaClasses_Anchor at: 2)  Rectangle  origin: anchorX rounded @ anchorY rounded + referenceBounds origin extent: naturalExtent.



! 
 mayAccommodateVisualsNaturalWidthChange 

^true.



! 
 computeSuggestedParentExtent 

|  naturalExtent |

 naturalExtent := self visual naturalExtent.

^( self   suggestedParentSizeForFraction: self  xFraction offset: self  xOffset size: naturalExtent x anchorFraction: self  xAnchorFraction) @( self   suggestedParentSizeForFraction: self  yFraction offset: self  yOffset size: naturalExtent y anchorFraction: self  yAnchorFraction).



! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_Anchor) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_Anchor := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_Anchor := mmd !
	 visual: aVisual 

^ self new visual: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_Anchor. ! 
	Brazil_AreaClasses_Anchor metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_AreaClasses_SequenceCell as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' elasticityS principalSizeS lastKnownNaturalExtent currentLayoutBasis')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_SequenceCell EnclosingObjects_Brazil_AreaClasses_SequenceCell')!
	(Delta mirrorFor: #Brazil_AreaClasses_SequenceCell) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_SequenceCell) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_SequenceCell) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_SequenceCell) methodsFor: 'unclassified'!
	 naturalPrincipalSize 

 self subclassResponsibility.

^ self.



! 
 naturalHeightForWidth: size 

 self subclassResponsibility.

^ self.



! 
 naturalExtent 

 self subclassResponsibility.

^ self.



! 
currentLayoutBasis ^currentLayoutBasis! 
lastKnownNaturalExtent: lastKnownNaturalExtent_val lastKnownNaturalExtent := lastKnownNaturalExtent_val! 
 principalSize 

^ self  principalSizeS ifNil:[ 

 self  naturalPrincipalSize.

].



! 
principalSizeS ^principalSizeS! 
currentLayoutBasis: currentLayoutBasis_val currentLayoutBasis := currentLayoutBasis_val! 
 elasticity 

^ self  elasticityS.



! 
lastKnownNaturalExtent ^lastKnownNaturalExtent! 
 elasticity: newElasticity 

|  oldElasticity |

 oldElasticity := self  elasticityS.

 self  elasticityS: newElasticity.

 self requestBoundsUpdate.

^ self.



! 
 printOn: aStream 

super  printOn: aStream.

 aStream nextPutAll:' size: '; 

 print: self  principalSizeS; 

 nextPutAll:' elasticity: '; 

 print: self  elasticityS.

^ self.



! 
principalSizeS: principalSizeS_val principalSizeS := principalSizeS_val! 
 new 

 self Brazil_AreaClasses_SequenceCell_superInit_new.

 self Brazil_AreaClasses_SequenceCell_1_init.

^ self.



! 
 isElastic 

^ self  elasticity >0.



! 
 principalSize: newSize 

 self  principalSizeS: newSize.

 self requestBoundsUpdate.

^ self.



! 
elasticityS: elasticityS_val elasticityS := elasticityS_val! 
 Brazil_AreaClasses_SequenceCell_1_init 

 self principalSizeS:nil.

 self elasticityS:nil.

 self currentLayoutBasis:nil.

 self lastKnownNaturalExtent:nil.

^ self.



! 
 flushLayoutCaches 

 self  currentLayoutBasis:nil.

 self  lastKnownNaturalExtent:nil.

^ self.



! 
 visual: aVisual 

super  visual: aVisual.

 self  elasticityS:0.

^ self.



! 
 naturalOrthogonalSize 

 self subclassResponsibility.

^ self.



! 
elasticityS ^elasticityS! 
 Brazil_AreaClasses_SequenceCell_superInit_new 

super  new.

^ self.



! 
 imposesSize 

^ self  principalSizeS notNil.



! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_SequenceCell) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_SequenceCell := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_SequenceCell := mmd !
	 visual: aVisual 

^ self new visual: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_SequenceCell. ! 
	Brazil_AreaClasses_SequenceCell metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_AreaClasses_LineArea as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' lastSuggestedExtentKnownToParent endPointS startPointS')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_LineArea EnclosingObjects_Brazil_AreaClasses_LineArea')!
	(Delta mirrorFor: #Brazil_AreaClasses_LineArea) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_LineArea) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_LineArea) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_LineArea) methodsFor: 'unclassified'!
	 Brazil_AreaClasses_LineArea_superInit_new 

super  new.

^ self.



! 
 endPoint 

^ self  endPointS.



! 
 isVisualSquishy 

^false.



! 
 suggestedParentHeightForWidth: ignored 

^ self  suggestedParentExtent y.



! 
startPointS ^startPointS! 
 Brazil_AreaClasses_LineArea_1_init 

 self startPointS:(0 @0).

 self endPointS:(0 @0).

 self lastSuggestedExtentKnownToParent:nil.

^ self.



! 
 startPoint 

^ self  startPointS.



! 
 suggestedParentExtent 

^( self  endPointS -  self  startPointS) abs.



! 
endPointS ^endPointS! 
 startPoint: newStartPoint 

 self  startPointS: newStartPoint.

 self requestBoundsUpdate.

^ self.



! 
lastSuggestedExtentKnownToParent: lastSuggestedExtentKnownToParent_val lastSuggestedExtentKnownToParent := lastSuggestedExtentKnownToParent_val! 
 endPoint: newEndPoint 

 self  endPointS: newEndPoint.

 self requestBoundsUpdate.

^ self.



! 
endPointS: endPointS_val endPointS := endPointS_val! 
 resetLastSuggestedExtentKnownToParent 

 self  lastSuggestedExtentKnownToParent:(-1 @-1).

^ self.



! 
 new 

 self Brazil_AreaClasses_LineArea_superInit_new.

 self Brazil_AreaClasses_LineArea_1_init.

^ self.



! 
lastSuggestedExtentKnownToParent ^lastSuggestedExtentKnownToParent! 
 boundsWithin: referenceBounds 

|  width |

 width := self visual width.

^ (EnclosingObjects_Brazil_AreaClasses_LineArea at: 2)  Rectangle  left:( self  startPointS x min: self  endPointS x) -  width right:( self  startPointS x max: self  endPointS x) + width top:( self  startPointS y min: self  endPointS y) -  width bottom:( self  startPointS y max: self  endPointS y) + width.



! 
startPointS: startPointS_val startPointS := startPointS_val! 
  startPoint: newStartPoint endPoint: newEndPoint 

 self  startPointS: newStartPoint.

 self  endPointS: newEndPoint.

 self requestBoundsUpdate.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_LineArea) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_LineArea := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_LineArea := mmd !
	 visual: aVisual 

^ self new visual: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_LineArea. ! 
	Brazil_AreaClasses_LineArea metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_AreaClasses_CellWidthEqualizer as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' cachedNaturalExtentX indexX cellsX')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_CellWidthEqualizer EnclosingObjects_Brazil_AreaClasses_CellWidthEqualizer')!
	(Delta mirrorFor: #Brazil_AreaClasses_CellWidthEqualizer) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_CellWidthEqualizer) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_CellWidthEqualizer) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_CellWidthEqualizer) methodsFor: 'unclassified'!
	cachedNaturalExtentX ^cachedNaturalExtentX! 
indexX ^indexX! 
 commonNaturalWidth 

^ self  cellsX  inject:0 into:[ : max : each | 

 max max: each visual naturalExtent x.

].



! 
cellsX ^cellsX! 
 Brazil_AreaClasses_CellWidthEqualizer_1_init 

 self cellsX: (EnclosingObjects_Brazil_AreaClasses_CellWidthEqualizer at: 2)  OrderedCollection new.

 self indexX:nil.

 self cachedNaturalExtentX:nil.

^ self.



! 
cellsX: cellsX_val cellsX := cellsX_val! 
 new 

 self Brazil_AreaClasses_CellWidthEqualizer_superInit_new.

 self Brazil_AreaClasses_CellWidthEqualizer_1_init.

^ self.



! 
indexX: indexX_val indexX := indexX_val! 
  equalize: collection at: index 

 self  indexX: index.

 collection do:[ : each | 

|  visual |

 visual := each at: index.

 visual areaClass: (EnclosingObjects_Brazil_AreaClasses_CellWidthEqualizer at: 1)  WidthEqualizingRowCell.

 self  cellsX add: visual area.

 visual area equalizer: self.

].

^ self.



! 
 Brazil_AreaClasses_CellWidthEqualizer_superInit_new 

super  new.

^ self.



! 
 equalizeRowElements: visuals 

 visuals do:[ : each | 

 each areaClass: (EnclosingObjects_Brazil_AreaClasses_CellWidthEqualizer at: 1)  WidthEqualizingRowCell.

 self  cellsX add: each area.

 each area equalizer: self.

].

^ self.



! 
cachedNaturalExtentX: cachedNaturalExtentX_val cachedNaturalExtentX := cachedNaturalExtentX_val! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_CellWidthEqualizer) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_CellWidthEqualizer := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_CellWidthEqualizer := mmd !
	  equalize: collection at: index 

^ self new  equalize: collection at: index.



! 
		 equalizeRowElements: visuals 

^ self new equalizeRowElements: visuals.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_CellWidthEqualizer. ! 
	Brazil_AreaClasses_CellWidthEqualizer metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_AreaClasses_ShapeArea as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' originS lastSuggestedExtentKnownToParent')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_ShapeArea EnclosingObjects_Brazil_AreaClasses_ShapeArea')!
	(Delta mirrorFor: #Brazil_AreaClasses_ShapeArea) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_ShapeArea) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_ShapeArea) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_ShapeArea) methodsFor: 'unclassified'!
	 Brazil_AreaClasses_ShapeArea_superInit_new 

super  new.

^ self.



! 
 visual: aVisual 

super  visual: aVisual.

 self  resetLastSuggestedExtentKnownToParent.

 self  origin:(0 @0).

^ self.



! 
 origin 

^ self  originS.



! 
 resetLastSuggestedExtentKnownToParent 

 self  lastSuggestedExtentKnownToParent:(-1 @-1).

^ self.



! 
 Brazil_AreaClasses_ShapeArea_1_init 

 self originS:nil.

 self lastSuggestedExtentKnownToParent:nil.

^ self.



! 
originS ^originS! 
 bounds: newBounds 

 self  originS: newBounds origin.

 self visual size: newBounds extent.

^ self.



! 
lastSuggestedExtentKnownToParent: lastSuggestedExtentKnownToParent_val lastSuggestedExtentKnownToParent := lastSuggestedExtentKnownToParent_val! 
 moveTo: newOrigin 

 self origin: newOrigin.

^ self.



! 
 suggestedParentExtent 

^ self  originS + self visual naturalExtent.



! 
 moveBy: delta 

 self  originS:( self  origin + delta).

 self requestBoundsUpdate.

^ self.



! 
originS: originS_val originS := originS_val! 
 new 

 self Brazil_AreaClasses_ShapeArea_superInit_new.

 self Brazil_AreaClasses_ShapeArea_1_init.

^ self.



! 
 origin: newOrigin 

 self  originS: newOrigin.

 self requestBoundsUpdate.

^ self.



! 
lastSuggestedExtentKnownToParent ^lastSuggestedExtentKnownToParent! 
 boundsWithin: referenceBounds 

^ self  originS extent: self visual naturalExtent.



! 
 isSqueezing 

^false.



! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_ShapeArea) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_ShapeArea := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_ShapeArea := mmd !
	 visual: aVisual 

^ self new visual: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_ShapeArea. ! 
	Brazil_AreaClasses_ShapeArea metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_AreaClasses_PolygonArea as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' cachedEnclosingRectangle lastSuggestedExtentKnownToParent verticesS')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_PolygonArea EnclosingObjects_Brazil_AreaClasses_PolygonArea')!
	(Delta mirrorFor: #Brazil_AreaClasses_PolygonArea) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_PolygonArea) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_PolygonArea) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_PolygonArea) methodsFor: 'unclassified'!
	cachedEnclosingRectangle ^cachedEnclosingRectangle! 
 vertices 

^ self  verticesS.



! 
 computeEnclosingRectangle 

|  minX  maxX  minY  maxY |

 minX := (EnclosingObjects_Brazil_AreaClasses_PolygonArea at: 2)  SmallInteger maxVal.

 maxX := (EnclosingObjects_Brazil_AreaClasses_PolygonArea at: 2)  SmallInteger minVal.

 minY := minX.

 maxY := maxX.

 self  vertices do:[ : each | 

|  x  y |

 x := each x.

 y := each y.

 minX := minX min: x.

 maxX := maxX max: x.

 minY := minY min: y.

 maxY := maxY max: y.

].

^ minX @ minY corner:( maxX @ maxY).



! 
 isVisualSquishy 

^false.



! 
 suggestedParentHeightForWidth: ignored 

^ self  suggestedParentExtent y.



! 
 Brazil_AreaClasses_PolygonArea_1_init 

 self verticesS:(( self Array new:1)  at:1 put:0 @0; 

 yourself).

 self lastSuggestedExtentKnownToParent:nil.

 self cachedEnclosingRectangle:nil.

^ self.



! 
 vertices: newValue 

 self  verticesS: newValue.

 self  cachedEnclosingRectangle:nil.

 self requestBoundsUpdate.

^ self.



! 
 Brazil_AreaClasses_PolygonArea_superInit_new 

super  new.

^ self.



! 
 suggestedParentExtent 

^ self  enclosingRectangle corner.



! 
lastSuggestedExtentKnownToParent: lastSuggestedExtentKnownToParent_val lastSuggestedExtentKnownToParent := lastSuggestedExtentKnownToParent_val! 
 enclosingRectangle 

^ self  cachedEnclosingRectangle ifNil:[ 

 self  cachedEnclosingRectangle: self  computeEnclosingRectangle.

 self  cachedEnclosingRectangle.

].



! 
verticesS: verticesS_val verticesS := verticesS_val! 
cachedEnclosingRectangle: cachedEnclosingRectangle_val cachedEnclosingRectangle := cachedEnclosingRectangle_val! 
verticesS ^verticesS! 
 resetLastSuggestedExtentKnownToParent 

 self  lastSuggestedExtentKnownToParent:(-1 @-1).

^ self.



! 
 new 

 self Brazil_AreaClasses_PolygonArea_superInit_new.

 self Brazil_AreaClasses_PolygonArea_1_init.

^ self.



! 
lastSuggestedExtentKnownToParent ^lastSuggestedExtentKnownToParent! 
 boundsWithin: referenceBounds 

^ self  enclosingRectangle.



! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_PolygonArea) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_PolygonArea := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_PolygonArea := mmd !
	 visual: aVisual 

^ self new visual: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_PolygonArea. ! 
	Brazil_AreaClasses_PolygonArea metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_AreaClasses_RowCell as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_RowCell EnclosingObjects_Brazil_AreaClasses_RowCell')!
	(Delta mirrorFor: #Brazil_AreaClasses_RowCell) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_RowCell) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_RowCell) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_RowCell) methodsFor: 'unclassified'!
	 naturalPrincipalSize 

^ self visual naturalExtent x.



! 
 naturalHeightForWidth: width 

^ self visual naturalHeightForWidth: width.



! 
 naturalExtent 

^ self  width @ self visual naturalExtent y.



! 
 mayAccommodateVisualsNaturalWidthChange 

^ self imposesSize not and:[ 

 self visual parent mayAccommodateNaturalWidthChangeOf: self visual.

].



! 
 isVisualSquishy 

^ self imposesSize or:[ 

 self isElastic and:[ 

 self visual isSquishy.

].

].



! 
 naturalOrthogonalSize 

^ self visual naturalExtent y.



! 
 Brazil_AreaClasses_RowCell_1_init 

^ self.



! 
 Brazil_AreaClasses_RowCell_superInit_new 

super  new.

^ self.



! 
 width: pixels 

 self principalSize: pixels.

^ self.



! 
 width 

^ self principalSize.



! 
 new 

 self Brazil_AreaClasses_RowCell_superInit_new.

 self Brazil_AreaClasses_RowCell_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_RowCell) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_RowCell := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_RowCell := mmd !
	 visual: aVisual 

^ self new visual: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_RowCell. ! 
	Brazil_AreaClasses_RowCell metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_AreaClasses_Area as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' visualS')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_Area EnclosingObjects_Brazil_AreaClasses_Area')!
	(Delta mirrorFor: #Brazil_AreaClasses_Area) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_Area) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_Area) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_Area) methodsFor: 'unclassified'!
	 copyConfigurationFromAnchor: anchor 

^ self.



! 
 mayAccommodateVisualsNaturalHeightChange 

^ self  visual parent mayAccommodateNaturalHeightChangeOf: self  visual.



! 
visualS ^visualS! 
 copyConfigurationFromFrame: frame 

^ self.



! 
 copyConfigurationTo: another 

^ self.



! 
 visual 

^ self  visualS.



! 
 visualRequestsBoundsUpdateUsing: aBlock 

 self  visual parent  child: self  visual requestsBoundsUpdateUsing: aBlock.

^ self.



! 
 isVisualSquishy 

 self subclassResponsibility.

^ self.



! 
 isSqueezing 

^ self  visual parent isSqueezing.



! 
 Brazil_AreaClasses_Area_1_init 

 self visualS:nil.

^ self.



! 
 requestBoundsUpdate 

( self  visual area == self and:[ 

 self  visual updateLockLevel <1.

]) ifTrue:[ 

 self  visual parent  child: self  visual requestsBoundsUpdateUsing:[ : newBounds | 

 self  visual occupyBounds: newBounds.

].

].

^ self.



! 
 isFuture 

^false.



! 
 flushLayoutCaches 

^ self.



! 
 visual: aVisual 

 self  visualS: aVisual.

^ self.



! 
 new 

 self Brazil_AreaClasses_Area_superInit_new.

 self Brazil_AreaClasses_Area_1_init.

^ self.



! 
visualS: visualS_val visualS := visualS_val! 
 Brazil_AreaClasses_Area_superInit_new 

super  new.

^ self.



! 
 mayAccommodateVisualsNaturalWidthChange 

^ self  visual parent mayAccommodateNaturalWidthChangeOf: self  visual.



! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_Area) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_Area := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_Area := mmd !
	 visual: aVisual 

^ self new visual: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_Area. ! 
	Brazil_AreaClasses_Area metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_AreaClasses_GridRowCell as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' orthogonalSizeS forcedExtentX')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_GridRowCell EnclosingObjects_Brazil_AreaClasses_GridRowCell')!
	(Delta mirrorFor: #Brazil_AreaClasses_GridRowCell) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_GridRowCell) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_GridRowCell) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_GridRowCell) methodsFor: 'unclassified'!
	 naturalPrincipalSize 

^ self  naturalExtent x.



! 
 naturalHeightForWidth: width 

^ self  forcedExtentX  ifNil:[ 

super  naturalHeightForWidth: width.

] ifNotNil:[ 

 self  forcedExtentX y.

].



! 
 extent 

^ self width @ self  height.



! 
 forcedExtent: newExtent 

 self  forcedExtentX: newExtent.

#'BOGUS' yourself.

 self requestBoundsUpdate.

^ self.



! 
 height: newHeight 

 self  orthogonalSize: newHeight.

^ self.



! 
 quietlySetWidth: newWidth 

 self principalSizeS: newWidth.

^ self.



! 
 orthogonalSize 

^ self  orthogonalSizeS ==nil  ifTrue:[ 

 self  forcedExtentX ==nil  ifTrue:[ 

 self naturalOrthogonalSize.

] ifFalse:[ 

 self  forcedExtentX y.

].

] ifFalse:[ 

 self  orthogonalSizeS.

].



! 
orthogonalSizeS ^orthogonalSizeS! 
 naturalExtent 

^ self  forcedExtentX ifNil:[ 

 self visual naturalExtent.

].



! 
 new 

 self Brazil_AreaClasses_GridRowCell_superInit_new.

 self Brazil_AreaClasses_GridRowCell_1_init.

^ self.



! 
 extent: extent 

 self principalSizeS: extent x.

 self  orthogonalSizeS: extent y.

 self requestBoundsUpdate.

^ self.



! 
 Brazil_AreaClasses_GridRowCell_superInit_new 

super  new.

^ self.



! 
 grid 

^ self visual parent grid.



! 
 height 

^ self  orthogonalSize.



! 
forcedExtentX ^forcedExtentX! 
 Brazil_AreaClasses_GridRowCell_1_init 

 self orthogonalSizeS:nil.

 self forcedExtentX:nil.

^ self.



! 
 orthogonalSize: size 

 self  orthogonalSizeS: size.

 self requestBoundsUpdate.

^ self.



! 
orthogonalSizeS: orthogonalSizeS_val orthogonalSizeS := orthogonalSizeS_val! 
forcedExtentX: forcedExtentX_val forcedExtentX := forcedExtentX_val! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_GridRowCell) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_GridRowCell := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_GridRowCell := mmd !
	 visual: aVisual 

^ self new visual: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_GridRowCell. ! 
	Brazil_AreaClasses_GridRowCell metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_AreaClasses_ColumnCell as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_ColumnCell EnclosingObjects_Brazil_AreaClasses_ColumnCell')!
	(Delta mirrorFor: #Brazil_AreaClasses_ColumnCell) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_ColumnCell) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_ColumnCell) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_ColumnCell) methodsFor: 'unclassified'!
	 naturalPrincipalSize 

^ self visual naturalExtent y.



! 
 naturalHeightForWidth: size 

^ self principalSizeS ifNil:[ 

 self visual naturalHeightForWidth: size.

].



! 
 naturalExtent 

^ self visual naturalExtent x @ self  height.



! 
 isSqueezing 

^ self imposesSize not and:[ 

super  isSqueezing.

].



! 
 height 

^ self principalSize.



! 
 height: pixels 

 self principalSize: pixels.

^ self.



! 
 Brazil_AreaClasses_ColumnCell_superInit_new 

super  new.

^ self.



! 
 naturalOrthogonalSize 

^ self visual naturalExtent x.



! 
 new 

 self Brazil_AreaClasses_ColumnCell_superInit_new.

 self Brazil_AreaClasses_ColumnCell_1_init.

^ self.



! 
 mayAccommodateVisualsNaturalHeightChange 

^ self imposesSize not and:[ 

 self visual parent mayAccommodateNaturalHeightChangeOf: self visual.

].



! 
 Brazil_AreaClasses_ColumnCell_1_init 

^ self.



! 
 isVisualSquishy 

^ self imposesSize not and:[ 

 self visual isSquishy.

].



! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_ColumnCell) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_ColumnCell := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_ColumnCell := mmd !
	 visual: aVisual 

^ self new visual: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_ColumnCell. ! 
	Brazil_AreaClasses_ColumnCell metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_AreaClasses_FutureArea as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_FutureArea EnclosingObjects_Brazil_AreaClasses_FutureArea')!
	(Delta mirrorFor: #Brazil_AreaClasses_FutureArea) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_FutureArea) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_FutureArea) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_FutureArea) methodsFor: 'unclassified'!
	 isFuture 

^true.



! 
 flushLayoutCaches 

^ self.



! 
 isSqueezing 

^false.



! 
 visualRequestsBoundsUpdateUsing: continuation 

^ self.



! 
 copyConfigurationTo: area 

 self playRecordedMessagesTo: area.

^ self.



! 
 Brazil_AreaClasses_FutureArea_superInit_new 

super  new.

^ self.



! 
 Brazil_AreaClasses_FutureArea_1_init 

^ self.



! 
 new 

 self Brazil_AreaClasses_FutureArea_superInit_new.

 self Brazil_AreaClasses_FutureArea_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_FutureArea) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_FutureArea := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_FutureArea := mmd !
	 visual: aVisual 

^ self new visual: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_FutureArea. ! 
	Brazil_AreaClasses_FutureArea metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_AreaClasses_WidthEqualizingRowCell as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' equalizer')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_WidthEqualizingRowCell EnclosingObjects_Brazil_AreaClasses_WidthEqualizingRowCell')!
	(Delta mirrorFor: #Brazil_AreaClasses_WidthEqualizingRowCell) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_WidthEqualizingRowCell) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_WidthEqualizingRowCell) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_WidthEqualizingRowCell) methodsFor: 'unclassified'!
	 Brazil_AreaClasses_WidthEqualizingRowCell_1_init 

 self equalizer:nil.

^ self.



! 
 naturalPrincipalSize 

^ self  equalizer commonNaturalWidth.



! 
 Brazil_AreaClasses_WidthEqualizingRowCell_superInit_new 

super  new.

^ self.



! 
equalizer: equalizer_val equalizer := equalizer_val! 
equalizer ^equalizer! 
 new 

 self Brazil_AreaClasses_WidthEqualizingRowCell_superInit_new.

 self Brazil_AreaClasses_WidthEqualizingRowCell_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_WidthEqualizingRowCell) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_WidthEqualizingRowCell := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_WidthEqualizingRowCell := mmd !
	 visual: aVisual 

^ self new visual: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_WidthEqualizingRowCell. ! 
	Brazil_AreaClasses_WidthEqualizingRowCell metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_AreaClasses_Frame as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' topFractionS leftFractionS rightFractionS leftOffsetS rightOffsetS topOffsetS bottomFractionS bottomOffsetS lastSuggestedExtentKnownToParent')
	 classVariables: 'MixinMetadata_Brazil_AreaClasses_Frame EnclosingObjects_Brazil_AreaClasses_Frame')!
	(Delta mirrorFor: #Brazil_AreaClasses_Frame) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AreaClasses_Frame) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AreaClasses_Frame) comment: #''!
	! (Delta mirrorFor: #Brazil_AreaClasses_Frame) methodsFor: 'unclassified'!
	rightOffsetS: rightOffsetS_val rightOffsetS := rightOffsetS_val! 
bottomOffsetS ^bottomOffsetS! 
 isElasticX 

^ self  rightFraction ~=0 or:[ 

 self  leftFraction ~=0.

].



! 
 leftFraction: fraction 

 self  leftFractionS: fraction.

 self requestBoundsUpdate.

^ self.



! 
 suggestedParentHeightForWidth: width 

|  left  right  imposedCompositionWidth  heightFromVisual |

( self  topFraction =0 and:[ 

 self  bottomFraction =1.

]) ifTrue:[ 

 left := width * self  leftFraction + self  leftOffset.

 right := width * self  rightFraction + self  rightOffset.

 imposedCompositionWidth := right -  left.

 heightFromVisual := self visual naturalHeightForWidth: imposedCompositionWidth.

^ heightFromVisual + self  topOffset -  self  bottomOffset.

].

#'BOGUS' yourself.

^ self  bottomOffset.



! 
 padding: padding 

 padding isInteger  ifTrue:[ 

 self   offsetsLeft: padding top: padding right: padding negated bottom: padding negated.

] ifFalse:[ 

 self   offsetsLeft: padding x top: padding y right: padding x negated bottom: padding y negated.

].

 self  rightFraction:1.

 self  bottomFraction:1.

^ self.



! 
 mayAccommodateVisualsNaturalHeightChange 

^ self  isElasticY and:[ 

super  mayAccommodateVisualsNaturalHeightChange.

].



! 
leftFractionS: leftFractionS_val leftFractionS := leftFractionS_val! 
 copyConfigurationFromFrame: another 

 self  leftFraction: another leftFraction.

 self  leftOffset: another leftOffset.

 self  topFraction: another topFraction.

 self  topOffset: another topOffset.

 self  rightFraction: another rightFraction.

 self  rightOffset: another rightOffset.

 self  bottomFraction: another bottomFraction.

 self  bottomOffset: another bottomOffset.

^ self.



! 
 topOffset 

^ self  topOffsetS.



! 
leftFractionS ^leftFractionS! 
 copyConfigurationTo: another 

 another copyConfigurationFromFrame: self.

^ self.



! 
bottomFractionS: bottomFractionS_val bottomFractionS := bottomFractionS_val! 
 new 

 self Brazil_AreaClasses_Frame_superInit_new.

 self Brazil_AreaClasses_Frame_1_init.

^ self.



! 
 isElastic 

^ self  leftFraction ~=0 or:[ 

 self  topFraction ~=0 or:[ 

 self  rightFraction ~=0 or:[ 

 self  bottomFraction ~=0.

].

].

].



! 
 Brazil_AreaClasses_Frame_1_init 

 self leftFractionS:nil.

 self leftOffsetS:nil.

 self topFractionS:nil.

 self topOffsetS:nil.

 self rightFractionS:nil.

 self rightOffsetS:nil.

 self bottomFractionS:nil.

 self bottomOffsetS:nil.

 self lastSuggestedExtentKnownToParent:nil.

^ self.



! 
 leftOffset: offset 

 self  leftOffsetS: offset.

 self requestBoundsUpdate.

^ self.



! 
rightFractionS: rightFractionS_val rightFractionS := rightFractionS_val! 
bottomFractionS ^bottomFractionS! 
rightOffsetS ^rightOffsetS! 
topOffsetS ^topOffsetS! 
topFractionS: topFractionS_val topFractionS := topFractionS_val! 
 visualRequestsBoundsUpdateUsing: aBlock 

 self  isElastic  ifTrue:[ 

super  visualRequestsBoundsUpdateUsing: aBlock.

] ifFalse:[ 

 aBlock value: self visual bounds.

].

^ self.



! 
rightFractionS ^rightFractionS! 
 bottomOffset: offset 

 self  bottomOffsetS: offset.

 self requestBoundsUpdate.

^ self.



! 
lastSuggestedExtentKnownToParent ^lastSuggestedExtentKnownToParent! 
 isZero 

^ self  isElastic not and:[ 

 self  leftOffset =0 and:[ 

 self  rightOffset =0 and:[ 

 self  topOffset =0 and:[ 

 self  bottomOffset =0.

].

].

].

].



! 
 leftFraction 

^ self  leftFractionS.



! 
 bottomFraction 

^ self  bottomFractionS.



! 
 isElasticY 

^ self  bottomFraction ~=0 or:[ 

 self  topFraction ~=0.

].



! 
 fullyCoverParent 

 self  padding:0.

^ self.



! 
 rightOffset 

^ self  rightOffsetS.



! 
 topFraction: fraction 

 self  topFractionS: fraction.

 self requestBoundsUpdate.

^ self.



! 
leftOffsetS: leftOffsetS_val leftOffsetS := leftOffsetS_val! 
leftOffsetS ^leftOffsetS! 
topOffsetS: topOffsetS_val topOffsetS := topOffsetS_val! 
 rightOffset: offset 

 self  rightOffsetS: offset.

 self requestBoundsUpdate.

^ self.



! 
bottomOffsetS: bottomOffsetS_val bottomOffsetS := bottomOffsetS_val! 
 rightFraction 

^ self  rightFractionS.



! 
 bottomOffset 

^ self  bottomOffsetS.



! 
 suggestedParentExtent 

 self  isElastic ifFalse:[ 

^ self  rightOffset @ self  bottomOffset.

].

 self  isFramedByParent ifTrue:[ 

^ self visual naturalExtent +( self  leftOffset -  self  rightOffset @( self  topOffset -  self  bottomOffset)).

].

#'BOGUS' yourself.

^0 @0.



! 
 Brazil_AreaClasses_Frame_superInit_new 

super  new.

^ self.



! 
 leftOffset 

^ self  leftOffsetS.



! 
 bounds: aRectangle 

 self  offsetsLeft: aRectangle left top: aRectangle top right: aRectangle right bottom: aRectangle bottom.

^ self.



! 
 isVisualSquishy 

^ self  isElasticY and:[ 

 self visual isSquishy.

].



! 
 extent: newExtent 

 self  rightOffsetS:( self  leftOffsetS + newExtent x).

 self  bottomOffsetS:( self  topOffsetS + newExtent y).

 self requestBoundsUpdate.

^ self.



! 
lastSuggestedExtentKnownToParent: lastSuggestedExtentKnownToParent_val lastSuggestedExtentKnownToParent := lastSuggestedExtentKnownToParent_val! 
 isSqueezing 

^super  isSqueezing and:[ 

 self  isElasticY.

].



! 
 rightFraction: fraction 

 self  rightFractionS: fraction.

 self requestBoundsUpdate.

^ self.



! 
  fractionsLeft: left top: top right: right bottom: bottom 

 self  leftFraction: left offset:0 topFraction: top offset:0 rightFraction: right offset:0 bottomFraction: bottom offset:0.

^ self.



! 
topFractionS ^topFractionS! 
 isFramedByParent 

^ self  leftFraction =0 and:[ 

 self  topFraction =0 and:[ 

 self  rightFraction =1 and:[ 

 self  bottomFraction =1.

].

].

].



! 
  offsetsLeft: left top: top right: right bottom: bottom 

 self  leftFraction:0 offset: left topFraction:0 offset: top rightFraction:0 offset: right bottomFraction:0 offset: bottom.

^ self.



! 
 visual: aVisual 

super  visual: aVisual.

 self  resetLastSuggestedExtentKnownToParent.

 self  bounds:(0 @0 corner:(0 @0)).

^ self.



! 
 bottomFraction: fraction 

 self  bottomFractionS: fraction.

 self requestBoundsUpdate.

^ self.



! 
 resetLastSuggestedExtentKnownToParent 

 self  lastSuggestedExtentKnownToParent:(-1 @-1).

^ self.



! 
 topOffset: offset 

 self  topOffsetS: offset.

 self requestBoundsUpdate.

^ self.



! 
  leftFraction: lf offset: lo topFraction: tf offset: to rightFraction: rf offset: ro bottomFraction: bf offset: bo 

 self  leftFractionS: lf.

 self  leftOffsetS: lo.

 self  topFractionS: tf.

 self  topOffsetS: to.

 self  rightFractionS: rf.

 self  rightOffsetS: ro.

 self  bottomFractionS: bf.

 self  bottomOffsetS: bo.

 self requestBoundsUpdate.

^ self.



! 
 boundsWithin: compositionBounds 

|  parentOrigin  parentExtent  width  height  left  top  right  bottom |

 parentOrigin := compositionBounds origin.

 parentExtent := compositionBounds extent.

 width := parentExtent x.

 height := parentExtent y.

 left :=( width * self  leftFraction) rounded + self  leftOffset.

 top :=( height * self  topFraction) rounded + self  topOffset.

 right :=( width * self  rightFraction) rounded + self  rightOffset.

 bottom :=( height * self  bottomFraction) rounded + self  bottomOffset.

^ (EnclosingObjects_Brazil_AreaClasses_Frame at: 2)  Rectangle  origin: left @ top + parentOrigin corner: right @ bottom + parentOrigin.



! 
 mayAccommodateVisualsNaturalWidthChange 

^ self  isElasticX and:[ 

super  mayAccommodateVisualsNaturalWidthChange.

].



! 
 topFraction 

^ self  topFractionS.



! 
 !
	! (Delta mirrorFor: #Brazil_AreaClasses_Frame) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AreaClasses_Frame := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AreaClasses_Frame := mmd !
	 visual: aVisual 

^ self new visual: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_AreaClasses metadata addNestedClass: Brazil_AreaClasses_Frame. ! 
	Brazil_AreaClasses_Frame metadata enclosingMixin: Brazil_AreaClasses !
	Delta define: #Brazil_MappingClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' Brazil_MappingClasses_BrazilMappingAgent_slot Brazil_MappingClasses_AbstractAgentFactory_slot Brazil_MappingClasses_AttributeMapping_slot')
	 classVariables: 'MixinMetadata_Brazil_MappingClasses EnclosingObjects_Brazil_MappingClasses')!
	(Delta mirrorFor: #Brazil_MappingClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_MappingClasses) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_MappingClasses) comment: #''!
	! (Delta mirrorFor: #Brazil_MappingClasses) methodsFor: 'unclassified'!
	AbstractAgentFactory
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_MappingClasses_AbstractAgentFactory_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_MappingClasses 
			nestedMixins at: #Brazil_MappingClasses_AbstractAgentFactory.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_MappingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_MappingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_MappingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_MappingClasses_AbstractAgentFactory_slot := myNested.
		].
	^Brazil_MappingClasses_AbstractAgentFactory_slot! 
 Brazil_MappingClasses_superInit_new 

super  new.

^ self.



! 
AttributeMapping
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_MappingClasses_AttributeMapping_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_MappingClasses 
			nestedMixins at: #Brazil_MappingClasses_AttributeMapping.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_MappingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_MappingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_MappingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_MappingClasses_AttributeMapping_slot := myNested.
		].
	^Brazil_MappingClasses_AttributeMapping_slot! 
BrazilMappingAgent
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_MappingClasses_BrazilMappingAgent_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_MappingClasses 
			nestedMixins at: #Brazil_MappingClasses_BrazilMappingAgent.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_MappingClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_MappingClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_MappingClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_MappingClasses_BrazilMappingAgent_slot := myNested.
		].
	^Brazil_MappingClasses_BrazilMappingAgent_slot! 
 Brazil_MappingClasses_1_init 

^ self.



! 
 new 

 self Brazil_MappingClasses_superInit_new.

 self Brazil_MappingClasses_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_MappingClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_MappingClasses := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_MappingClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil metadata addNestedClass: Brazil_MappingClasses. ! 
	Brazil_MappingClasses metadata enclosingMixin: Brazil !
	Delta define: #Brazil_MappingClasses_AbstractAgentFactory as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_MappingClasses_AbstractAgentFactory EnclosingObjects_Brazil_MappingClasses_AbstractAgentFactory')!
	(Delta mirrorFor: #Brazil_MappingClasses_AbstractAgentFactory) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_MappingClasses_AbstractAgentFactory) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_MappingClasses_AbstractAgentFactory) comment: #''!
	! (Delta mirrorFor: #Brazil_MappingClasses_AbstractAgentFactory) methodsFor: 'unclassified'!
	 createAgentForIcon: visual 

 self subclassResponsibility.

^ self.



! 
 createAgentForActiveIcon: visual 

 self subclassResponsibility.

^ self.



! 
 createAgentForCompositeVisual: visual 

 self subclassResponsibility.

^ self.



! 
 Brazil_MappingClasses_AbstractAgentFactory_1_init 

^ self.



! 
 createAgentForBlank: visual 

 self subclassResponsibility.

^ self.



! 
 Brazil_MappingClasses_AbstractAgentFactory_superInit_new 

super  new.

^ self.



! 
 createAgentForLabel: visual 

 self subclassResponsibility.

^ self.



! 
 createAgentForWindow: window 

 self subclassResponsibility.

^ self.



! 
 createAgentForEllipseShape: shape 

 self subclassResponsibility.

^ self.



! 
 createAgentForRectangleShape: shape 

 self subclassResponsibility.

^ self.



! 
 createAgentForPushButton: button 

 self subclassResponsibility.

^ self.



! 
 createAgentForMenu: menu 

 self subclassResponsibility.

^ self.



! 
 createAgentForHyperlink: visual 

 self subclassResponsibility.

^ self.



! 
 new 

 self Brazil_MappingClasses_AbstractAgentFactory_superInit_new.

 self Brazil_MappingClasses_AbstractAgentFactory_1_init.

^ self.



! 
 createAgentForLineShape: shape 

 self subclassResponsibility.

^ self.



! 
 createAgentForTextDisplay: visual 

 self subclassResponsibility.

^ self.



! 
 createAgentForWrapper: wrapper 

 self subclassResponsibility.

^ self.



! 
 createAgentForDesktop: aDesktop 

 self subclassResponsibility.

^ self.



! 
 createAgentForTextView: visual 

 self subclassResponsibility.

^ self.



! 
 createAgentForViewport: visual 

 self subclassResponsibility.

^ self.



! 
 createAgentForListBox: visual 

 self subclassResponsibility.

^ self.



! 
 createAgentForVisualSequence: visual 

 self subclassResponsibility.

^ self.



! 
 createAgentForPolygonShape: visual 

 self subclassResponsibility.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_MappingClasses_AbstractAgentFactory) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_MappingClasses_AbstractAgentFactory := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_MappingClasses_AbstractAgentFactory := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_MappingClasses metadata addNestedClass: Brazil_MappingClasses_AbstractAgentFactory. ! 
	Brazil_MappingClasses_AbstractAgentFactory metadata enclosingMixin: Brazil_MappingClasses !
	Delta define: #Brazil_MappingClasses_BrazilMappingAgent as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' visualX fullyMapped attributeMappings')
	 classVariables: 'MixinMetadata_Brazil_MappingClasses_BrazilMappingAgent EnclosingObjects_Brazil_MappingClasses_BrazilMappingAgent')!
	(Delta mirrorFor: #Brazil_MappingClasses_BrazilMappingAgent) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_MappingClasses_BrazilMappingAgent) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_MappingClasses_BrazilMappingAgent) comment: #''!
	! (Delta mirrorFor: #Brazil_MappingClasses_BrazilMappingAgent) methodsFor: 'unclassified'!
	visualX ^visualX! 
 attachToVisual: aVisual 

 self  visualX: aVisual.

 self  visual agent: self.

 self   map: self  visual boundsH to:[ : newBounds | 

 self  visual areUpdatesLocked ifFalse:[ 

 self  matchVisualsBounds.

].

].

^ self.



! 
 finishedMapping 

 self  fullyMapped:true.

^ self.



! 
 childrenReverseDo: aBlock 

 self  visual childrenReverseDo:[ : each | 

 each agent ifNotNil:[ : it | 

 aBlock value: it.

].

].

^ self.



! 
attributeMappings: attributeMappings_val attributeMappings := attributeMappings_val! 
 createOwnArtifacts 

 self subclassResponsibility.

^ self.



! 
 noticeChangeInChildAgentStructure 

 self  parent ifNotNil:[ : it | 

 it noticeChangeInChildAgentStructure.

].

^ self.



! 
 Brazil_MappingClasses_BrazilMappingAgent_1_init 

 self visualX:nil.

 self attributeMappings:nil.

 self fullyMapped:nil.

^ self.



! 
 new 

 self Brazil_MappingClasses_BrazilMappingAgent_superInit_new.

 self Brazil_MappingClasses_BrazilMappingAgent_1_init.

^ self.



! 
 destroyOwnArtifacts 

^ self.



! 
 destroy 

 self  deactivate.

 self  destroyOwnArtifacts.

^ self.



! 
 Brazil_MappingClasses_BrazilMappingAgent_superInit_new 

super  new.

^ self.



! 
 matchAttributes 

 self  attributeMappings do:[ : each | 

 each update.

].

^ self.



! 
 flushLayoutCaches 

^ self.



! 
 noteBeginningOfBoundsChangeAndProvideEndContinuation 

^nil.



! 
 childrenDo: aBlock 

 self  visual childrenDo:[ : each | 

 each agent ifNotNil:[ : it | 

 aBlock value: it.

].

].

^ self.



! 
 ensureUpToDateAppearance 

 self subclassResponsibility.

^ self.



! 
 createArtifactsForSubtree 

 self  createOwnArtifacts.

 self  connectOwnArtifacts.

 self  matchAttributes.

 self  childrenDo:[ : each | 

 each createArtifactsForSubtree.

].

 self  visual area flushLayoutCaches.

 self  visual updateGeometricProperties.

 self  isNull ifFalse:[ 

 self  parent connectArtifactsOfChild: self.

].

^ self.



! 
 connectOwnArtifacts 

^ self.



! 
fullyMapped: fullyMapped_val fullyMapped := fullyMapped_val! 
  map: attribute to: block 

^ self  attributeMappings add:( (EnclosingObjects_Brazil_MappingClasses_BrazilMappingAgent at: 1)  AttributeMapping  attribute: attribute block: block).



! 
attributeMappings ^attributeMappings! 
 noticeChangeInNaturalExtent 

^ self.



! 
 matchVisualsBounds 

 self subclassResponsibility.

^ self.



! 
 visual 

^ self  visualX.



! 
 forVisual: aVisual 

 self  fullyMapped:false.

 self  attributeMappings: (EnclosingObjects_Brazil_MappingClasses_BrazilMappingAgent at: 2)  OrderedCollection new.

 self  attachToVisual: aVisual.

^ self.



! 
 parent 

^ self  visual parent ifNotNil:[ : it | 

 it agent.

].



! 
 isNull 

^false.



! 
 connectArtifactsOfChild: childAgent 

^ self.



! 
fullyMapped ^fullyMapped! 
 inspectorIconOfSize: aNumberOrPoint 

^nil.



! 
 deactivate 

 self  attributeMappings do:[ : each | 

 each unmap.

].

 self  attributeMappings: (EnclosingObjects_Brazil_MappingClasses_BrazilMappingAgent at: 2)  OrderedCollection new.

 self  fullyMapped:false.

^ self.



! 
visualX: visualX_val visualX := visualX_val! 
 !
	! (Delta mirrorFor: #Brazil_MappingClasses_BrazilMappingAgent) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_MappingClasses_BrazilMappingAgent := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_MappingClasses_BrazilMappingAgent := mmd !
	 visual: aVisual 

^ self new forVisual: aVisual.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_MappingClasses metadata addNestedClass: Brazil_MappingClasses_BrazilMappingAgent. ! 
	Brazil_MappingClasses_BrazilMappingAgent metadata enclosingMixin: Brazil_MappingClasses !
	Delta define: #Brazil_MappingClasses_AttributeMapping as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' updateBlock attribute')
	 classVariables: 'MixinMetadata_Brazil_MappingClasses_AttributeMapping EnclosingObjects_Brazil_MappingClasses_AttributeMapping')!
	(Delta mirrorFor: #Brazil_MappingClasses_AttributeMapping) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_MappingClasses_AttributeMapping) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_MappingClasses_AttributeMapping) comment: #''!
	! (Delta mirrorFor: #Brazil_MappingClasses_AttributeMapping) methodsFor: 'unclassified'!
	 update 

 self  updateBlock reentrant value: self  attribute value.

^ self.



! 
  attribute: anAttribute block: aBlock 

 self  Brazil_MappingClasses_AttributeMapping_superInit_attribute: anAttribute block: aBlock.

 self  Brazil_MappingClasses_AttributeMapping_1_init_attribute: anAttribute block: aBlock.

 self  attribute mapTo: self  updateBlock.

^ self.



! 
 unmap 

 self  attribute unmap.

^ self.



! 
  Brazil_MappingClasses_AttributeMapping_superInit_attribute: anAttribute block: aBlock 

super  new.

^ self.



! 
attribute: attribute_val attribute := attribute_val! 
attribute ^attribute! 
updateBlock: updateBlock_val updateBlock := updateBlock_val! 
  Brazil_MappingClasses_AttributeMapping_1_init_attribute: anAttribute block: aBlock 

 self attribute: anAttribute.

 self updateBlock: aBlock.

^ self.



! 
updateBlock ^updateBlock! 
 !
	! (Delta mirrorFor: #Brazil_MappingClasses_AttributeMapping) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_MappingClasses_AttributeMapping := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_MappingClasses_AttributeMapping := mmd !
	  attribute: anAttribute block: aBlock 

^ self basicNew  attribute: anAttribute block: aBlock.



! 
		 !
	Brazil_MappingClasses metadata addNestedClass: Brazil_MappingClasses_AttributeMapping. ! 
	Brazil_MappingClasses_AttributeMapping metadata enclosingMixin: Brazil_MappingClasses !
	Delta define: #Brazil_ContainerClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' MappableHolder Anchor Frame Brazil_ContainerClasses_Window_slot Blank Brazil_ContainerClasses_HorizontalViewport_slot Brazil_ContainerClasses_Wrapper_slot Brazil_ContainerClasses_Viewport_slot ContainerVisual Brazil_ContainerClasses_CompositeVisual_slot Brazil_ContainerClasses_VerticalViewport_slot Brazil_ContainerClasses_Row_slot Brazil_ContainerClasses_Grid_slot VisualCollection VerticalVisualSequence Attribute Brazil_ContainerClasses_Desktop_slot Brazil_ContainerClasses_GridRowX_slot ModifierKeyState Brazil_ContainerClasses_Column_slot Brazil_ContainerClasses_Flow_slot HorizontalVisualSequence Brazil_ContainerClasses_SpyingWrapper_slot')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses EnclosingObjects_Brazil_ContainerClasses')!
	(Delta mirrorFor: #Brazil_ContainerClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses) comment: #''!
	! (Delta mirrorFor: #Brazil_ContainerClasses) methodsFor: 'unclassified'!
	VerticalVisualSequence: VerticalVisualSequence_val VerticalVisualSequence := VerticalVisualSequence_val! 
ModifierKeyState: ModifierKeyState_val ModifierKeyState := ModifierKeyState_val! 
Attribute: Attribute_val Attribute := Attribute_val! 
Anchor: Anchor_val Anchor := Anchor_val! 
VisualCollection: VisualCollection_val VisualCollection := VisualCollection_val! 
Row
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_Row_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_Row.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self  HorizontalVisualSequence)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_Row_slot := myNested.
		].
	^Brazil_ContainerClasses_Row_slot! 
SpyingWrapper
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_SpyingWrapper_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_SpyingWrapper.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self  Wrapper)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_SpyingWrapper_slot := myNested.
		].
	^Brazil_ContainerClasses_SpyingWrapper_slot! 
 new 

 self Brazil_ContainerClasses_superInit_new.

 self Brazil_ContainerClasses_1_init.

^ self.



! 
 Brazil_ContainerClasses_1_init 

 self ContainerVisual: (EnclosingObjects_Brazil_ContainerClasses at: 1)  visuals ContainerVisual.

 self VerticalVisualSequence: (EnclosingObjects_Brazil_ContainerClasses at: 1)  visuals VerticalVisualSequence.

 self VisualCollection: (EnclosingObjects_Brazil_ContainerClasses at: 1)  visuals VisualCollection.

 self HorizontalVisualSequence: (EnclosingObjects_Brazil_ContainerClasses at: 1)  visuals HorizontalVisualSequence.

 self Anchor: (EnclosingObjects_Brazil_ContainerClasses at: 1)  areas Anchor.

 self Frame: (EnclosingObjects_Brazil_ContainerClasses at: 1)  areas Frame.

 self ModifierKeyState: (EnclosingObjects_Brazil_ContainerClasses at: 1)  plumbing ModifierKeyState.

 self Attribute: (EnclosingObjects_Brazil_ContainerClasses at: 1)  plumbing Attribute.

 self Blank: (EnclosingObjects_Brazil_ContainerClasses at: 1)  widgets Blank.

 self MappableHolder: (EnclosingObjects_Brazil_ContainerClasses at: 1)  plumbing MappableHolder.

^ self.



! 
VisualCollection ^VisualCollection! 
Flow
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_Flow_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_Flow.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self  VisualCollection)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_Flow_slot := myNested.
		].
	^Brazil_ContainerClasses_Flow_slot! 
Wrapper
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_Wrapper_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_Wrapper.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self  ContainerVisual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_Wrapper_slot := myNested.
		].
	^Brazil_ContainerClasses_Wrapper_slot! 
ModifierKeyState ^ModifierKeyState! 
MappableHolder: MappableHolder_val MappableHolder := MappableHolder_val! 
HorizontalVisualSequence ^HorizontalVisualSequence! 
MappableHolder ^MappableHolder! 
CompositeVisual
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_CompositeVisual_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_CompositeVisual.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self  VisualCollection)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_CompositeVisual_slot := myNested.
		].
	^Brazil_ContainerClasses_CompositeVisual_slot! 
Anchor ^Anchor! 
Grid
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_Grid_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_Grid.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self  Column)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_Grid_slot := myNested.
		].
	^Brazil_ContainerClasses_Grid_slot! 
 Brazil_ContainerClasses_superInit_new 

super  new.

^ self.



! 
Frame ^Frame! 
Blank ^Blank! 
Viewport
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_Viewport_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_Viewport.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self  CompositeVisual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_Viewport_slot := myNested.
		].
	^Brazil_ContainerClasses_Viewport_slot! 
VerticalViewport
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_VerticalViewport_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_VerticalViewport.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self  VerticalVisualSequence)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_VerticalViewport_slot := myNested.
		].
	^Brazil_ContainerClasses_VerticalViewport_slot! 
ContainerVisual: ContainerVisual_val ContainerVisual := ContainerVisual_val! 
HorizontalVisualSequence: HorizontalVisualSequence_val HorizontalVisualSequence := HorizontalVisualSequence_val! 
ContainerVisual ^ContainerVisual! 
Column
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_Column_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_Column.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self  VerticalVisualSequence)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_Column_slot := myNested.
		].
	^Brazil_ContainerClasses_Column_slot! 
Frame: Frame_val Frame := Frame_val! 
Window
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_Window_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_Window.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self  Wrapper)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_Window_slot := myNested.
		].
	^Brazil_ContainerClasses_Window_slot! 
VerticalVisualSequence ^VerticalVisualSequence! 
Blank: Blank_val Blank := Blank_val! 
GridRowX
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_GridRowX_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_GridRowX.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self  Row)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_GridRowX_slot := myNested.
		].
	^Brazil_ContainerClasses_GridRowX_slot! 
Desktop
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_Desktop_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_Desktop.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_Desktop_slot := myNested.
		].
	^Brazil_ContainerClasses_Desktop_slot! 
Attribute ^Attribute! 
HorizontalViewport
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_ContainerClasses_HorizontalViewport_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_ContainerClasses 
			nestedMixins at: #Brazil_ContainerClasses_HorizontalViewport.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_ContainerClasses Mirror on: self  HorizontalVisualSequence)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_ContainerClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_ContainerClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_ContainerClasses_HorizontalViewport_slot := myNested.
		].
	^Brazil_ContainerClasses_HorizontalViewport_slot! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil metadata addNestedClass: Brazil_ContainerClasses. ! 
	Brazil_ContainerClasses metadata enclosingMixin: Brazil !
	Delta define: #Brazil_ContainerClasses_CompositeVisual as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' cachedNaturalHeightForWidth')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_CompositeVisual EnclosingObjects_Brazil_ContainerClasses_CompositeVisual')!
	(Delta mirrorFor: #Brazil_ContainerClasses_CompositeVisual) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_CompositeVisual) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_CompositeVisual) comment: #''!
	! (Delta mirrorFor: #Brazil_ContainerClasses_CompositeVisual) methodsFor: 'unclassified'!
	 add: newChild 

^ self restructuring:[ 

 self  privateAdd: newChild using:[ 

 self children add: newChild.

].

].



! 
 remove: child 

|  oldNaturalExtent |

 self restructuring:[ 

 self children remove: child.

 child unlinkFromParent.

( self  mayRemovingAffectNaturalExtent: child) ifTrue:[ 

 oldNaturalExtent := self naturalExtent.

 self updateGeometricProperties.

 self naturalExtent = oldNaturalExtent ifFalse:[ 

 self requestBoundsUpdate.

 self announceNaturalExtentChange.

].

].

].

^ self.



! 
 naturalHeightForWidth: width 

 self  cachedNaturalHeightForWidth = width ifFalse:[ 

 self  cachedNaturalHeightForWidth: width.

 self  cachedNaturalHeightForWidth:( self  computeNaturalHeightForWidth: width).

].

^ self  cachedNaturalHeightForWidth.



! 
 forceBoundsResponse: newBounds 

|  playground |

super  forceBoundsResponse: newBounds.

 playground := self innerBounds.

 self childrenDo:[ : each | 

 each forceBounds:( each area boundsWithin: playground).

].

 self announceLayoutChange.

^ self.



! 
 computeBoundsFor: child 

^ child area boundsWithin: self innerBounds.



! 
  updateLayoutByRequestFrom: child using: continuation 

|  playground |

 self requestBoundsUpdateUsing:[ : newBounds | 

|  extentChanged |

 newBounds = self bounds  ifTrue:[ 

 continuation value:( self  computeBoundsFor: child).

] ifFalse:[ 

 extentChanged := newBounds extent ~= self bounds extent.

 self boundsH value: newBounds.

 extentChanged ifTrue:[ 

 playground := self innerBounds.

 self childrenDo:[ : each | 

|  eachBounds |

 eachBounds := each area boundsWithin: playground.

 each == child  ifTrue:[ 

 continuation value: eachBounds.

] ifFalse:[ 

 each occupyBounds: eachBounds.

].

].

].

].

].

^ self.



! 
 Brazil_ContainerClasses_CompositeVisual_1_init 

 self cachedNaturalHeightForWidth:nil.

^ self.



! 
cachedNaturalHeightForWidth ^cachedNaturalHeightForWidth! 
 adviseBoundsFor: child 

 child occupyBounds:( self  computeBoundsFor: child).

^ self.



! 
  privateAdd: newChild using: childCollectionUpdateBlock 

|  oldNaturalExtent |

 childCollectionUpdateBlock value.

 newChild linkToParent: self.

 self isMapped ifTrue:[ 

( self  mayAddingAffectNaturalExtent: newChild)  ifTrue:[ 

 oldNaturalExtent := self naturalExtent.

 self updateGeometricProperties.

 self naturalExtent = oldNaturalExtent  ifTrue:[ 

 self  adviseBoundsFor: newChild.

] ifFalse:[ 

 self requestBoundsUpdateUsing:[ : newBounds | 

 newBounds = self bounds  ifTrue:[ 

 self  adviseBoundsFor: newChild.

] ifFalse:[ 

 self occupyBounds: newBounds.

].

].

].

 self announceNaturalExtentChange.

] ifFalse:[ 

 self  adviseBoundsFor: newChild.

].

 newChild mapSubtree.

].

^ self.



! 
 mayRemovingAffectNaturalExtent: child 

|  oldSuggestion |

 oldSuggestion := child area lastSuggestedExtentKnownToParent.

^ oldSuggestion x = self currentNaturalExtent x or:[ 

 oldSuggestion y = self currentNaturalExtent y.

].



! 
 new 

 self Brazil_ContainerClasses_CompositeVisual_superInit_new.

 self Brazil_ContainerClasses_CompositeVisual_1_init.

^ self.



! 
cachedNaturalHeightForWidth: cachedNaturalHeightForWidth_val cachedNaturalHeightForWidth := cachedNaturalHeightForWidth_val! 
  child: child requestsBoundsUpdateUsing: continuation 

|  oldNaturalExtent |

( self  mayAffectNaturalExtent: child)  ifTrue:[ 

 oldNaturalExtent := self naturalExtent.

 self updateGeometricProperties.

 self naturalExtent = oldNaturalExtent  ifTrue:[ 

 continuation value:( child area boundsWithin: self innerBounds).

] ifFalse:[ 

 self   updateLayoutByRequestFrom: child using: continuation.

 self announceNaturalExtentChange.

].

] ifFalse:[ 

 continuation value:( child area boundsWithin: self innerBounds).

].

 self announceLayoutChange.

^ self.



! 
 setupAreaIn: child 

 child setupAreaForCompositeVisual.

^ self.



! 
 computeNaturalExtent 

|  max |

 max :=0 @0.

 self childrenDo:[ : each | 

|  suggestion |

 suggestion := each area suggestedParentExtent.

 each area lastSuggestedExtentKnownToParent: suggestion.

 max := max max: suggestion.

].

^ max.



! 
 legalAreaClassesFor: child 

^ child legalAreaClassesInCompositeVisual.



! 
 occupyBoundsResponse: newBounds 

|  oldExtent  playground |

 oldExtent := self extent.

super  occupyBoundsResponse: newBounds.

 oldExtent = self extent  ifTrue:[ 

 self childrenDo:[ : each | 

 each reiterateBounds.

].

] ifFalse:[ 

 playground := self innerBounds.

 self childrenDo:[ : each | 

 each occupyBounds:( each area boundsWithin: playground).

].

 self announceLayoutChange.

].

^ self.



! 
 addAtBack: newChild 

^ self restructuring:[ 

 self  privateAdd: newChild using:[ 

 self children addFirst: newChild.

].

].



! 
  add: newChild inFrontOf: existingChild 

^ self restructuring:[ 

 self  privateAdd: newChild using:[ 

 self children  add: newChild after: existingChild.

].

].



! 
 createAgentUsing: aMapping 

 aMapping createAgentForCompositeVisual: self.

^ self.



! 
 computeNaturalHeightForWidth: width 

|  maxHeight |

 maxHeight :=0.

 self childrenDo:[ : each | 

 maxHeight := maxHeight max:( each area suggestedParentHeightForWidth: width).

].

^ maxHeight.



! 
 flushLayoutCaches 

super  flushLayoutCaches.

 self childrenDo:[ : each | 

 each area resetLastSuggestedExtentKnownToParent.

].

 self updateGeometricProperties.

^ self.



! 
 mayAddingAffectNaturalExtent: child 

|  suggestion  myNaturalExtent |

 suggestion := child area suggestedParentExtent.

 child area lastSuggestedExtentKnownToParent: suggestion.

 myNaturalExtent := self naturalExtent.

^ suggestion x > myNaturalExtent x or:[ 

 suggestion y > myNaturalExtent y.

].



! 
 mayAffectNaturalExtent: child 

|  oldSuggestion  newSuggestion |

 oldSuggestion := child area lastSuggestedExtentKnownToParent.

 newSuggestion := child area suggestedParentExtent.

 newSuggestion = oldSuggestion ifTrue:[ 

^false.

].

 child area lastSuggestedExtentKnownToParent: newSuggestion.

^ oldSuggestion x = self currentNaturalExtent x or:[ 

 oldSuggestion y = self currentNaturalExtent y or:[ 

 newSuggestion x > self currentNaturalExtent x or:[ 

 newSuggestion y > self currentNaturalExtent y.

].

].

].



! 
 Brazil_ContainerClasses_CompositeVisual_superInit_new 

super  new.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_CompositeVisual) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_CompositeVisual := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_CompositeVisual := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_CompositeVisual. ! 
	Brazil_ContainerClasses_CompositeVisual metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_ContainerClasses_Wrapper as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' cachedNaturalHeightWidth cachedNaturalHeightForWidth contentS')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_Wrapper EnclosingObjects_Brazil_ContainerClasses_Wrapper')!
	(Delta mirrorFor: #Brazil_ContainerClasses_Wrapper) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Wrapper) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Wrapper) comment: #''!
	! (Delta mirrorFor: #Brazil_ContainerClasses_Wrapper) methodsFor: 'unclassified'!
	 beTopCenter 

 self  content area beTopCenter.

^ self.



! 
 beLeftCenter 

 self  content area beLeftCenter.

^ self.



! 
 forceBoundsResponse: newBounds 

super  forceBoundsResponse: newBounds.

 self  content forceBounds:( self  content area boundsWithin: self localBounds).

^ self.



! 
cachedNaturalHeightWidth: cachedNaturalHeightWidth_val cachedNaturalHeightWidth := cachedNaturalHeightWidth_val! 
 Brazil_ContainerClasses_Wrapper_1_init 

 self contentS:nil.

 self cachedNaturalHeightWidth:nil.

 self cachedNaturalHeightForWidth:nil.

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForWrapper: self.

^ self.



! 
 new 

 self Brazil_ContainerClasses_Wrapper_superInit_new.

 self Brazil_ContainerClasses_Wrapper_1_init.

 self  content: (EnclosingObjects_Brazil_ContainerClasses_Wrapper at: 1)  Blank new.

^ self.



! 
 beRightCenter 

 self  content area beRightCenter.

^ self.



! 
  child: child requestsBoundsUpdateUsing: continuation 

( self isSqueezing and:[ 

 child area isVisualSquishy.

])  ifTrue:[ 

 self   updateSquishyChildLayout: child using: continuation.

] ifFalse:[ 

 self   updateSolidChildLayout: child using: continuation.

].

^ self.



! 
 beCentered 

 self  content area beCentered.

^ self.



! 
contentS: contentS_val contentS := contentS_val! 
contentS ^contentS! 
 beBottomRight 

 self  content area beBottomRight.

^ self.



! 
 flushLayoutCaches 

 self  cachedNaturalHeightWidth:nil.

super  flushLayoutCaches.

 self  updateGeometricProperties.

^ self.



! 
 isSquishy 

^ self  content area isVisualSquishy.



! 
 beBottomLeft 

 self  content area beBottomLeft.

^ self.



! 
 childrenDo: aBlock 

 self  content ifNotNil:[ 

 aBlock value: self  content.

].

^ self.



! 
 naturalHeightForWidth: size 

 self  cachedNaturalHeightWidth ~= size ifTrue:[ 

 self  cachedNaturalHeightWidth: size.

 self  cachedNaturalHeightForWidth:( self  content area suggestedParentHeightForWidth: size).

].

^ self  cachedNaturalHeightForWidth.



! 
cachedNaturalHeightForWidth: cachedNaturalHeightForWidth_val cachedNaturalHeightForWidth := cachedNaturalHeightForWidth_val! 
 Brazil_ContainerClasses_Wrapper_superInit_new 

super  new.

^ self.



! 
 content: newContent 

|  oldNaturalExtent |

 oldNaturalExtent := self naturalExtent.

 self restructuring:[ 

 self  contentS ifNotNil:[ 

 self  content unlinkFromParent.

].

 self  contentS: newContent.

 newContent linkToParent: self.

 self isMapped ifTrue:[ 

 newContent mapSubtree.

 self  flushLayoutCaches.

( self naturalExtent ~= oldNaturalExtent or:[ 

 self isSqueezing and:[ 

 self  content area isVisualSquishy.

].

])  ifTrue:[ 

 self requestBoundsUpdateUsing:[ : newBounds | 

 self forceBounds: newBounds.

].

] ifFalse:[ 

 self  content forceBounds:( self  content area boundsWithin: self localBounds).

].

 self currentNaturalExtent = oldNaturalExtent ifFalse:[ 

 self announceNaturalExtentChange.

].

].

].

^ self.



! 
cachedNaturalHeightWidth ^cachedNaturalHeightWidth! 
 isEmpty 

^ self  content isBlank.



! 
 updateGeometricProperties 

 self  cachedNaturalHeightWidth:nil.

super  updateGeometricProperties.

^ self.



! 
 innerBounds 

^0 @0 extent: self extent.



! 
 beBottomCenter 

 self  content area beBottomCenter.

^ self.



! 
 beTopLeft 

 self  content area beTopLeft.

^ self.



! 
  updateSquishyChildLayout: child using: continuation 

|  oldNaturalExtent  myExtent  newCompositionHeight |

 self  cachedNaturalHeightWidth:nil.

 oldNaturalExtent := self naturalExtent.

 self  updateGeometricProperties.

 self requestBoundsUpdateUsing:[ : newBounds | 

 newBounds = self bounds ifFalse:[ 

 self setBounds: newBounds.

].

 continuation value:( child area boundsWithin: self localBounds).

 self naturalExtent ~= oldNaturalExtent ifTrue:[ 

 self announceNaturalExtentChange.

].

].

^ self.



! 
 beTopRight 

 self  content area beTopRight.

^ self.



! 
 setupAreaIn: child 

 child setupAreaForWrapper.

^ self.



! 
 computeNaturalExtent 

^ self  content area suggestedParentExtent.



! 
 legalAreaClassesFor: child 

^ child legalAreaClassesInWrapper.



! 
 occupyBoundsResponse: newBounds 

|  oldBounds |

 oldBounds := self bounds.

super  occupyBoundsResponse: newBounds.

 oldBounds = newBounds  ifTrue:[ 

 self  content reiterateBounds.

] ifFalse:[ 

 self  adviseBoundsFor: self  content.

].

^ self.



! 
cachedNaturalHeightForWidth ^cachedNaturalHeightForWidth! 
 adviseBoundsFor: child 

 child occupyBounds:( child area boundsWithin: self localBounds).

^ self.



! 
  updateSolidChildLayout: child using: continuation 

|  oldNaturalExtent |

 self  cachedNaturalHeightWidth:nil.

 oldNaturalExtent := self naturalExtent.

 self  updateGeometricProperties.

 self naturalExtent = oldNaturalExtent  ifTrue:[ 

 continuation value:( child area boundsWithin: self localBounds).

] ifFalse:[ 

 self requestBoundsUpdateUsing:[ : newBounds | 

 self setBounds: newBounds.

 continuation value:( child area boundsWithin: self localBounds).

].

 self announceNaturalExtentChange.

].

^ self.



! 
  installInformationRetriever: spy on: child 

 child == self  content ifFalse:[ 

 (EnclosingObjects_Brazil_ContainerClasses_Wrapper at: 2)  error:'invalid child to spy on'.

].

 self  contentS: spy downwardInterceptor.

^ self.



! 
 content 

^ self  contentS.



! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_Wrapper) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_Wrapper := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_Wrapper := mmd !
	  with: aVisual in: areaClass 

 aVisual areaClass: areaClass.

^ self with: aVisual.



! 
		 with: aVisual 

^ self new content: aVisual; 

 yourself.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_Wrapper. ! 
	Brazil_ContainerClasses_Wrapper metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_ContainerClasses_VerticalViewport as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' scrollPositionH')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_VerticalViewport EnclosingObjects_Brazil_ContainerClasses_VerticalViewport')!
	(Delta mirrorFor: #Brazil_ContainerClasses_VerticalViewport) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_VerticalViewport) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_VerticalViewport) comment: 'A vertical viewport is similar to a column in that it stacks its elements vertically, sizing each to its own width. However, it provides a scrollbar to access the elements not currently visible. It also ignores elasticity of elements.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ContainerClasses_VerticalViewport) methodsFor: 'unclassified'!
	 globalOriginForChildren 

^ self globalOrigin translateBy: self  scrollPosition negated.



! 
 computeNaturalHeightForWidth: width 

^super  computeNaturalHeightForWidth:( width -  self  scrollbarWidth).



! 
 forceBoundsResponse: newBounds 

super  forceBoundsResponse: newBounds.

 self isMapped ifTrue:[ 

 self agent matchScrollbarRange.

].

^ self.



! 
 scrollbarWidth 

^ self agent ==nil  ifTrue:[ 

0.

] ifFalse:[ 

 self agent scrollbarWidth.

].



! 
scrollPositionH: scrollPositionH_val scrollPositionH := scrollPositionH_val! 
 innerExtent 

^ self extent - ( self  scrollbarWidth @0).



! 
 virtualExtent 

|  width |

 width := self  innerExtent x.

^ width @( self naturalHeightForWidth: width).



! 
 Brazil_ContainerClasses_VerticalViewport_1_init 

 self scrollPositionH:( (EnclosingObjects_Brazil_ContainerClasses_VerticalViewport at: 1)  MappableHolder with:(0 @0)).

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForVerticalViewport: self.

^ self.



! 
 innerBounds 

^0 @0 extent:( self bounds extent - ( self  scrollbarWidth @0)).



! 
  privateAdd: child using: modificationBlock 

|  result |

 result :=super   privateAdd: child using: modificationBlock.

 self isMapped ifTrue:[ 

 self agent matchScrollbarRange.

].

^ result.



! 
 hasElasticChildren 

^false.



! 
 new 

 self Brazil_ContainerClasses_VerticalViewport_superInit_new.

 self Brazil_ContainerClasses_VerticalViewport_1_init.

^ self.



! 
 scrollPosition 

^ self  scrollPositionH value.



! 
  child: child requestsBoundsUpdateUsing: continuation 

super   child: child requestsBoundsUpdateUsing: continuation.

 self isMapped ifTrue:[ 

 self agent matchScrollbarRange.

].

^ self.



! 
 setupAreaIn: child 

 child setupAreaForVerticalViewport.

^ self.



! 
 Brazil_ContainerClasses_VerticalViewport_superInit_new 

super  new.

^ self.



! 
 occupyBoundsResponse: newBounds 

super  occupyBoundsResponse: newBounds.

 self isMapped ifTrue:[ 

 self agent matchScrollbarRange.

].

^ self.



! 
 scrollPosition: aPoint 

 self  scrollPositionH value: aPoint.

^ self.



! 
 allowsVerticalScrolling 

^true.



! 
 allowsHorizontalScrolling 

^false.



! 
scrollPositionH ^scrollPositionH! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_VerticalViewport) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_VerticalViewport := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_VerticalViewport := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_VerticalViewport. ! 
	Brazil_ContainerClasses_VerticalViewport metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_ContainerClasses_SpyingWrapper as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_SpyingWrapper EnclosingObjects_Brazil_ContainerClasses_SpyingWrapper')!
	(Delta mirrorFor: #Brazil_ContainerClasses_SpyingWrapper) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_SpyingWrapper) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_SpyingWrapper) comment: #''!
	! (Delta mirrorFor: #Brazil_ContainerClasses_SpyingWrapper) methodsFor: 'unclassified'!
	 Brazil_ContainerClasses_SpyingWrapper_superInit_new 

super  new.

^ self.



! 
 Brazil_ContainerClasses_SpyingWrapper_1_init 

^ self.



! 
  child: theChild requestsBoundsUpdateUsing: action 

 (EnclosingObjects_Brazil_ContainerClasses_SpyingWrapper at: 2)  Transcript cr; 

 show:'childRequestsBoundsUpdate (entered)'.

^super   child: theChild requestsBoundsUpdateUsing:[ : newBounds | 

 (EnclosingObjects_Brazil_ContainerClasses_SpyingWrapper at: 2)  Transcript cr; 

 show:'childRequestsBoundsBoundsUpdate -> '; 

 show: newBounds printString.

 action value: newBounds.

].



! 
 new 

 self Brazil_ContainerClasses_SpyingWrapper_superInit_new.

 self Brazil_ContainerClasses_SpyingWrapper_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_SpyingWrapper) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_SpyingWrapper := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_SpyingWrapper := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_SpyingWrapper. ! 
	Brazil_ContainerClasses_SpyingWrapper metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_ContainerClasses_Grid as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' columnGapA')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_Grid EnclosingObjects_Brazil_ContainerClasses_Grid')!
	(Delta mirrorFor: #Brazil_ContainerClasses_Grid) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Grid) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Grid) comment: 'A grid is a matrix of cells, each containing a visual. It can logically be viewed as a column of rows (or a row of columns), with the added constraint that the width of each row element needs to be equalized with the width of same-index elements of other rows. Thus, this implementation is a special kind of Column containing a special kind of Row (GridRowX).

A grid is initialized to be a certain size. Initially, each cell is a Wrapper with a Blank. The actual content can be added or replaced using the #at:put: message, with the first argument being a Point.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ContainerClasses_Grid) methodsFor: 'unclassified'!
	  extentAt: cell is: extent 

( self  at: cell) area forcedExtent: extent.

 self  refreshLayout.

^ self.



! 
 computeColumnWidthAt: index 

^ self children  inject:0 into:[ : max : each | 

 max max:( each columnWidthAt: index).

].



! 
 refreshLayout 

 self blockIncrementalLayoutUpdatesWhile:[ 

 self flushLayoutCaches.

 self  recomputeColumnWidths.

 self requestBoundsUpdateUsing:[ : newBounds | 

 self forceBounds: newBounds.

].

].

^ self.



! 
 finishedMapping 

super  finishedMapping.

 self  refreshLayout.

^ self.



! 
 recomputeColumnWidths 

|  maxCellWidthInColumn |

 self childrenDo:[ : each | 

 each flushPrecomputedColumnWidths.

].

1  to: self  columnCount do:[ : index | 

 maxCellWidthInColumn :=0.

 self childrenDo:[ : each | 

 maxCellWidthInColumn := maxCellWidthInColumn max:( each columnWidthAt: index).

].

 self childrenDo:[ : each | 

 each  setColumnAt: index widthTo: maxCellWidthInColumn.

].

].

^ self.



! 
 columnGap 

^ self  columnGapA value.



! 
  updateLayoutForCell: cell inRow: row using: continuation 

|  index  maxCellWidthInColumn |

 index := row indexOf: cell.

 maxCellWidthInColumn :=0.

 self childrenDo:[ : each | 

 maxCellWidthInColumn := maxCellWidthInColumn max:( each columnWidthAt: index).

].

 self blockIncrementalLayoutUpdatesSilentlyWhile:[ 

 self childrenDo:[ : each | 

 each  setColumnAt: index widthTo: maxCellWidthInColumn.

].

].

 self  repositionAllChildrenByRequestFrom: row using: continuation.

^ self.



! 
  rows: rows columns: columns 

|  row |

 rows timesRepeat:[ 

 row := (EnclosingObjects_Brazil_ContainerClasses_Grid at: 1)  GridRowX columns: columns.

 row gap: self  columnGap.

 self add: row.

].

^ self.



! 
 at: coordinate 

^( self children at: coordinate y) at: coordinate x.



! 
  row: row requestsBoundsUpdateCausedBy: cell using: continuation 

|  newNaturalExtent |

 newNaturalExtent := cell area naturalExtent.

 newNaturalExtent y = cell area currentLayoutBasis  ifTrue:[ 

 continuation value: row bounds.

] ifFalse:[ 

 cell area currentLayoutBasis: newNaturalExtent y.

 self updateGeometricProperties.

 self   updateLayoutForCell: cell inRow: row using: continuation.

].

^ self.



! 
 columnGap: newGap 

 self  columnGapA value: newGap.

 self childrenDo:[ : each | 

 each gap: newGap.

].

^ self.



! 
 new 

 self Brazil_ContainerClasses_Grid_superInit_new.

 self Brazil_ContainerClasses_Grid_1_init.

^ self.



! 
 addColumn 

 self blockIncrementalLayoutUpdatesWhile:[ 

 self childrenDo:[ : each | 

 each addColumn.

].

].

^ self.



! 
 computeNaturalExtent 

|  sumX  sumY  gapSum |

 sumX :=0.

1  to: self  columnCount do:[ : index | 

 sumX := sumX +( self  computeColumnWidthAt: index).

].

 sumY :=0.

 self childrenDo:[ : each | 

 sumY := sumY + each area naturalExtent y.

].

 gapSum :=( self children size - 1 max:0) * self gap.

^ sumX @( sumY + gapSum).



! 
 rowCount 

^ self children size.



! 
 addRow 

 self add:( (EnclosingObjects_Brazil_ContainerClasses_Grid at: 1)  GridRowX columns: self  columnCount).

^ self.



! 
columnGapA: columnGapA_val columnGapA := columnGapA_val! 
 Brazil_ContainerClasses_Grid_superInit_new 

super  new.

^ self.



! 
 Brazil_ContainerClasses_Grid_1_init 

 self columnGapA:( (EnclosingObjects_Brazil_ContainerClasses_Grid at: 1)  Attribute  name:#'columnGap' value:0).

^ self.



! 
  at: coordinate put: visual 

( self children at: coordinate y)  at: coordinate x put: visual.

^ self.



! 
columnGapA ^columnGapA! 
 columnCount 

^ self children isEmpty  ifTrue:[ 

0.

] ifFalse:[ 

 self children first columnCount.

].



! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_Grid) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_Grid := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_Grid := mmd !
	  rows: rowCount columns: columnCount 

^ self  new  rows: rowCount columns: columnCount.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_Grid. ! 
	Brazil_ContainerClasses_Grid metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_ContainerClasses_Column as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_Column EnclosingObjects_Brazil_ContainerClasses_Column')!
	(Delta mirrorFor: #Brazil_ContainerClasses_Column) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Column) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Column) comment: #''!
	! (Delta mirrorFor: #Brazil_ContainerClasses_Column) methodsFor: 'unclassified'!
	 Brazil_ContainerClasses_Column_1_init 

^ self.



! 
 setupAreaIn: child 

 child setupAreaForColumn.

^ self.



! 
 Brazil_ContainerClasses_Column_superInit_new 

super  new.

^ self.



! 
 new 

 self Brazil_ContainerClasses_Column_superInit_new.

 self Brazil_ContainerClasses_Column_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_Column) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_Column := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_Column := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_Column. ! 
	Brazil_ContainerClasses_Column metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_ContainerClasses_Row as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_Row EnclosingObjects_Brazil_ContainerClasses_Row')!
	(Delta mirrorFor: #Brazil_ContainerClasses_Row) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Row) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Row) comment: #''!
	! (Delta mirrorFor: #Brazil_ContainerClasses_Row) methodsFor: 'unclassified'!
	 Brazil_ContainerClasses_Row_superInit_new 

super  new.

^ self.



! 
 Brazil_ContainerClasses_Row_1_init 

^ self.



! 
 setupAreaIn: child 

 child setupAreaForRow.

^ self.



! 
 new 

 self Brazil_ContainerClasses_Row_superInit_new.

 self Brazil_ContainerClasses_Row_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_Row) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_Row := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_Row := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_Row. ! 
	Brazil_ContainerClasses_Row metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_ContainerClasses_Viewport as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' scrollPositionH')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_Viewport EnclosingObjects_Brazil_ContainerClasses_Viewport')!
	(Delta mirrorFor: #Brazil_ContainerClasses_Viewport) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Viewport) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Viewport) comment: 'Viewport adds to CompositeVisual the ability to have scroll bars to scroll itself when its content is larger than the available area. It also keeps track of the current scroll position as the coordinates of the top left corner of the visible area.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ContainerClasses_Viewport) methodsFor: 'unclassified'!
	 globalOriginForChildren 

^ self globalOrigin translateBy: self  scrollPosition negated.



! 
 Brazil_ContainerClasses_Viewport_superInit_new 

super  new.

^ self.



! 
 forceBoundsResponse: newBounds 

super  forceBoundsResponse: newBounds.

 self isMapped ifTrue:[ 

 self agent matchScrollbarRange.

].

^ self.



! 
 allowsHorizontalScrolling 

^true.



! 
 Brazil_ContainerClasses_Viewport_1_init 

 self scrollPositionH:( (EnclosingObjects_Brazil_ContainerClasses_Viewport at: 1)  MappableHolder with:(0 @0)).

^ self.



! 
 scrollbarHeight 

^ self agent ==nil  ifTrue:[ 

0.

] ifFalse:[ 

 self agent scrollbarHeight.

].



! 
 innerExtent 

^ self extent - ( self  scrollbarWidth @ self  scrollbarHeight).



! 
 virtualExtent 

^ self naturalExtent.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForViewport: self.

^ self.



! 
 innerBounds 

^0 @0 extent:( self bounds extent - ( self  scrollbarWidth @ self  scrollbarHeight)).



! 
 new 

 self Brazil_ContainerClasses_Viewport_superInit_new.

 self Brazil_ContainerClasses_Viewport_1_init.

^ self.



! 
 scrollPosition 

^ self  scrollPositionH value.



! 
  child: child requestsBoundsUpdateUsing: continuation 

super   child: child requestsBoundsUpdateUsing: continuation.

 self isMapped ifTrue:[ 

 self agent matchScrollbarRange.

].

^ self.



! 
 visibleArea 

^ self  scrollPosition extent: self  innerExtent.



! 
scrollPositionH: scrollPositionH_val scrollPositionH := scrollPositionH_val! 
  scrollToPosition: innerLocation at: ratioPoint 

 self scrollPosition:( innerLocation - ( ratioPoint * self  innerExtent)).

^ self.



! 
 occupyBoundsResponse: newBounds 

super  occupyBoundsResponse: newBounds.

 self isMapped ifTrue:[ 

 self agent matchScrollbarRange.

].

^ self.



! 
 scrollPosition: newOrigin 

 self  scrollPositionH value: newOrigin.

^ self.



! 
 allowsVerticalScrolling 

^true.



! 
 scrollbarWidth 

^ self agent ==nil  ifTrue:[ 

0.

] ifFalse:[ 

 self agent scrollbarWidth.

].



! 
scrollPositionH ^scrollPositionH! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_Viewport) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_Viewport := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_Viewport := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_Viewport. ! 
	Brazil_ContainerClasses_Viewport metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_ContainerClasses_HorizontalViewport as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' scrollPositionH')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_HorizontalViewport EnclosingObjects_Brazil_ContainerClasses_HorizontalViewport')!
	(Delta mirrorFor: #Brazil_ContainerClasses_HorizontalViewport) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_HorizontalViewport) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_HorizontalViewport) comment: 'Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ContainerClasses_HorizontalViewport) methodsFor: 'unclassified'!
	 globalOriginForChildren 

^ self globalOrigin translateBy: self  scrollPosition negated.



! 
 Brazil_ContainerClasses_HorizontalViewport_superInit_new 

super  new.

^ self.



! 
 forceBoundsResponse: newBounds 

super  forceBoundsResponse: newBounds.

 self isMapped ifTrue:[ 

 self agent matchScrollbarRange.

].

^ self.



! 
scrollPositionH: scrollPositionH_val scrollPositionH := scrollPositionH_val! 
 scrollbarHeight 

^ self agent ==nil  ifTrue:[ 

0.

] ifFalse:[ 

 self agent scrollbarHeight.

].



! 
 innerExtent 

^ self extent - (0 @ self  scrollbarHeight).



! 
 scrollPosition: newOrigin 

 self  scrollPositionH value: newOrigin.

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForViewport: self.

^ self.



! 
 innerBounds 

^0 @0 extent:( self bounds extent - (0 @ self  scrollbarHeight)).



! 
 hasElasticChildren 

^false.



! 
 new 

 self Brazil_ContainerClasses_HorizontalViewport_superInit_new.

 self Brazil_ContainerClasses_HorizontalViewport_1_init.

^ self.



! 
 scrollPosition 

^ self  scrollPositionH value.



! 
  child: child requestsBoundsUpdateUsing: continuation 

super   child: child requestsBoundsUpdateUsing: continuation.

 self isMapped ifTrue:[ 

 self agent matchScrollbarRange.

].

^ self.



! 
 setupAreaIn: child 

 child setupAreaForHorizontalViewport.

^ self.



! 
 occupyBoundsResponse: newBounds 

super  occupyBoundsResponse: newBounds.

 self isMapped ifTrue:[ 

 self agent matchScrollbarRange.

].

^ self.



! 
 virtualExtent 

^ self naturalExtent x @ self  innerExtent y.



! 
 allowsVerticalScrolling 

^false.



! 
 allowsHorizontalScrolling 

^true.



! 
scrollPositionH ^scrollPositionH! 
 Brazil_ContainerClasses_HorizontalViewport_1_init 

 self scrollPositionH:( (EnclosingObjects_Brazil_ContainerClasses_HorizontalViewport at: 1)  MappableHolder with:(0 @0)).

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_HorizontalViewport) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_HorizontalViewport := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_HorizontalViewport := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_HorizontalViewport. ! 
	Brazil_ContainerClasses_HorizontalViewport metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_ContainerClasses_Desktop as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' windows updateLockLevel agent windowClosePermission')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_Desktop EnclosingObjects_Brazil_ContainerClasses_Desktop')!
	(Delta mirrorFor: #Brazil_ContainerClasses_Desktop) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Desktop) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Desktop) comment: 'Desktop is the root of the tree of visuals. It is the parent of any open window.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ContainerClasses_Desktop) methodsFor: 'unclassified'!
	 modifierKeyStateForCurrentEvent 

^ self  agent  ifNotNil:[ : it | 

 it modifierKeyStateForCurrentEvent.

] ifNil:[ 

 (EnclosingObjects_Brazil_ContainerClasses_Desktop at: 1)  ModifierKeyState new.

].



! 
 centeredRectangleOfExtent: rectExtent 

^ self  extent -  rectExtent //2 extent: rectExtent.



! 
 updateDraggedImagePosition 

 self  agent updateDraggedImagePosition.

^ self.



! 
agent: agent_val agent := agent_val! 
 mousePoint 

^ self  agent mousePoint.



! 
 discardMappings 

 self  agent:nil.

 self  windows copy do:[ : each | 

 each discardMappings.

].

^ self.



! 
 windowAtPoint: point 

^ self  agent windowAtPoint: point.



! 
windowClosePermission: windowClosePermission_val windowClosePermission := windowClosePermission_val! 
 positionWindowsWithinVisibleScreenArea 

#'BOGUS' yourself.

 (EnclosingObjects_Brazil_ContainerClasses_Desktop at: 2)  WorldState addDeferredUIMessage:[ 

 (EnclosingObjects_Brazil_ContainerClasses_Desktop at: 2)  World fullRepaintNeeded.

].

^ self.



! 
 mayAccommodateNaturalWidthChangeOf: child 

^true.



! 
 withMapping: aMapping 

 self Brazil_ContainerClasses_Desktop_superInit_withMapping: aMapping.

 self Brazil_ContainerClasses_Desktop_1_init: aMapping.

 self  mapUsing: aMapping.

^ self.



! 
 createAgentUsing: aMapping 

 self  unmap.

 self  agent:( aMapping createAgentForDesktop: self).

 self  windows do:[ : each | 

 each mapSubtreeUsing: aMapping.

].

^ self.



! 
 setDraggedImage: image 

 self  agent setDraggedImage: image.

^ self.



! 
 scheduleUIInstallment: aBlock 

 self  agent scheduleUIInstallment: aBlock.

^ self.



! 
  child: child requestsBoundsUpdateUsing: aBlock 

 self  adviseBoundsFor: child using: aBlock.

^ self.



! 
 mapping 

^ self  agent mapping.



! 
 isMorphic 

^ self  agent isMorphic.



! 
 mayAccommodateNaturalHeightChangeOf: child 

^true.



! 
updateLockLevel ^updateLockLevel! 
 printHierarchyLayoutReportOn: aStream 

 aStream nextPutAll:'-- desktop --'.

^ self.



! 
  adviseBoundsFor: window using: aBlock 

 aBlock value:( window area boundsWithin: self bounds).

^ self.



! 
windows ^windows! 
 globalOrigin 

^0 @0.



! 
updateLockLevel: updateLockLevel_val updateLockLevel := updateLockLevel_val! 
 ensureUpToDateAppearance 

 self  agent ensureUpToDateAppearance.

^ self.



! 
 add: aWindow 

 self  windows add: aWindow.

 aWindow linkToParent: self.

 self  isMapped ifTrue:[ 

 self  adviseBoundsFor: aWindow.

 aWindow mapSubtree.

].

^ self.



! 
 extent 

^ self  bounds extent.



! 
 bounds 

^ self  agent desktopBounds.



! 
 isMapped 

^ self  agent notNil.



! 
 isDescendantOf: anything 

^false.



! 
 windowHasPermissionToClose: window 

^ self  windowClosePermission isNil or:[ 

 self  windowClosePermission reentrant fixTemps value: window.

].



! 
 effectivelyVisible 

^true.



! 
 usableBounds 

^ self  agent usableDesktopBounds.



! 
 remove: aWindow 

 self  windows remove: aWindow.

 aWindow unlinkFromParent.

^ self.



! 
 isWindows 

^ self  agent isWindows.



! 
 scheduleUIAction: aBlock 

 self  agent scheduleUIAction: aBlock.

^ self.



! 
 createWindow 

|  window |

 window := (EnclosingObjects_Brazil_ContainerClasses_Desktop at: 1)  Window new.

 self  add: window.

^ window.



! 
 unmap 

 self  agent ifNotNil:[ 

 self  windows do:[ : each | 

 each unmapSubtree.

].

 self  agent:nil.

].

^ self.



! 
 setupAreaIn: child 

 child setupAreaForDesktop.

^ self.



! 
 isSqueezing 

^false.



! 
windowClosePermission ^windowClosePermission! 
 Brazil_ContainerClasses_Desktop_superInit_withMapping: aMapping 

super  new.

^ self.



! 
 legalAreaClassesFor: child 

^( self Array new:2)  at:1 put: (EnclosingObjects_Brazil_ContainerClasses_Desktop at: 1)  Anchor; 

  at:2 put: (EnclosingObjects_Brazil_ContainerClasses_Desktop at: 1)  Frame; 

 yourself.



! 
 adviseBoundsFor: window 

 window occupyBounds:( window area boundsWithin: self bounds).

^ self.



! 
 Brazil_ContainerClasses_Desktop_1_init: aMapping 

 self agent:nil.

 self windows: (EnclosingObjects_Brazil_ContainerClasses_Desktop at: 2)  OrderedCollection new.

 self updateLockLevel:0.

 self windowClosePermission:nil.

^ self.



! 
 clearDraggedImage 

 self  agent clearDraggedImage.

^ self.



! 
 disableUserInputDuring: action 

^ self  agent disableUserInputDuring: action.



! 
windows: windows_val windows := windows_val! 
 desktop 

^ self.



! 
 mapUsing: aMapping 

 self  unmap.

 self  agent:( aMapping createAgentForDesktop: self).

 self  windows do:[ : each | 

 each mapSubtree.

].

^ self.



! 
  add: aWindow in: areaClass 

 aWindow areaClass: areaClass.

 self add: aWindow.

^ self.



! 
agent ^agent! 
 systemIsIdle 

^( self  agent ifNil:[ 

^true.

]) systemIsIdle.



! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_Desktop) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_Desktop := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_Desktop := mmd !
	 withMapping: aMapping 

^ self basicNew withMapping: aMapping.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_Desktop. ! 
	Brazil_ContainerClasses_Desktop metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_ContainerClasses_Flow as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' precomputedChildrenBounds cachedHeightGivenWidth horizontalGapA verticalGapA')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_Flow EnclosingObjects_Brazil_ContainerClasses_Flow')!
	(Delta mirrorFor: #Brazil_ContainerClasses_Flow) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Flow) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Flow) comment: 'Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ContainerClasses_Flow) methodsFor: 'unclassified'!
	 verticalGap 

^ self  verticalGapA value.



! 
 computeNaturalHeightForWidth: width 

|  stream  height |

 stream := self children readStream.

 height := stream atEnd  ifTrue:[ 

0.

] ifFalse:[ 

 self  verticalGap negated.

].

[ 

 stream atEnd.

] whileFalse:[ 

 height := height + self  verticalGap +( self   readAndMeasureOneLineFrom: stream within: width).

].

^ height.



! 
cachedHeightGivenWidth ^cachedHeightGivenWidth! 
 horizontalGap 

^ self  horizontalGapA value.



! 
 horizontalGap: newValue 

 self  horizontalGapA value: newValue.

^ self.



! 
 forceBoundsResponse: newBounds 

 self boundsH value: newBounds.

 self  recomputeLayout.

 self childrenDo:[ : each | 

 each forceBounds:( self  precomputedBoundsFor: each).

].

^ self.



! 
 addAtBack: newChild 

 self restructuring:[ 

 self children addFirst: newChild.

 newChild linkToParent: self.

 self isMapped ifTrue:[ 

 self updateGeometricProperties.

 self requestBoundsUpdate.

 newChild mapSubtree.

].

 self announceNaturalExtentChange.

].

^ newChild.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForVisualSequence: self.

 self  cachedHeightGivenWidth:nil.

^ self.



! 
 new 

 self Brazil_ContainerClasses_Flow_superInit_new.

 self Brazil_ContainerClasses_Flow_1_init.

 self affectsNaturalExtent: self  horizontalGapA.

 self affectsNaturalExtent: self  verticalGapA.

^ self.



! 
  child: child requestsBoundsUpdateUsing: continuation 

 child area suggestedParentExtent = child area lastSuggestedExtentKnownToParent  ifTrue:[ 

 continuation value:( self  precomputedBoundsFor: child).

] ifFalse:[ 

 self  cachedHeightGivenWidth:nil.

 self requestBoundsUpdateUsing:[ : newBounds | 

 self boundsH value: newBounds.

 self  recomputeLayout.

 self childrenDo:[ : each | 

 each == child  ifTrue:[ 

 continuation value:( self  precomputedBoundsFor: each).

] ifFalse:[ 

 each occupyBounds:( self  precomputedBoundsFor: each).

].

].

].

].

^ self.



! 
verticalGapA: verticalGapA_val verticalGapA := verticalGapA_val! 
 flushLayoutCaches 

 self  cachedHeightGivenWidth:nil.

 self  precomputedChildrenBounds: (EnclosingObjects_Brazil_ContainerClasses_Flow at: 2)  IdentityDictionary new.

super  flushLayoutCaches.

^ self.



! 
 addFirst: newChild 

^ self  addAtBack: newChild.



! 
 recomputeLayout 

|  width  stream  top  box |

 width := self extent x.

 stream := self children readStream.

 top :=0.

[ 

 stream atEnd.

] whileFalse:[ 

 self   composeOneLineFrom: stream within: width using:[ : visuals : maxHeight | 

|  left |

 left :=0.

 visuals do:[ : each | 

|  suggestion |

 suggestion := each area suggestedParentExtent.

 each area lastSuggestedExtentKnownToParent: suggestion.

 box := left @ top extent:( suggestion x @ maxHeight).

 self   precomputedBoundsFor: each are: box.

 left := box right + self  horizontalGap.

].

].

 top := box bottom + self  verticalGap.

].

^ self.



! 
verticalGapA ^verticalGapA! 
 add: newChild 

 self restructuring:[ 

 self children add: newChild.

 newChild linkToParent: self.

 self isMapped ifTrue:[ 

 self updateGeometricProperties.

 self requestBoundsUpdate.

 newChild mapSubtree.

].

 self announceNaturalExtentChange.

].

^ newChild.



! 
 precomputedBoundsFor: child 

^ self  precomputedChildrenBounds at: child.



! 
 reorder: visuals 

( visuals select:[ : any | 

( self children includes: any) not.

]) isEmpty not ifTrue:[ 

 (EnclosingObjects_Brazil_ContainerClasses_Flow at: 2)  error:'bad argument'.

].

 self children: visuals asOrderedCollection.

 self  recomputeLayout.

^ self.



! 
 remove: child 

 self restructuring:[ 

 self children remove: child.

 child unlinkFromParent.

 self updateGeometricProperties.

 self requestBoundsUpdate.

].

 self announceNaturalExtentChange.

^ self.



! 
 naturalHeightForWidth: width 

|  height |

^( self  cachedHeightGivenWidth notNil and:[ 

 self  cachedHeightGivenWidth first = width.

])  ifTrue:[ 

 self  cachedHeightGivenWidth at:2.

] ifFalse:[ 

 height := self  computeNaturalHeightForWidth: width.

 self  cachedHeightGivenWidth:(( self Array new:2)  at:1 put: width; 

  at:2 put: height; 

 yourself).

 height.

].



! 
cachedHeightGivenWidth: cachedHeightGivenWidth_val cachedHeightGivenWidth := cachedHeightGivenWidth_val! 
 verticalGap: newValue 

 self  verticalGapA value: newValue.

^ self.



! 
precomputedChildrenBounds: precomputedChildrenBounds_val precomputedChildrenBounds := precomputedChildrenBounds_val! 
horizontalGapA ^horizontalGapA! 
 computeNaturalExtent 

|  totalWidth  maxHeight |

 totalWidth := self hasChildren  ifTrue:[ 

 self  horizontalGap negated.

] ifFalse:[ 

0.

].

 maxHeight :=0.

 self childrenDo:[ : each | 

|  extent |

 extent := each area suggestedParentExtent.

 totalWidth := totalWidth + extent x + self  horizontalGap.

 maxHeight := maxHeight max: extent y.

].

^ totalWidth @ maxHeight.



! 
 legalAreaClassesFor: child 

^ child legalAreaClassesInFlow.



! 
 occupyBoundsResponse: newBounds 

 self boundsH value: newBounds.

 self  recomputeLayout.

 self childrenDo:[ : each | 

 each occupyBounds:( self  precomputedBoundsFor: each).

].

^ self.



! 
 Brazil_ContainerClasses_Flow_superInit_new 

super  new.

^ self.



! 
  composeOneLineFrom: stream within: width using: aBlock 

|  elements  extent  maxHeight  right |

 elements := (EnclosingObjects_Brazil_ContainerClasses_Flow at: 2)  OrderedCollection with: stream next.

 extent := elements first area suggestedParentExtent.

 maxHeight := extent y.

 right := extent x.

[ 

 stream atEnd.

] whileFalse:[ 

 right := right + self  horizontalGap.

 extent := stream peek area suggestedParentExtent.

 right + extent x <= width  ifTrue:[ 

 right := right + extent x.

 maxHeight := maxHeight max: extent y.

 elements add: stream next.

] ifFalse:[ 

^ aBlock  value: elements value: maxHeight.

].

].

^ aBlock  value: elements value: maxHeight.



! 
  readAndMeasureOneLineFrom: stream within: width 

|  extent  maxHeight  right |

 extent := stream next area suggestedParentExtent.

 maxHeight := extent y.

 right := extent x.

[ 

 stream atEnd.

] whileFalse:[ 

 right := right + self  horizontalGap.

 extent := stream peek area suggestedParentExtent.

 right + extent x <= width  ifTrue:[ 

 right := right + extent x.

 maxHeight := maxHeight max: extent y.

 stream next.

] ifFalse:[ 

^ maxHeight.

].

].

^ maxHeight.



! 
  precomputedBoundsFor: child are: box 

 self  precomputedChildrenBounds  at: child put: box.

^ self.



! 
 Brazil_ContainerClasses_Flow_1_init 

 self horizontalGapA:( (EnclosingObjects_Brazil_ContainerClasses_Flow at: 1)  Attribute  name:#'horizontalGap' value:0).

 self verticalGapA:( (EnclosingObjects_Brazil_ContainerClasses_Flow at: 1)  Attribute  name:#'verticalGap' value:0).

 self cachedHeightGivenWidth:nil.

 self precomputedChildrenBounds: (EnclosingObjects_Brazil_ContainerClasses_Flow at: 2)  IdentityDictionary new.

^ self.



! 
horizontalGapA: horizontalGapA_val horizontalGapA := horizontalGapA_val! 
 setupAreaIn: child 

 child setupAreaForFlow.

^ self.



! 
precomputedChildrenBounds ^precomputedChildrenBounds! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_Flow) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_Flow := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_Flow := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_Flow. ! 
	Brazil_ContainerClasses_Flow metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_ContainerClasses_GridRowX as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_GridRowX EnclosingObjects_Brazil_ContainerClasses_GridRowX')!
	(Delta mirrorFor: #Brazil_ContainerClasses_GridRowX) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_GridRowX) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_GridRowX) comment: 'PRIVATE CLASS

GridRow is used internally by Grid to arrange its cells. It is not supposed to be used directly by an application. One of the main differences of a grid row is delegating any child bounds updates it receives to the parent (the grid) so that the grid can match the layout of the same cell in other rows.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ContainerClasses_GridRowX) methodsFor: 'unclassified'!
	 addColumn 

 self add:( (EnclosingObjects_Brazil_ContainerClasses_GridRowX at: 1)  Wrapper with: (EnclosingObjects_Brazil_ContainerClasses_GridRowX at: 1)  Blank new).

^ self.



! 
  setColumnAt: index widthTo: width 

( self children at: index) area width: width.

 self updateGeometricProperties.

^ self.



! 
 Brazil_ContainerClasses_GridRowX_superInit_new 

super  new.

^ self.



! 
 setupAreaIn: child 

 child setupAreaForGridRow.

^ self.



! 
 grid 

^ self parent.



! 
 flushPrecomputedColumnWidths 

 self childrenDo:[ : each | 

 each area quietlySetWidth:nil.

].

^ self.



! 
 legalAreaClassesFor: child 

^ child legalAreaClassesInGridRow.



! 
  at: index put: visual 

|  old |

 old := self children at: index.

 self restructuring:[ 

 self children  at: index put: visual.

 old unlinkFromParent.

 visual linkToParent: self.

 self isMapped ifTrue:[ 

 visual mapSubtree.

 self reportNaturalExtentChange.

].

].

^ self.



! 
 Brazil_ContainerClasses_GridRowX_1_init 

^ self.



! 
 at: index 

^ self children at: index.



! 
 columns: columns 

 columns timesRepeat:[ 

 self  addColumn.

].

^ self.



! 
  child: cell requestsBoundsUpdateUsing: continuation 

 self parent  row: self requestsBoundsUpdateCausedBy: cell using:[ : newBounds | 

 self setBounds: newBounds.

 self  repositionAllChildrenByRequestFrom: cell using: continuation.

].

^ self.



! 
 columnCount 

^ self children size.



! 
 columnWidthAt: index 

#'BOGUS' yourself.

^( self children at: index) area naturalExtent x.



! 
 new 

 self Brazil_ContainerClasses_GridRowX_superInit_new.

 self Brazil_ContainerClasses_GridRowX_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_GridRowX) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_GridRowX := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_GridRowX := mmd !
	 columns: columns 

^ self  new columns: columns.



! 
		 new 

^ self basicNew new.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_GridRowX. ! 
	Brazil_ContainerClasses_GridRowX metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_ContainerClasses_Window as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' titleA menuBarMenuA dragDropDispatcher minimumExtentA closePermission isModal')
	 classVariables: 'MixinMetadata_Brazil_ContainerClasses_Window EnclosingObjects_Brazil_ContainerClasses_Window')!
	(Delta mirrorFor: #Brazil_ContainerClasses_Window) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Window) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_ContainerClasses_Window) comment: 'This is a top-level window. Its parent, if any, is a Desktop.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_ContainerClasses_Window) methodsFor: 'unclassified'!
	closePermission: closePermission_val closePermission := closePermission_val! 
  openModalWhileFalse: doneValueProvider afterOpening: setupBlock 

 self  isModal:true.

 self parent ifNil:[ 

 (EnclosingObjects_Brazil_ContainerClasses_Window at: 2)  theDesktop add: self.

].

 self agent  modalOpenWhileFalse: doneValueProvider afterOpening:[ 

 setupBlock value.

 self visible:true.

].

^ self.



! 
titleA: titleA_val titleA := titleA_val! 
 title 

^ self  titleA value.



! 
 Brazil_ContainerClasses_Window_1_init 

 self titleA:( (EnclosingObjects_Brazil_ContainerClasses_Window at: 1)  Attribute  name:#'title' value:'Unnamed Window').

 self minimumExtentA:( (EnclosingObjects_Brazil_ContainerClasses_Window at: 1)  Attribute  name:#'minimumExtent' value:10 @10).

 self menuBarMenuA:( (EnclosingObjects_Brazil_ContainerClasses_Window at: 1)  Attribute  name:#'menuBarMenu' value:nil).

 self closePermission:nil.

 self dragDropDispatcher:nil.

 self isModal:nil.

^ self.



! 
menuBarMenuA: menuBarMenuA_val menuBarMenuA := menuBarMenuA_val! 
 open 

 self parent ifNil:[ 

 (EnclosingObjects_Brazil_ContainerClasses_Window at: 2)  theDesktop add: self.

].

 self visible:true.

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForWindow: self.

^ self.



! 
titleA ^titleA! 
dragDropDispatcher: dragDropDispatcher_val dragDropDispatcher := dragDropDispatcher_val! 
 new 

 self Brazil_ContainerClasses_Window_superInit_new.

 self Brazil_ContainerClasses_Window_1_init.

 self content: (EnclosingObjects_Brazil_ContainerClasses_Window at: 1)  CompositeVisual new.

 self visible:false.

^ self.



! 
 shrinkWrap: shrinkWrap 

 self areaClass:( shrinkWrap  ifTrue:[ 

 (EnclosingObjects_Brazil_ContainerClasses_Window at: 1)  Anchor.

] ifFalse:[ 

 (EnclosingObjects_Brazil_ContainerClasses_Window at: 1)  Frame.

]).

^ self.



! 
 minimumExtent: aPoint 

 self  minimumExtentA value: aPoint.

^ self.



! 
isModal: isModal_val isModal := isModal_val! 
menuBarMenuA ^menuBarMenuA! 
 setupAreaForDesktop 

 self setArea:( (EnclosingObjects_Brazil_ContainerClasses_Window at: 1)  Frame visual: self).

 self area isZero ifTrue:[ 

 self area bounds:(70 @70 extent:(150 @100)).

].

^ self.



! 
 isOpen 

^ self agent notNil and:[ 

 self agent isOpen.

].



! 
 close 

 self agent ifNotNil:[ 

 self agent close.

].

^ self.



! 
 openOnDesktop: aDesktop 

 self parent isNil  ifTrue:[ 

 aDesktop add: self.

] ifFalse:[ 

 self parent ~~ aDesktop ifTrue:[ 

 self parent remove: self.

 aDesktop add: self.

].

].

 self visible:true.

^ self.



! 
 globalOrigin 

^ self bounds origin.



! 
 shrinkWrapNow 

 self area extent: self content naturalExtent.

^ self.



! 
 hasPermissionToClose 

^( self  closePermission isNil or:[ 

 self  closePermission value.

]) and:[ 

|  theDsktop |

 theDsktop := self desktop.

 theDsktop isNil or:[ 

 theDsktop windowHasPermissionToClose: self.

].

].



! 
 add: newChild 

 self content add: newChild.

^ self.



! 
 window 

^ self.



! 
closePermission ^closePermission! 
 Brazil_ContainerClasses_Window_superInit_new 

super  new.

^ self.



! 
 menuBarMenu: newMenu 

 self  menuBarMenuA value: newMenu.

^ self.



! 
 mappedWindowClosed 

 self notifications send:#'closed'.

 self parent remove: self.

 self  isModal:false.

 self agent:nil.

^ self.



! 
 remove: existingChild 

 self content remove: existingChild.

^ self.



! 
dragDropDispatcher ^dragDropDispatcher! 
 resizeFromUserTo: newBounds 

#'BOGUS' yourself.

( self area isKindOf: (EnclosingObjects_Brazil_ContainerClasses_Window at: 1)  Frame)  ifTrue:[ 

 self area bounds: newBounds.

] ifFalse:[ 

 self occupyBounds: newBounds.

].

^ self.



! 
 bounds: newBounds 

 self area bounds: newBounds.

^ self.



! 
 minimumExtent 

^ self  minimumExtentA value.



! 
 extent: newExtent 

 self area extent: newExtent.

^ self.



! 
 setupAreaIn: child 

 child setupAreaForWindow.

^ self.



! 
minimumExtentA: minimumExtentA_val minimumExtentA := minimumExtentA_val! 
 occupyBoundsResponse: newBounds 

|  box |

 box := newBounds origin extent:( newBounds extent max: self  minimumExtent).

super  occupyBoundsResponse: box.

^ self.



! 
isModal ^isModal! 
 menuBarMenu 

^ self  menuBarMenuA value.



! 
minimumExtentA ^minimumExtentA! 
 outerBounds 

^ self agent  ifNil:[ 

 self bounds.

] ifNotNil:[ 

 self agent outerBounds.

].



! 
 title: aString 

 self  titleA value: aString.

^ self.



! 
  findTargetForDragAt: globalPoint forSession: session 

^ self  dragDropDispatcher isNil  ifTrue:[ 

nil.

] ifFalse:[ 

 self  dragDropDispatcher  findTargetForDragAt: globalPoint -  self origin forSession: session.

].



! 
 !
	! (Delta mirrorFor: #Brazil_ContainerClasses_Window) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_ContainerClasses_Window := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_ContainerClasses_Window := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_ContainerClasses metadata addNestedClass: Brazil_ContainerClasses_Window. ! 
	Brazil_ContainerClasses_Window metadata enclosingMixin: Brazil_ContainerClasses !
	Delta define: #Brazil_WidgetClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' MappableHolder Brazil_WidgetClasses_Icon_slot Anchor LineArea Brazil_WidgetClasses_ActiveIcon_slot LeafVisual Brazil_WidgetClasses_Button_slot Brazil_WidgetClasses_ListBox_slot Brazil_WidgetClasses_TextView_slot Brazil_WidgetClasses_LineShape_slot Brazil_WidgetClasses_RectangleShape_slot Brazil_WidgetClasses_PolygonShape_slot Brazil_WidgetClasses_SensitiveIcon_slot Brazil_WidgetClasses_EllipseShape_slot Frame BoxShape Holder Brazil_WidgetClasses_RoundedRectangleShape_slot Brazil_WidgetClasses_Hyperlink_slot Brazil_WidgetClasses_SensitiveLabel_slot Attribute Brazil_WidgetClasses_Label_slot PolygonArea Shape Brazil_WidgetClasses_TextDisplay_slot Brazil_WidgetClasses_Blank_slot Font')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses EnclosingObjects_Brazil_WidgetClasses')!
	(Delta mirrorFor: #Brazil_WidgetClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses) methodsFor: 'unclassified'!
	ListBox
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_ListBox_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_ListBox.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  LeafVisual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_ListBox_slot := myNested.
		].
	^Brazil_WidgetClasses_ListBox_slot! 
Hyperlink
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_Hyperlink_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_Hyperlink.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  Label)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_Hyperlink_slot := myNested.
		].
	^Brazil_WidgetClasses_Hyperlink_slot! 
LineArea ^LineArea! 
Attribute: Attribute_val Attribute := Attribute_val! 
Anchor: Anchor_val Anchor := Anchor_val! 
RoundedRectangleShape
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_RoundedRectangleShape_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_RoundedRectangleShape.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  BoxShape)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_RoundedRectangleShape_slot := myNested.
		].
	^Brazil_WidgetClasses_RoundedRectangleShape_slot! 
Label
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_Label_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_Label.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  LeafVisual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_Label_slot := myNested.
		].
	^Brazil_WidgetClasses_Label_slot! 
PolygonArea: PolygonArea_val PolygonArea := PolygonArea_val! 
Shape: Shape_val Shape := Shape_val! 
Font: Font_val Font := Font_val! 
 Brazil_WidgetClasses_1_init 

 self LeafVisual: (EnclosingObjects_Brazil_WidgetClasses at: 1)  visuals LeafVisual.

 self BoxShape: (EnclosingObjects_Brazil_WidgetClasses at: 1)  visuals BoxShape.

 self Shape: (EnclosingObjects_Brazil_WidgetClasses at: 1)  visuals Shape.

 self Attribute: (EnclosingObjects_Brazil_WidgetClasses at: 1)  plumbing Attribute.

 self Anchor: (EnclosingObjects_Brazil_WidgetClasses at: 1)  areas Anchor.

 self Font: (EnclosingObjects_Brazil_WidgetClasses at: 1)  plumbing Font.

 self LineArea: (EnclosingObjects_Brazil_WidgetClasses at: 1)  areas LineArea.

 self PolygonArea: (EnclosingObjects_Brazil_WidgetClasses at: 1)  areas PolygonArea.

 self Frame: (EnclosingObjects_Brazil_WidgetClasses at: 1)  areas Frame.

 self Holder: (EnclosingObjects_Brazil_WidgetClasses at: 1)  plumbing Holder.

 self MappableHolder: (EnclosingObjects_Brazil_WidgetClasses at: 1)  plumbing MappableHolder.

^ self.



! 
MappableHolder: MappableHolder_val MappableHolder := MappableHolder_val! 
 new 

 self Brazil_WidgetClasses_superInit_new.

 self Brazil_WidgetClasses_1_init.

^ self.



! 
PolygonArea ^PolygonArea! 
Shape ^Shape! 
SensitiveIcon
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_SensitiveIcon_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_SensitiveIcon.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  Icon)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_SensitiveIcon_slot := myNested.
		].
	^Brazil_WidgetClasses_SensitiveIcon_slot! 
Font ^Font! 
Holder: Holder_val Holder := Holder_val! 
EllipseShape
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_EllipseShape_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_EllipseShape.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  BoxShape)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_EllipseShape_slot := myNested.
		].
	^Brazil_WidgetClasses_EllipseShape_slot! 
Icon
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_Icon_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_Icon.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  LeafVisual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_Icon_slot := myNested.
		].
	^Brazil_WidgetClasses_Icon_slot! 
 Brazil_WidgetClasses_superInit_new 

super  new.

^ self.



! 
Button
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_Button_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_Button.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  LeafVisual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_Button_slot := myNested.
		].
	^Brazil_WidgetClasses_Button_slot! 
Frame: Frame_val Frame := Frame_val! 
LineArea: LineArea_val LineArea := LineArea_val! 
SensitiveLabel
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_SensitiveLabel_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_SensitiveLabel.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  Label)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_SensitiveLabel_slot := myNested.
		].
	^Brazil_WidgetClasses_SensitiveLabel_slot! 
PolygonShape
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_PolygonShape_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_PolygonShape.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  Shape)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_PolygonShape_slot := myNested.
		].
	^Brazil_WidgetClasses_PolygonShape_slot! 
BoxShape: BoxShape_val BoxShape := BoxShape_val! 
TextView
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_TextView_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_TextView.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  LeafVisual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_TextView_slot := myNested.
		].
	^Brazil_WidgetClasses_TextView_slot! 
MappableHolder ^MappableHolder! 
RectangleShape
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_RectangleShape_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_RectangleShape.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  BoxShape)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_RectangleShape_slot := myNested.
		].
	^Brazil_WidgetClasses_RectangleShape_slot! 
Anchor ^Anchor! 
ActiveIcon
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_ActiveIcon_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_ActiveIcon.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  Icon)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_ActiveIcon_slot := myNested.
		].
	^Brazil_WidgetClasses_ActiveIcon_slot! 
Frame ^Frame! 
BoxShape ^BoxShape! 
Holder ^Holder! 
LeafVisual: LeafVisual_val LeafVisual := LeafVisual_val! 
LeafVisual ^LeafVisual! 
TextDisplay
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_TextDisplay_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_TextDisplay.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  LeafVisual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_TextDisplay_slot := myNested.
		].
	^Brazil_WidgetClasses_TextDisplay_slot! 
Attribute ^Attribute! 
LineShape
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_LineShape_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_LineShape.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  LeafVisual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_LineShape_slot := myNested.
		].
	^Brazil_WidgetClasses_LineShape_slot! 
Blank
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_WidgetClasses_Blank_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_WidgetClasses 
			nestedMixins at: #Brazil_WidgetClasses_Blank.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_WidgetClasses Mirror on: self  LeafVisual)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_WidgetClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_WidgetClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_WidgetClasses_Blank_slot := myNested.
		].
	^Brazil_WidgetClasses_Blank_slot! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil metadata addNestedClass: Brazil_WidgetClasses. ! 
	Brazil_WidgetClasses metadata enclosingMixin: Brazil !
	Delta define: #Brazil_WidgetClasses_SensitiveIcon as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' entryAction exitAction mouseMovedAction mouseDownAction mouseUpAction')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_SensitiveIcon EnclosingObjects_Brazil_WidgetClasses_SensitiveIcon')!
	(Delta mirrorFor: #Brazil_WidgetClasses_SensitiveIcon) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_SensitiveIcon) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_SensitiveIcon) comment: 'This icon class adds to the superclass the ability to sense and respond to mouse events such as button presses and mouse movement.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_WidgetClasses_SensitiveIcon) methodsFor: 'unclassified'!
	exitAction: exitAction_val exitAction := exitAction_val! 
mouseMovedAction ^mouseMovedAction! 
 mouseEntryResponse: response 

 self  entryAction: response.

^ self.



! 
mouseMovedAction: mouseMovedAction_val mouseMovedAction := mouseMovedAction_val! 
 respondToMouseMove 

 self  mouseMovedAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 mouseMoveResponse: response 

 self  mouseMovedAction: response.

^ self.



! 
 respondToMouseExit 

 self  exitAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
entryAction: entryAction_val entryAction := entryAction_val! 
 Brazil_WidgetClasses_SensitiveIcon_superInit_new 

super  new.

^ self.



! 
 Brazil_WidgetClasses_SensitiveIcon_1_init 

 self entryAction:nil.

 self exitAction:nil.

 self mouseDownAction:nil.

 self mouseUpAction:nil.

 self mouseMovedAction:nil.

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForSensitiveIcon: self.

^ self.



! 
mouseDownAction ^mouseDownAction! 
 new 

 self Brazil_WidgetClasses_SensitiveIcon_superInit_new.

 self Brazil_WidgetClasses_SensitiveIcon_1_init.

^ self.



! 
mouseDownAction: mouseDownAction_val mouseDownAction := mouseDownAction_val! 
exitAction ^exitAction! 
 mouseDownLeftResponse: response 

 self  mouseDownAction: response.

^ self.



! 
mouseUpAction ^mouseUpAction! 
entryAction ^entryAction! 
mouseUpAction: mouseUpAction_val mouseUpAction := mouseUpAction_val! 
 respondToMouseEntry 

 self  entryAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 mouseExitResponse: response 

 self  exitAction: response.

^ self.



! 
 respondToMouseUpLeft 

 self  mouseUpAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 mouseUpLeftResponse: response 

 self  mouseUpAction: response.

^ self.



! 
 respondToMouseDownLeft 

 self  mouseDownAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_SensitiveIcon) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_SensitiveIcon := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_SensitiveIcon := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_SensitiveIcon. ! 
	Brazil_WidgetClasses_SensitiveIcon metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_TextDisplay as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' textA fontA')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_TextDisplay EnclosingObjects_Brazil_WidgetClasses_TextDisplay')!
	(Delta mirrorFor: #Brazil_WidgetClasses_TextDisplay) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_TextDisplay) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_TextDisplay) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses_TextDisplay) methodsFor: 'unclassified'!
	fontA: fontA_val fontA := fontA_val! 
 naturalHeightForWidth: size 

^ self agent  ifNil:[ 

0.

] ifNotNil:[ 

 self agent naturalHeightForWidth: size.

].



! 
 naturalExtent 

^ self isMapped  ifTrue:[ 

 self agent naturalExtent.

] ifFalse:[ 

0 @0.

].



! 
textA: textA_val textA := textA_val! 
 isSquishy 

^true.



! 
 Brazil_WidgetClasses_TextDisplay_1_init 

 self textA:( (EnclosingObjects_Brazil_WidgetClasses_TextDisplay at: 1)  Attribute  name:#'text' value: self String new).

 self fontA:( (EnclosingObjects_Brazil_WidgetClasses_TextDisplay at: 1)  Attribute  name:#'font' value: (EnclosingObjects_Brazil_WidgetClasses_TextDisplay at: 1)  Font normal).

^ self.



! 
 text: aString 

 self  textA value: aString.

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForTextDisplay: self.

^ self.



! 
 font 

^ self  fontA value.



! 
 Brazil_WidgetClasses_TextDisplay_superInit_new 

super  new.

^ self.



! 
 new 

 self Brazil_WidgetClasses_TextDisplay_superInit_new.

 self Brazil_WidgetClasses_TextDisplay_1_init.

 self affectsNaturalExtent: self  textA.

 self affectsNaturalExtent: self  fontA.

^ self.



! 
 text 

^ self  textA value.



! 
 computeNaturalExtent 

^ self isMapped  ifTrue:[ 

 self agent naturalExtent.

] ifFalse:[ 

0 @0.

].



! 
 setupAreaForWrapper 

 self setArea:( (EnclosingObjects_Brazil_WidgetClasses_TextDisplay at: 1)  Frame visual: self) fullyCoverParent.

^ self.



! 
textA ^textA! 
fontA ^fontA! 
 font: newFont 

 self  fontA value: newFont.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_TextDisplay) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_TextDisplay := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_TextDisplay := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_TextDisplay. ! 
	Brazil_WidgetClasses_TextDisplay metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_RoundedRectangleShape as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' cornerRadiusA')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_RoundedRectangleShape EnclosingObjects_Brazil_WidgetClasses_RoundedRectangleShape')!
	(Delta mirrorFor: #Brazil_WidgetClasses_RoundedRectangleShape) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_RoundedRectangleShape) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_RoundedRectangleShape) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses_RoundedRectangleShape) methodsFor: 'unclassified'!
	 Brazil_WidgetClasses_RoundedRectangleShape_superInit_new 

super  new.

^ self.



! 
cornerRadiusA ^cornerRadiusA! 
 cornerRadius: newRadius 

 self  cornerRadiusA value: newRadius.

^ self.



! 
 cornerRadius 

^ self  cornerRadiusA value.



! 
cornerRadiusA: cornerRadiusA_val cornerRadiusA := cornerRadiusA_val! 
 createAgentUsing: aMapping 

 aMapping createAgentForRoundedRectangleShape: self.

^ self.



! 
 Brazil_WidgetClasses_RoundedRectangleShape_1_init 

 self cornerRadiusA:( (EnclosingObjects_Brazil_WidgetClasses_RoundedRectangleShape at: 1)  Attribute  name:#'cornerRadius' value:5).

^ self.



! 
 new 

 self Brazil_WidgetClasses_RoundedRectangleShape_superInit_new.

 self Brazil_WidgetClasses_RoundedRectangleShape_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_RoundedRectangleShape) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_RoundedRectangleShape := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_RoundedRectangleShape := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_RoundedRectangleShape. ! 
	Brazil_WidgetClasses_RoundedRectangleShape metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_LineShape as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' widthA colorA')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_LineShape EnclosingObjects_Brazil_WidgetClasses_LineShape')!
	(Delta mirrorFor: #Brazil_WidgetClasses_LineShape) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_LineShape) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_LineShape) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses_LineShape) methodsFor: 'unclassified'!
	widthA: widthA_val widthA := widthA_val! 
 legalAreaClassesInCompositeVisual 

^( self Array new:1)  at:1 put: (EnclosingObjects_Brazil_WidgetClasses_LineShape at: 1)  LineArea; 

 yourself.



! 
colorA: colorA_val colorA := colorA_val! 
 computeNaturalExtent 

^( self area endPoint -  self area startPoint) abs.



! 
widthA ^widthA! 
 setupAreaForCompositeVisual 

 self setArea:( (EnclosingObjects_Brazil_WidgetClasses_LineShape at: 1)  LineArea visual: self).

^ self.



! 
 color 

^ self  colorA value.



! 
 naturalExtent 

^ self  computeNaturalExtent.



! 
 Brazil_WidgetClasses_LineShape_1_init 

 self colorA:( (EnclosingObjects_Brazil_WidgetClasses_LineShape at: 1)  Attribute  name:#'color' value: (EnclosingObjects_Brazil_WidgetClasses_LineShape at: 2)  Color black).

 self widthA:( (EnclosingObjects_Brazil_WidgetClasses_LineShape at: 1)  Attribute  name:#'width' value:1).

^ self.



! 
 width: newWidth 

 self  widthA value: newWidth.

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForLineShape: self.

^ self.



! 
colorA ^colorA! 
 width 

^ self  widthA value.



! 
 color: newColor 

 self  colorA value: newColor.

^ self.



! 
 Brazil_WidgetClasses_LineShape_superInit_new 

super  new.

^ self.



! 
 new 

 self Brazil_WidgetClasses_LineShape_superInit_new.

 self Brazil_WidgetClasses_LineShape_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_LineShape) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_LineShape := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_LineShape := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_LineShape. ! 
	Brazil_WidgetClasses_LineShape metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_Label as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' textA colorA fontA')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_Label EnclosingObjects_Brazil_WidgetClasses_Label')!
	(Delta mirrorFor: #Brazil_WidgetClasses_Label) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_Label) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_Label) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses_Label) methodsFor: 'unclassified'!
	fontA: fontA_val fontA := fontA_val! 
 naturalExtent 

^ self agent isNil  ifTrue:[ 

80 @25.

] ifFalse:[ 

 self agent naturalExtent.

].



! 
 Brazil_WidgetClasses_Label_superInit_new 

super  new.

^ self.



! 
colorA: colorA_val colorA := colorA_val! 
textA: textA_val textA := textA_val! 
 color 

^ self  colorA value.



! 
 text: newLabel 

 self  textA value: newLabel.

^ self.



! 
 Brazil_WidgetClasses_Label_1_init 

 self textA:( (EnclosingObjects_Brazil_WidgetClasses_Label at: 1)  Attribute  name:#'text' value:'a label').

 self fontA:( (EnclosingObjects_Brazil_WidgetClasses_Label at: 1)  Attribute  name:#'font' value: (EnclosingObjects_Brazil_WidgetClasses_Label at: 1)  Font normal).

 self colorA:( (EnclosingObjects_Brazil_WidgetClasses_Label at: 1)  Attribute  name:#'color' value: (EnclosingObjects_Brazil_WidgetClasses_Label at: 2)  Color black).

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForLabel: self.

^ self.



! 
 font 

^ self  fontA value.



! 
 printOn: aStream 

super  printOn: aStream.

 aStream space; 

 print: self  label.

^ self.



! 
 color: newColor 

 self  colorA value: newColor.

^ self.



! 
 new 

 self Brazil_WidgetClasses_Label_superInit_new.

 self Brazil_WidgetClasses_Label_1_init.

 self affectsNaturalExtent: self  textA.

^ self.



! 
 label: newLabel 

 self text: newLabel.

^ self.



! 
 text 

^ self  textA value.



! 
 computeNaturalExtent 

^ self agent isNil  ifTrue:[ 

80 @25.

] ifFalse:[ 

 self agent naturalExtent.

].



! 
 setupAreaForCompositeVisual 

 self setArea:( (EnclosingObjects_Brazil_WidgetClasses_Label at: 1)  Anchor visual: self).

^ self.



! 
textA ^textA! 
 label 

^ self  text.



! 
 isActive 

^false.



! 
fontA ^fontA! 
 font: newFont 

 self  fontA value: newFont.

^ self.



! 
colorA ^colorA! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_Label) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_Label := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_Label := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_Label. ! 
	Brazil_WidgetClasses_Label metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_ListBox as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' displayBlock selectionChanged selectionIndexHolder objectsHolder showVScrollbarA doubleClickAction menuBlock showHScrollbarA')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_ListBox EnclosingObjects_Brazil_WidgetClasses_ListBox')!
	(Delta mirrorFor: #Brazil_WidgetClasses_ListBox) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_ListBox) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_ListBox) comment: 'A list of objects displayed as a sequence of strings. The string to show for each object is computed by the displayBlock. By default, the object''s printString is displayed.

Mappable properties:

objectsHolder <MappableHolder[Sequence]>
selectionIndexHolder <MappableHolder[Integer]>
showHScrollbarA <Attribute[Boolean | nil]> The nil value means show or hide as necessary.
showVScrollbarA <Attribute[Boolean | nil]>

Notifications:

doubleClickAction <[] | nil> If not nil, a block to invoke when a list item is double-clicked.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0
'!
	! (Delta mirrorFor: #Brazil_WidgetClasses_ListBox) methodsFor: 'unclassified'!
	 objectsAsStrings 

^ self  objects collect: self  displayBlock.



! 
showHScrollbarA: showHScrollbarA_val showHScrollbarA := showHScrollbarA_val! 
 showHScrollbar 

^ self  showHScrollbarA value.



! 
 menu 

^ self  menuBlock value.



! 
 selectionIndex 

^ self  selectionIndexHolder value.



! 
 Brazil_WidgetClasses_ListBox_superInit_new 

super  new.

^ self.



! 
 showVScrollbar: newState 

 self  showVScrollbarA value: newState.

^ self.



! 
selectionChanged: selectionChanged_val selectionChanged := selectionChanged_val! 
 selectIndex: index 

( index  between:0 and: self  objects size) ifTrue:[ 

 self  selectionIndexHolder value: index.

].

^ self.



! 
showVScrollbarA ^showVScrollbarA! 
 createAgentUsing: agentFactory 

 agentFactory createAgentForListBox: self.

^ self.



! 
menuBlock ^menuBlock! 
selectionIndexHolder: selectionIndexHolder_val selectionIndexHolder := selectionIndexHolder_val! 
 new 

 self Brazil_WidgetClasses_ListBox_superInit_new.

 self Brazil_WidgetClasses_ListBox_1_init.

^ self.



! 
menuBlock: menuBlock_val menuBlock := menuBlock_val! 
doubleClickAction ^doubleClickAction! 
 showVScrollbar 

^ self  showVScrollbarA value.



! 
 select: anObject 

 self  selectIndex:( self  objects indexOf: anObject).

^ self.



! 
 hasSelection 

^ self  selectionIndex ~=0.



! 
displayBlock ^displayBlock! 
selectionIndexHolder ^selectionIndexHolder! 
 naturalExtent 

^100 @( self  list size *15).



! 
doubleClickAction: doubleClickAction_val doubleClickAction := doubleClickAction_val! 
 selection 

|  index  stuff |

 index := self  selectionIndex.

 stuff := self  objects.

^( index  between:1 and: stuff size)  ifTrue:[ 

 stuff at: index.

] ifFalse:[ 

nil.

].



! 
displayBlock: displayBlock_val displayBlock := displayBlock_val! 
objectsHolder ^objectsHolder! 
 list: list 

 self objects: list.

^ self.



! 
 objects: sequence 

|  originalSelection |

 originalSelection := self  selection.

 self  objectsHolder value: sequence.

 self  select: originalSelection.

^ self.



! 
 objects 

^ self  objectsHolder value.



! 
selectionChanged ^selectionChanged! 
showHScrollbarA ^showHScrollbarA! 
 selectionDo: aBlock 

^( self  selectionIndex  between:1 and: self  objects size) ifTrue:[ 

 aBlock value:( self  objects at: self  selectionIndex).

].



! 
 computeNaturalExtent 

#'BOUGS' yourself.

^100 @( self  list size *15).



! 
objectsHolder: objectsHolder_val objectsHolder := objectsHolder_val! 
 list 

^ self  objects.



! 
showVScrollbarA: showVScrollbarA_val showVScrollbarA := showVScrollbarA_val! 
 Brazil_WidgetClasses_ListBox_1_init 

 self showHScrollbarA:( (EnclosingObjects_Brazil_WidgetClasses_ListBox at: 1)  Attribute  name:#'showHScrollbar' value:nil).

 self showVScrollbarA:( (EnclosingObjects_Brazil_WidgetClasses_ListBox at: 1)  Attribute  name:#'showVScrollbar' value:nil).

 self objectsHolder:( (EnclosingObjects_Brazil_WidgetClasses_ListBox at: 1)  MappableHolder with: self Array new).

 self displayBlock:[ : object | 

 object printString.

].

 self selectionIndexHolder:( (EnclosingObjects_Brazil_WidgetClasses_ListBox at: 1)  MappableHolder with:0).

 self selectionChanged:( self  selectionIndexHolder changed transformedUsing:[ : index | 

 index =0  ifTrue:[ 

nil.

] ifFalse:[ 

 self  list at: index.

].

]).

 self menuBlock:nil.

 self doubleClickAction:nil.

^ self.



! 
 showHScrollbar: newState 

 self  showHScrollbarA value: newState.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_ListBox) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_ListBox := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_ListBox := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_ListBox. ! 
	Brazil_WidgetClasses_ListBox metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_Button as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' enabledA labelA action')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_Button EnclosingObjects_Brazil_WidgetClasses_Button')!
	(Delta mirrorFor: #Brazil_WidgetClasses_Button) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_Button) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_Button) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses_Button) methodsFor: 'unclassified'!
	labelA ^labelA! 
 Brazil_WidgetClasses_Button_superInit_new 

super  new.

^ self.



! 
 doAction 

 self  action ifNotNil:[ : it | 

 it clone value.

].

^ self.



! 
enabledA ^enabledA! 
labelA: labelA_val labelA := labelA_val! 
enabledA: enabledA_val enabledA := enabledA_val! 
 Brazil_WidgetClasses_Button_1_init 

 self labelA:( (EnclosingObjects_Brazil_WidgetClasses_Button at: 1)  Attribute  name:#'label' value:'unnamed').

 self enabledA:( (EnclosingObjects_Brazil_WidgetClasses_Button at: 1)  Attribute  name:#'enabled' value:true).

 self action:nil.

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForPushButton: self.

^ self.



! 
 naturalExtent 

^ self agent isNil  ifTrue:[ 

80 @25.

] ifFalse:[ 

 self agent naturalExtent.

].



! 
action ^action! 
 new 

 self Brazil_WidgetClasses_Button_superInit_new.

 self Brazil_WidgetClasses_Button_1_init.

 self affectsNaturalExtent: self  labelA.

^ self.



! 
 label: newLabel 

 self  labelA value: newLabel.

^ self.



! 
 computeNaturalExtent 

^ self agent isNil  ifTrue:[ 

80 @25.

] ifFalse:[ 

 self agent naturalExtent.

].



! 
action: action_val action := action_val! 
 enabled: newState 

 self  enabledA value: newState.

^ self.



! 
 setupAreaForCompositeVisual 

 self setArea:( (EnclosingObjects_Brazil_WidgetClasses_Button at: 1)  Anchor visual: self).

^ self.



! 
 label 

^ self  labelA value.



! 
 enabled 

^ self  enabledA value.



! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_Button) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_Button := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_Button := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_Button. ! 
	Brazil_WidgetClasses_Button metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_ActiveIcon as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' hoverImageA downImageA enabledA disabledImageA action actOnMouseDownA')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_ActiveIcon EnclosingObjects_Brazil_WidgetClasses_ActiveIcon')!
	(Delta mirrorFor: #Brazil_WidgetClasses_ActiveIcon) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_ActiveIcon) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_ActiveIcon) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses_ActiveIcon) methodsFor: 'unclassified'!
	 hoverImage: aForm 

 self  hoverImageA value: aForm.

^ self.



! 
 doAction 

 self  enabled ifTrue:[ 

 self  action ifNotNil:[ 

 self  action reentrant value.

].

].

^ self.



! 
 disabledImage 

^ self  disabledImageA value.



! 
downImageA ^downImageA! 
 downImage 

^ self  downImageA value.



! 
enabledA ^enabledA! 
disabledImageA ^disabledImageA! 
enabledA: enabledA_val enabledA := enabledA_val! 
downImageA: downImageA_val downImageA := downImageA_val! 
 Brazil_WidgetClasses_ActiveIcon_1_init 

 self disabledImageA:( (EnclosingObjects_Brazil_WidgetClasses_ActiveIcon at: 1)  Attribute  name:#'disabledImage' value:nil).

 self hoverImageA:( (EnclosingObjects_Brazil_WidgetClasses_ActiveIcon at: 1)  Attribute  name:#'hoverImage' value:nil).

 self downImageA:( (EnclosingObjects_Brazil_WidgetClasses_ActiveIcon at: 1)  Attribute  name:#'downImage' value:nil).

 self enabledA:( (EnclosingObjects_Brazil_WidgetClasses_ActiveIcon at: 1)  Attribute  name:#'enabled' value:true).

 self actOnMouseDownA:( (EnclosingObjects_Brazil_WidgetClasses_ActiveIcon at: 1)  Attribute  name:#'actOnMouseDown' value:false).

 self action:nil.

^ self.



! 
actOnMouseDownA ^actOnMouseDownA! 
 createAgentUsing: aMapping 

 aMapping createAgentForActiveIcon: self.

^ self.



! 
actOnMouseDownA: actOnMouseDownA_val actOnMouseDownA := actOnMouseDownA_val! 
 actOnMouseDown: newValue 

 self  actOnMouseDownA value: newValue.

^ self.



! 
 new 

 self Brazil_WidgetClasses_ActiveIcon_superInit_new.

 self Brazil_WidgetClasses_ActiveIcon_1_init.

^ self.



! 
hoverImageA ^hoverImageA! 
disabledImageA: disabledImageA_val disabledImageA := disabledImageA_val! 
hoverImageA: hoverImageA_val hoverImageA := hoverImageA_val! 
 hoverImage 

^ self  hoverImageA value.



! 
 disabledImage: aForm 

 self  disabledImageA value: aForm.

^ self.



! 
 enabled: aBoolean 

 self  enabledA value: aBoolean.

^ self.



! 
 downImage: aForm 

 self  downImageA value: aForm.

^ self.



! 
 actOnMouseDown 

^ self  actOnMouseDownA value.



! 
 Brazil_WidgetClasses_ActiveIcon_superInit_new 

super  new.

^ self.



! 
 enabled 

^ self  enabledA value.



! 
action ^action! 
action: action_val action := action_val! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_ActiveIcon) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_ActiveIcon := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_ActiveIcon := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_ActiveIcon. ! 
	Brazil_WidgetClasses_ActiveIcon metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_PolygonShape as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_PolygonShape EnclosingObjects_Brazil_WidgetClasses_PolygonShape')!
	(Delta mirrorFor: #Brazil_WidgetClasses_PolygonShape) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_PolygonShape) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_PolygonShape) comment: 'A polygon defined by the collection of vertices held onto by the area.'!
	! (Delta mirrorFor: #Brazil_WidgetClasses_PolygonShape) methodsFor: 'unclassified'!
	 Brazil_WidgetClasses_PolygonShape_1_init 

^ self.



! 
 legalAreaClassesInCompositeVisual 

^( self Array new:1)  at:1 put: (EnclosingObjects_Brazil_WidgetClasses_PolygonShape at: 1)  PolygonArea; 

 yourself.



! 
 setupAreaForCompositeVisual 

 self setArea:( (EnclosingObjects_Brazil_WidgetClasses_PolygonShape at: 1)  PolygonArea visual: self).

^ self.



! 
 computeNaturalExtent 

^ self area suggestedParentExtent.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForPolygonShape: self.

^ self.



! 
 Brazil_WidgetClasses_PolygonShape_superInit_new 

super  new.

^ self.



! 
 naturalExtent 

^ self  computeNaturalExtent.



! 
 new 

 self Brazil_WidgetClasses_PolygonShape_superInit_new.

 self Brazil_WidgetClasses_PolygonShape_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_PolygonShape) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_PolygonShape := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_PolygonShape := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_PolygonShape. ! 
	Brazil_WidgetClasses_PolygonShape metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_Hyperlink as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' hoverColorA underlineHover dragTracker action downColorA underlineNormal')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_Hyperlink EnclosingObjects_Brazil_WidgetClasses_Hyperlink')!
	(Delta mirrorFor: #Brazil_WidgetClasses_Hyperlink) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_Hyperlink) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_Hyperlink) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses_Hyperlink) methodsFor: 'unclassified'!
	 doAction 

 self  action ifNotNil:[ 

 self  action reentrant value.

].

^ self.



! 
 standardHyperlinkColor 

^ (EnclosingObjects_Brazil_WidgetClasses_Hyperlink at: 2)  Color  h:240 s:1 v:9/10.



! 
dragTracker: dragTracker_val dragTracker := dragTracker_val! 
downColorA ^downColorA! 
 hoverColor: newColor 

 self  hoverColorA value: newColor.

^ self.



! 
 Brazil_WidgetClasses_Hyperlink_superInit_new 

super  new.

^ self.



! 
dragTracker ^dragTracker! 
 hoverColor 

^ self  hoverColorA value.



! 
action ^action! 
 new 

 self Brazil_WidgetClasses_Hyperlink_superInit_new.

 self Brazil_WidgetClasses_Hyperlink_1_init.

 self label:'a hyperlink'.

 self color: self  standardHyperlinkColor.

^ self.



! 
underlineHover ^underlineHover! 
 changeColorTo: newColor 

 self colorA value: newColor.

^ self.



! 
action: action_val action := action_val! 
hoverColorA ^hoverColorA! 
 downColor: newColor 

 self  downColorA value: newColor.

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForHyperlink: self.

^ self.



! 
downColorA: downColorA_val downColorA := downColorA_val! 
 downColor 

^ self  downColorA value.



! 
 Brazil_WidgetClasses_Hyperlink_1_init 

 self hoverColorA:( (EnclosingObjects_Brazil_WidgetClasses_Hyperlink at: 1)  Attribute  name:#'hoverColor' value: self  standardHyperlinkColor).

 self downColorA:( (EnclosingObjects_Brazil_WidgetClasses_Hyperlink at: 1)  Attribute  name:#'downColor' value: self  standardHyperlinkColor).

 self underlineNormal:false.

 self underlineHover:true.

 self action:nil.

 self dragTracker:nil.

^ self.



! 
hoverColorA: hoverColorA_val hoverColorA := hoverColorA_val! 
underlineHover: underlineHover_val underlineHover := underlineHover_val! 
underlineNormal ^underlineNormal! 
underlineNormal: underlineNormal_val underlineNormal := underlineNormal_val! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_Hyperlink) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_Hyperlink := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_Hyperlink := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_Hyperlink. ! 
	Brazil_WidgetClasses_Hyperlink metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_TextView as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' escapeKeyResponse menuBlock suppressScrollbarsA enterKeyResponse hasChangesH textA acceptKeyResponse postMapActions fontA')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_TextView EnclosingObjects_Brazil_WidgetClasses_TextView')!
	(Delta mirrorFor: #Brazil_WidgetClasses_TextView) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_TextView) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_TextView) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses_TextView) methodsFor: 'unclassified'!
	postMapActions: postMapActions_val postMapActions := postMapActions_val! 
suppressScrollbarsA: suppressScrollbarsA_val suppressScrollbarsA := suppressScrollbarsA_val! 
 finishedMapping 

super  finishedMapping.

 self  postMapActions do:[ : each | 

 each value.

].

^ self.



! 
textA: textA_val textA := textA_val! 
 menu 

^ self  menuBlock value.



! 
hasChangesH ^hasChangesH! 
 text: aString 

 self  textA value: aString.

 self  clearHasEditsFromUserFlag.

^ self.



! 
acceptKeyResponse ^acceptKeyResponse! 
acceptKeyResponse: acceptKeyResponse_val acceptKeyResponse := acceptKeyResponse_val! 
fontA: fontA_val fontA := fontA_val! 
 createAgentUsing: aMapping 

^ aMapping createAgentForTextView: self.



! 
 font 

^ self  fontA value.



! 
 selectAll 

^ self isMapped  ifTrue:[ 

 self agent selectAll.

] ifFalse:[ 

 self  postMapActions add:[ 

 self agent selectAll.

].

].



! 
postMapActions ^postMapActions! 
 isSquishy 

^true.



! 
escapeKeyResponse ^escapeKeyResponse! 
 text 

^ self  textA value.



! 
menuBlock: menuBlock_val menuBlock := menuBlock_val! 
 selectionInterval 

^ self isMapped  ifTrue:[ 

 self agent selectionInterval.

] ifFalse:[ 

1 to:0.

].



! 
 suppressScrollbars 

^ self  suppressScrollbarsA value.



! 
 suppressScrollbars: newValue 

 self  suppressScrollbarsA value: newValue.

^ self.



! 
 selectLine 

^ self isMapped  ifTrue:[ 

 self agent selectLine.

] ifFalse:[ 

 self  postMapActions add:[ 

 self agent selectLine.

].

].



! 
 Brazil_WidgetClasses_TextView_1_init 

 self textA:( (EnclosingObjects_Brazil_WidgetClasses_TextView at: 1)  Attribute  name:#'text' value: self String new).

 self fontA:( (EnclosingObjects_Brazil_WidgetClasses_TextView at: 1)  Attribute  name:#'font' value: (EnclosingObjects_Brazil_WidgetClasses_TextView at: 1)  Font normal).

 self suppressScrollbarsA:( (EnclosingObjects_Brazil_WidgetClasses_TextView at: 1)  Attribute  name:#'suppressScrollbars' value:false).

 self hasChangesH:( (EnclosingObjects_Brazil_WidgetClasses_TextView at: 1)  Holder with:false).

 self menuBlock:nil.

 self enterKeyResponse:nil.

 self escapeKeyResponse:nil.

 self acceptKeyResponse:nil.

 self postMapActions: (EnclosingObjects_Brazil_WidgetClasses_TextView at: 2)  OrderedCollection new.

^ self.



! 
 new 

 self Brazil_WidgetClasses_TextView_superInit_new.

 self Brazil_WidgetClasses_TextView_1_init.

 self affectsNaturalExtent: self  fontA.

^ self.



! 
escapeKeyResponse: escapeKeyResponse_val escapeKeyResponse := escapeKeyResponse_val! 
 hasChangesChannel 

^ self  hasEditsFromUserChannel.



! 
  selectFrom: start to: end 

^ self isMapped  ifTrue:[ 

 self agent  selectFrom: start to: end.

] ifFalse:[ 

 self  postMapActions add:[ 

 self agent  selectFrom: start to: end.

].

].



! 
enterKeyResponse: enterKeyResponse_val enterKeyResponse := enterKeyResponse_val! 
 naturalHeightForWidth: size 

^ self agent  ifNil:[ 

0.

] ifNotNil:[ 

 self agent naturalHeightForWidth: size.

].



! 
 naturalExtent 

^ self agent  ifNil:[ 

0 @0.

] ifNotNil:[ 

 self agent naturalExtent.

].



! 
 maybeSelectCurrentLine 

 self  selectedText isEmpty ifTrue:[ 

 self  selectLine.

].

^ self  selectedText.



! 
 acceptText: text 

^false.



! 
suppressScrollbarsA ^suppressScrollbarsA! 
enterKeyResponse ^enterKeyResponse! 
 font: newFont 

 self  fontA value: newFont.

^ self.



! 
 Brazil_WidgetClasses_TextView_superInit_new 

super  new.

^ self.



! 
 clearHasEditsFromUserFlag 

 self  hasChangesH value:false.

^ self.



! 
 append: aString 

 self text:( self  text , aString).

 self agent ifNotNil:[ : it | 

 it scrollToEnd.

].

^ self.



! 
fontA ^fontA! 
 selectedText 

^ self isMapped  ifTrue:[ 

 self agent selectedText.

] ifFalse:[ 

#''.

].



! 
 computeNaturalExtent 

^ self agent  ifNil:[ 

0 @0.

] ifNotNil:[ 

 self agent naturalExtent.

].



! 
 hasEditsFromUser 

^ self  hasChangesH value.



! 
menuBlock ^menuBlock! 
textA ^textA! 
 hasEditsFromUserChannel 

^ self  hasChangesH changed.



! 
 acceptTextFromAgent: text 

 self  textA acceptValueFromMapping: text.

 self agent hasUnacceptedEdits ifTrue:[ 

 self  hasChangesH value:true.

].

^ self.



! 
hasChangesH: hasChangesH_val hasChangesH := hasChangesH_val! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_TextView) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_TextView := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_TextView := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_TextView. ! 
	Brazil_WidgetClasses_TextView metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_Icon as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' imageA')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_Icon EnclosingObjects_Brazil_WidgetClasses_Icon')!
	(Delta mirrorFor: #Brazil_WidgetClasses_Icon) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_Icon) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_Icon) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses_Icon) methodsFor: 'unclassified'!
	 naturalExtent 

^ self  image  ifNotNil:[ : it | 

 it extent.

] ifNil:[ 

0 @0.

].



! 
 Brazil_WidgetClasses_Icon_superInit_new 

super  new.

^ self.



! 
 computeNaturalExtent 

^ self  image  ifNotNil:[ 

 self  image extent.

] ifNil:[ 

0 @0.

].



! 
 image 

^ self  imageA value.



! 
imageA: imageA_val imageA := imageA_val! 
 setupAreaForCompositeVisual 

 self setArea:( (EnclosingObjects_Brazil_WidgetClasses_Icon at: 1)  Anchor visual: self).

^ self.



! 
 Brazil_WidgetClasses_Icon_1_init 

 self imageA:( (EnclosingObjects_Brazil_WidgetClasses_Icon at: 1)  Attribute  name:#'image' value:nil).

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForIcon: self.

^ self.



! 
imageA ^imageA! 
 image: aForm 

|  oldExtent |

 oldExtent := self  naturalExtent.

 self  imageA value: aForm.

 oldExtent = self  naturalExtent ifFalse:[ 

 self reportNaturalExtentChange.

].

^ self.



! 
 new 

 self Brazil_WidgetClasses_Icon_superInit_new.

 self Brazil_WidgetClasses_Icon_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_Icon) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_Icon := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_Icon := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_Icon. ! 
	Brazil_WidgetClasses_Icon metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_RectangleShape as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_RectangleShape EnclosingObjects_Brazil_WidgetClasses_RectangleShape')!
	(Delta mirrorFor: #Brazil_WidgetClasses_RectangleShape) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_RectangleShape) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_RectangleShape) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses_RectangleShape) methodsFor: 'unclassified'!
	 createAgentUsing: aMapping 

 aMapping createAgentForRectangleShape: self.

^ self.



! 
 Brazil_WidgetClasses_RectangleShape_1_init 

^ self.



! 
 new 

 self Brazil_WidgetClasses_RectangleShape_superInit_new.

 self Brazil_WidgetClasses_RectangleShape_1_init.

^ self.



! 
 Brazil_WidgetClasses_RectangleShape_superInit_new 

super  new.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_RectangleShape) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_RectangleShape := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_RectangleShape := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_RectangleShape. ! 
	Brazil_WidgetClasses_RectangleShape metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_SensitiveLabel as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' entryAction exitAction mouseMovedAction mouseDownAction mouseUpAction')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_SensitiveLabel EnclosingObjects_Brazil_WidgetClasses_SensitiveLabel')!
	(Delta mirrorFor: #Brazil_WidgetClasses_SensitiveLabel) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_SensitiveLabel) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_SensitiveLabel) comment: 'A sensitive label is a Label that listens to mouse input events.

   Copyright 2008 Cadence Design Systems, Inc.
   
   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0'!
	! (Delta mirrorFor: #Brazil_WidgetClasses_SensitiveLabel) methodsFor: 'unclassified'!
	exitAction: exitAction_val exitAction := exitAction_val! 
mouseMovedAction ^mouseMovedAction! 
 mouseEntryResponse: response 

 self  entryAction: response.

^ self.



! 
mouseMovedAction: mouseMovedAction_val mouseMovedAction := mouseMovedAction_val! 
 respondToMouseMove 

 self  mouseMovedAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 mouseMoveResponse: response 

 self  mouseMovedAction: response.

^ self.



! 
 respondToMouseExit 

 self  exitAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 Brazil_WidgetClasses_SensitiveLabel_superInit_new 

super  new.

^ self.



! 
 mouseDownLeftResponse: response 

 self  mouseDownAction: response.

^ self.



! 
 respondToMouseDownLeft 

 self  mouseDownAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForActiveLabel: self.

^ self.



! 
mouseDownAction ^mouseDownAction! 
 new 

 self Brazil_WidgetClasses_SensitiveLabel_superInit_new.

 self Brazil_WidgetClasses_SensitiveLabel_1_init.

^ self.



! 
mouseDownAction: mouseDownAction_val mouseDownAction := mouseDownAction_val! 
 mouseExitResponse: response 

 self  exitAction: response.

^ self.



! 
 mouseUpLeftResponse: response 

 self  mouseUpAction: response.

^ self.



! 
mouseUpAction ^mouseUpAction! 
entryAction: entryAction_val entryAction := entryAction_val! 
mouseUpAction: mouseUpAction_val mouseUpAction := mouseUpAction_val! 
 respondToMouseEntry 

 self  entryAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 isActive 

^true.



! 
 respondToMouseUpLeft 

 self  mouseUpAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
exitAction ^exitAction! 
 Brazil_WidgetClasses_SensitiveLabel_1_init 

 self entryAction:nil.

 self exitAction:nil.

 self mouseDownAction:nil.

 self mouseUpAction:nil.

 self mouseMovedAction:nil.

^ self.



! 
entryAction ^entryAction! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_SensitiveLabel) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_SensitiveLabel := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_SensitiveLabel := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_SensitiveLabel. ! 
	Brazil_WidgetClasses_SensitiveLabel metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_EllipseShape as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_EllipseShape EnclosingObjects_Brazil_WidgetClasses_EllipseShape')!
	(Delta mirrorFor: #Brazil_WidgetClasses_EllipseShape) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_EllipseShape) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_EllipseShape) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses_EllipseShape) methodsFor: 'unclassified'!
	 createAgentUsing: aMapping 

 aMapping createAgentForEllipseShape: self.

^ self.



! 
 Brazil_WidgetClasses_EllipseShape_superInit_new 

super  new.

^ self.



! 
 Brazil_WidgetClasses_EllipseShape_1_init 

^ self.



! 
 new 

 self Brazil_WidgetClasses_EllipseShape_superInit_new.

 self Brazil_WidgetClasses_EllipseShape_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_EllipseShape) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_EllipseShape := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_EllipseShape := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_EllipseShape. ! 
	Brazil_WidgetClasses_EllipseShape metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_WidgetClasses_Blank as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:'')
	 classVariables: 'MixinMetadata_Brazil_WidgetClasses_Blank EnclosingObjects_Brazil_WidgetClasses_Blank')!
	(Delta mirrorFor: #Brazil_WidgetClasses_Blank) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_WidgetClasses_Blank) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_WidgetClasses_Blank) comment: #''!
	! (Delta mirrorFor: #Brazil_WidgetClasses_Blank) methodsFor: 'unclassified'!
	 naturalExtent 

^0 @0.



! 
 Brazil_WidgetClasses_Blank_superInit_new 

super  new.

^ self.



! 
 new 

 self Brazil_WidgetClasses_Blank_superInit_new.

 self Brazil_WidgetClasses_Blank_1_init.

^ self.



! 
 Brazil_WidgetClasses_Blank_1_init 

^ self.



! 
 createAgentUsing: aMapping 

 aMapping createAgentForBlank: self.

^ self.



! 
 isBlank 

^true.



! 
 computeNaturalExtent 

^0 @0.



! 
 childrenDo: aBlock 

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_WidgetClasses_Blank) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_WidgetClasses_Blank := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_WidgetClasses_Blank := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_WidgetClasses metadata addNestedClass: Brazil_WidgetClasses_Blank. ! 
	Brazil_WidgetClasses_Blank metadata enclosingMixin: Brazil_WidgetClasses !
	Delta define: #Brazil_AbilityClasses as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' Brazil_AbilityClasses_Mousability_slot Brazil_AbilityClasses_Draggability_slot Brazil_AbilityClasses_Ability_slot Brazil_AbilityClasses_ClickabilityAndDraggability_slot Brazil_AbilityClasses_Clickability_slot Brazil_AbilityClasses_FSM_slot')
	 classVariables: 'MixinMetadata_Brazil_AbilityClasses EnclosingObjects_Brazil_AbilityClasses')!
	(Delta mirrorFor: #Brazil_AbilityClasses) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AbilityClasses) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AbilityClasses) comment: '*** EXPERIMENTAL/WORK IN PROGRESS: This code is not yet used by the core system, and may be significantly revised or removed *** This module implements and manages Abilities. Abilities are low-level input event interpreters that translate sequences of events such as mouse presse, releases and moves, into higher-level gestures such as button clicks and drag attempts.

   Copyright 2008 Cadence Design Systems, Inc.

   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0'!
	! (Delta mirrorFor: #Brazil_AbilityClasses) methodsFor: 'unclassified'!
	 Brazil_AbilityClasses_superInit_new 

super  new.

^ self.



! 
Ability
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AbilityClasses_Ability_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AbilityClasses 
			nestedMixins at: #Brazil_AbilityClasses_Ability.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AbilityClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AbilityClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AbilityClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AbilityClasses_Ability_slot := myNested.
		].
	^Brazil_AbilityClasses_Ability_slot! 
Clickability
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AbilityClasses_Clickability_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AbilityClasses 
			nestedMixins at: #Brazil_AbilityClasses_Clickability.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AbilityClasses Mirror on: self  Mousability)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AbilityClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AbilityClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AbilityClasses_Clickability_slot := myNested.
		].
	^Brazil_AbilityClasses_Clickability_slot! 
Draggability
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AbilityClasses_Draggability_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AbilityClasses 
			nestedMixins at: #Brazil_AbilityClasses_Draggability.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AbilityClasses Mirror on: self  Mousability)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AbilityClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AbilityClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AbilityClasses_Draggability_slot := myNested.
		].
	^Brazil_AbilityClasses_Draggability_slot! 
Mousability
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AbilityClasses_Mousability_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AbilityClasses 
			nestedMixins at: #Brazil_AbilityClasses_Mousability.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AbilityClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AbilityClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AbilityClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AbilityClasses_Mousability_slot := myNested.
		].
	^Brazil_AbilityClasses_Mousability_slot! 
ClickabilityAndDraggability
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AbilityClasses_ClickabilityAndDraggability_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AbilityClasses 
			nestedMixins at: #Brazil_AbilityClasses_ClickabilityAndDraggability.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AbilityClasses Mirror on: self  Mousability)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AbilityClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AbilityClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AbilityClasses_ClickabilityAndDraggability_slot := myNested.
		].
	^Brazil_AbilityClasses_ClickabilityAndDraggability_slot! 
 Brazil_AbilityClasses_1_init 

^ self.



! 
FSM
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AbilityClasses_FSM_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AbilityClasses 
			nestedMixins at: #Brazil_AbilityClasses_FSM.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AbilityClasses Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AbilityClasses size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AbilityClasses at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AbilityClasses_FSM_slot := myNested.
		].
	^Brazil_AbilityClasses_FSM_slot! 
 new 

 self Brazil_AbilityClasses_superInit_new.

 self Brazil_AbilityClasses_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_AbilityClasses) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AbilityClasses := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AbilityClasses := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil metadata addNestedClass: Brazil_AbilityClasses. ! 
	Brazil_AbilityClasses metadata enclosingMixin: Brazil !
	Delta define: #Brazil_AbilityClasses_FSM as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' states Brazil_AbilityClasses_FSM_State_slot initialState currentState')
	 classVariables: 'MixinMetadata_Brazil_AbilityClasses_FSM EnclosingObjects_Brazil_AbilityClasses_FSM')!
	(Delta mirrorFor: #Brazil_AbilityClasses_FSM) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AbilityClasses_FSM) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AbilityClasses_FSM) comment: 'Finite state machines are used by abilities to describe the interpretation of input they perform.'!
	! (Delta mirrorFor: #Brazil_AbilityClasses_FSM) methodsFor: 'unclassified'!
	 Brazil_AbilityClasses_FSM_superInit_new 

super  new.

^ self.



! 
initialState: initialState_val initialState := initialState_val! 
states ^states! 
currentState ^currentState! 
State
	| nestedClass enclosingObjectArray myNested depth |
	Brazil_AbilityClasses_FSM_State_slot isNil ifTrue:[ 
		nestedClass := 	MixinMetadata_Brazil_AbilityClasses_FSM 
			nestedMixins at: #Brazil_AbilityClasses_FSM_State.
		myNested := (nestedClass mixin |>  (MixinMetadata_Brazil_AbilityClasses_FSM Mirror on: self Object)) reflectee.
		myNested mixinMetadata: nestedClass reflectee metadata.
		depth := EnclosingObjects_Brazil_AbilityClasses_FSM size + 1.
		enclosingObjectArray :=  Array new: depth. 
		enclosingObjectArray at:1 put: self. 
		2 to: depth do:[:i | 
			enclosingObjectArray at:i put:(EnclosingObjects_Brazil_AbilityClasses_FSM at: i - 1)
			].
		 myNested enclosingObjects: enclosingObjectArray.
		Brazil_AbilityClasses_FSM_State_slot := myNested.
		].
	^Brazil_AbilityClasses_FSM_State_slot! 
 enterState: newCurrentState 

 self  currentState = newCurrentState ifFalse:[ 

 self  currentState respondToExit.

 self  currentState: newCurrentState.

 self  currentState respondToEntry.

].

^ self.



! 
 reset 

 self  currentState: self  initialState.

^ self.



! 
 Brazil_AbilityClasses_FSM_1_init 

 self states: (EnclosingObjects_Brazil_AbilityClasses_FSM at: 2)  OrderedCollection new.

 self initialState:nil.

 self currentState:nil.

^ self.



! 
states: states_val states := states_val! 
initialState ^initialState! 
 setInitialState: state 

 self  initialState: state.

 self  currentState: state.

^ self.



! 
 processEvent: event 

 self  currentState processEvent: event.

^ self.



! 
currentState: currentState_val currentState := currentState_val! 
 newState 

|  state |

 state := self  State new.

 self  states add: state.

 self  initialState isNil ifTrue:[ 

 self  setInitialState: state.

].

^ state.



! 
 new 

 self Brazil_AbilityClasses_FSM_superInit_new.

 self Brazil_AbilityClasses_FSM_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_AbilityClasses_FSM) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AbilityClasses_FSM := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AbilityClasses_FSM := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_AbilityClasses metadata addNestedClass: Brazil_AbilityClasses_FSM. ! 
	Brazil_AbilityClasses_FSM metadata enclosingMixin: Brazil_AbilityClasses !
	Delta define: #Brazil_AbilityClasses_FSM_State as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' eventResponses exitAction entryAction')
	 classVariables: 'MixinMetadata_Brazil_AbilityClasses_FSM_State EnclosingObjects_Brazil_AbilityClasses_FSM_State')!
	(Delta mirrorFor: #Brazil_AbilityClasses_FSM_State) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AbilityClasses_FSM_State) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AbilityClasses_FSM_State) comment: #''!
	! (Delta mirrorFor: #Brazil_AbilityClasses_FSM_State) methodsFor: 'unclassified'!
	exitAction: exitAction_val exitAction := exitAction_val! 
  on: event do: action 

^ self  eventResponses  at: event put: action.



! 
eventResponses: eventResponses_val eventResponses := eventResponses_val! 
entryAction ^entryAction! 
exitAction ^exitAction! 
 enterState: newCurrentState 

 (EnclosingObjects_Brazil_AbilityClasses_FSM_State at: 1)  enterState: newCurrentState.

^ self.



! 
entryAction: entryAction_val entryAction := entryAction_val! 
eventResponses ^eventResponses! 
 Brazil_AbilityClasses_FSM_State_superInit_new 

super  new.

^ self.



! 
 respondToExit 

 self  exitAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 enter 

 self  enterState: self.

^ self.



! 
 Brazil_AbilityClasses_FSM_State_1_init 

 self eventResponses: (EnclosingObjects_Brazil_AbilityClasses_FSM_State at: 3)  Dictionary new.

 self entryAction:nil.

 self exitAction:nil.

^ self.



! 
 processEvent: event 

( self  eventResponses  at: event ifAbsent:[ 

^ self.

]) value.

^ self.



! 
 respondToEntry 

 self  entryAction ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 new 

 self Brazil_AbilityClasses_FSM_State_superInit_new.

 self Brazil_AbilityClasses_FSM_State_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_AbilityClasses_FSM_State) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AbilityClasses_FSM_State := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AbilityClasses_FSM_State := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_AbilityClasses_FSM metadata addNestedClass: Brazil_AbilityClasses_FSM_State. ! 
	Brazil_AbilityClasses_FSM_State metadata enclosingMixin: Brazil_AbilityClasses_FSM !
	Delta define: #Brazil_AbilityClasses_Mousability as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' behavior')
	 classVariables: 'MixinMetadata_Brazil_AbilityClasses_Mousability EnclosingObjects_Brazil_AbilityClasses_Mousability')!
	(Delta mirrorFor: #Brazil_AbilityClasses_Mousability) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AbilityClasses_Mousability) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AbilityClasses_Mousability) comment: #''!
	! (Delta mirrorFor: #Brazil_AbilityClasses_Mousability) methodsFor: 'unclassified'!
	behavior: behavior_val behavior := behavior_val! 
 detachFrom: presumedOwner 

 presumedOwner == self owner ifTrue:[ 

 self owner mouseDownLeftResponse:nil; 

 mouseUpLeftResponse:nil; 

 mouseMoveResponse:nil; 

 mouseEntryResponse:nil; 

 mouseExitResponse:nil.

 self  resetResponses.

 self owner:nil.

].

^ self.



! 
 respondToMouseEntry 

 self  behavior processEvent:#'mouseEntry'.

^ self.



! 
 attachTo: newOwner 

super  attachTo: newOwner.

 self  behavior reset.

 self owner mouseDownLeftResponse:[ 

 self  respondToMouseDownLeft.

]; 

 mouseUpLeftResponse:[ 

 self  respondToMouseUpLeft.

]; 

 mouseMoveResponse:[ 

 self  respondToMouseMove.

]; 

 mouseEntryResponse:[ 

 self  respondToMouseEntry.

]; 

 mouseExitResponse:[ 

 self  respondToMouseExit.

].

^ self.



! 
 respondToMouseMove 

 self  behavior processEvent:#'mouseMove'.

^ self.



! 
 resetResponses 

^ self.



! 
 respondToMouseExit 

 self  behavior processEvent:#'mouseExit'.

^ self.



! 
 defineBehavior 

 self subclassResponsibility.

^ self.



! 
 Brazil_AbilityClasses_Mousability_superInit_new 

super  new.

^ self.



! 
behavior ^behavior! 
 Brazil_AbilityClasses_Mousability_1_init 

 self behavior: (EnclosingObjects_Brazil_AbilityClasses_Mousability at: 1)  FSM new.

^ self.



! 
 respondToMouseUpLeft 

 self  behavior processEvent:#'mouseUp'.

^ self.



! 
 respondToMouseDownLeft 

 self  behavior processEvent:#'mouseDown'.

^ self.



! 
 new 

 self Brazil_AbilityClasses_Mousability_superInit_new.

 self Brazil_AbilityClasses_Mousability_1_init.

 self  defineBehavior.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_AbilityClasses_Mousability) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AbilityClasses_Mousability := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AbilityClasses_Mousability := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_AbilityClasses metadata addNestedClass: Brazil_AbilityClasses_Mousability. ! 
	Brazil_AbilityClasses_Mousability metadata enclosingMixin: Brazil_AbilityClasses !
	Delta define: #Brazil_AbilityClasses_Clickability as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' clickResponse releaseResponse pressResponse')
	 classVariables: 'MixinMetadata_Brazil_AbilityClasses_Clickability EnclosingObjects_Brazil_AbilityClasses_Clickability')!
	(Delta mirrorFor: #Brazil_AbilityClasses_Clickability) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AbilityClasses_Clickability) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AbilityClasses_Clickability) comment: 'Clickability translates low-level events into click gestures. A click gesture follows the standard behavior of push buttons, where a button is clicked on a mouse up event that occurs within the button''s bounds after a prior mouse down event within the bounds. Moving the mouse outside the bounds and then releasing the mouse button effectively cancels the click in progress.

   Copyright 2008 Cadence Design Systems, Inc.

   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0'!
	! (Delta mirrorFor: #Brazil_AbilityClasses_Clickability) methodsFor: 'unclassified'!
	clickResponse ^clickResponse! 
pressResponse: pressResponse_val pressResponse := pressResponse_val! 
 hasMouse 

^ self owner localBounds containsPoint: self owner mousePoint.



! 
 invokePressResponse 

 self  pressResponse ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 resetResponses 

 self  clickResponse:nil.

 self  pressResponse:nil.

 self  releaseResponse:nil.

^ self.



! 
 invokeReleaseResponse 

 self  releaseResponse ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 defineBehavior 

|  normal  down  outside |

 normal := self behavior newState.

 down := self behavior newState.

 outside := self behavior newState.

 normal exitAction:[ 

 self owner grabMouse.

]; 

 entryAction:[ 

 self owner releaseMouse.

]; 

  on:#'mouseDown' do:[ 

[ 

 self  invokePressResponse.

] ensure:[ 

 down enter.

].

].

 down  on:#'mouseUp' do:[ 

[ 

 self  invokeReleaseResponse.

 self  invokeClickResponse.

] ensure:[ 

 normal enter.

].

]; 

  on:#'mouseMove' do:[ 

 self  hasMouse ifFalse:[ 

[ 

 self  invokeReleaseResponse.

] ensure:[ 

 outside enter.

].

].

].

 outside  on:#'mouseUp' do:[ 

[ 

 self  invokeReleaseResponse.

] ensure:[ 

 normal enter.

].

]; 

  on:#'mouseMove' do:[ 

 self  hasMouse ifTrue:[ 

[ 

 self  invokePressResponse.

] ensure:[ 

 down enter.

].

].

].

^ self.



! 
releaseResponse ^releaseResponse! 
releaseResponse: releaseResponse_val releaseResponse := releaseResponse_val! 
 Brazil_AbilityClasses_Clickability_1_init 

 self clickResponse:nil.

 self pressResponse:nil.

 self releaseResponse:nil.

^ self.



! 
 invokeClickResponse 

 self  clickResponse ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 Brazil_AbilityClasses_Clickability_superInit_new 

super  new.

^ self.



! 
pressResponse ^pressResponse! 
clickResponse: clickResponse_val clickResponse := clickResponse_val! 
 new 

 self Brazil_AbilityClasses_Clickability_superInit_new.

 self Brazil_AbilityClasses_Clickability_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_AbilityClasses_Clickability) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AbilityClasses_Clickability := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AbilityClasses_Clickability := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_AbilityClasses metadata addNestedClass: Brazil_AbilityClasses_Clickability. ! 
	Brazil_AbilityClasses_Clickability metadata enclosingMixin: Brazil_AbilityClasses !
	Delta define: #Brazil_AbilityClasses_Ability as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' owner')
	 classVariables: 'MixinMetadata_Brazil_AbilityClasses_Ability EnclosingObjects_Brazil_AbilityClasses_Ability')!
	(Delta mirrorFor: #Brazil_AbilityClasses_Ability) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AbilityClasses_Ability) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AbilityClasses_Ability) comment: 'This is the abstract superclass of abilities. Any ability is attached to the owner, which is the source of the low-level events it interprets. The owner is often a Visual'!
	! (Delta mirrorFor: #Brazil_AbilityClasses_Ability) methodsFor: 'unclassified'!
	 Brazil_AbilityClasses_Ability_1_init 

 self owner:nil.

^ self.



! 
owner: owner_val owner := owner_val! 
 detachFrom: presumedOwner 

^ self.



! 
 Brazil_AbilityClasses_Ability_superInit_new 

super  new.

^ self.



! 
 atttachTo: newOwner 

 self  owner: newOwner.

^ self.



! 
owner ^owner! 
 new 

 self Brazil_AbilityClasses_Ability_superInit_new.

 self Brazil_AbilityClasses_Ability_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_AbilityClasses_Ability) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AbilityClasses_Ability := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AbilityClasses_Ability := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_AbilityClasses metadata addNestedClass: Brazil_AbilityClasses_Ability. ! 
	Brazil_AbilityClasses_Ability metadata enclosingMixin: Brazil_AbilityClasses !
	Delta define: #Brazil_AbilityClasses_Draggability as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' dragContinueResponse dragStartResponse dropResponse')
	 classVariables: 'MixinMetadata_Brazil_AbilityClasses_Draggability EnclosingObjects_Brazil_AbilityClasses_Draggability')!
	(Delta mirrorFor: #Brazil_AbilityClasses_Draggability) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AbilityClasses_Draggability) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AbilityClasses_Draggability) comment: 'Draggability is the ability of a visual to initiate a drag once the mouse button has been pressed over it and then the mouse moved further than a certain threshold distance.'!
	! (Delta mirrorFor: #Brazil_AbilityClasses_Draggability) methodsFor: 'unclassified'!
	dragContinueResponse ^dragContinueResponse! 
dragStartResponse ^dragStartResponse! 
dropResponse ^dropResponse! 
dragContinueResponse: dragContinueResponse_val dragContinueResponse := dragContinueResponse_val! 
dragStartResponse: dragStartResponse_val dragStartResponse := dragStartResponse_val! 
 invokeDropResponse 

 self  dropResponse ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 resetResponses 

 self  dragStartResponse:nil.

 self  dragContinueResponse:nil.

 self  dropResponse:nil.

^ self.



! 
 Brazil_AbilityClasses_Draggability_1_init 

 self dragStartResponse:nil.

 self dragContinueResponse:nil.

 self dropResponse:nil.

^ self.



! 
 defineBehavior 

|  normalState  activatedState  draggingState  downPoint |

 normalState := self behavior newState.

 activatedState := self behavior newState.

 draggingState := self behavior newState.

 normalState entryAction:[ 

 self owner releaseMouse.

]; 

 exitAction:[ 

 self owner grabMouse.

]; 

  on:#'mouseDown' do:[ 

 downPoint := self owner mousePoint.

 activatedState enter.

].

 activatedState  on:#'mouseMove' do:[ 

( self   is: self owner mousePoint beyondDragThresholdFrom: downPoint) ifTrue:[ 

 draggingState enter.

].

]; 

  on:#'mouseUp' do:[ 

 normalState enter.

].

 draggingState entryAction:[ 

 self  invokeDragStartResponse.

]; 

  on:#'mouseMove' do:[ 

 self  invokeDragContinueResponse.

]; 

  on:#'mouseUp' do:[ 

 self  invokeDropResponse.

 normalState enter.

].

^ self.



! 
 dragThreshold 

^5.



! 
 invokeDragStartResponse 

 self  dragStartResponse ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 Brazil_AbilityClasses_Draggability_superInit_new 

super  new.

^ self.



! 
 new 

 self Brazil_AbilityClasses_Draggability_superInit_new.

 self Brazil_AbilityClasses_Draggability_1_init.

^ self.



! 
  is: point1 beyondDragThresholdFrom: point2 

^( point1 x -  point2 x) abs > self  dragThreshold or:[ 

( point1 y -  point2 y) abs > self  dragThreshold.

].



! 
dropResponse: dropResponse_val dropResponse := dropResponse_val! 
 invokeDragContinueResponse 

 self  dragContinueResponse ifNotNil:[ : it | 

 it reentrant value.

].

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_AbilityClasses_Draggability) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AbilityClasses_Draggability := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AbilityClasses_Draggability := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_AbilityClasses metadata addNestedClass: Brazil_AbilityClasses_Draggability. ! 
	Brazil_AbilityClasses_Draggability metadata enclosingMixin: Brazil_AbilityClasses !
	Delta define: #Brazil_AbilityClasses_ClickabilityAndDraggability as: (
	(Class subclassOf: 'NewspeakObject' instanceVariables:' mouseGrabLevel')
	 classVariables: 'MixinMetadata_Brazil_AbilityClasses_ClickabilityAndDraggability EnclosingObjects_Brazil_AbilityClasses_ClickabilityAndDraggability')!
	(Delta mirrorFor: #Brazil_AbilityClasses_ClickabilityAndDraggability) revision: '$Revision: 0.0 $'!
	(Delta mirrorFor: #Brazil_AbilityClasses_ClickabilityAndDraggability) group: 'newspeak'!
	(Delta mirrorFor: #Brazil_AbilityClasses_ClickabilityAndDraggability) comment: 'This class aggregates the two other abilities by becoming the owner of their instances and coordinating their actions and requests.

   Copyright 2008 Cadence Design Systems, Inc.

   Licensed under the Apache License, Version 2.0 (the ''''License''''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0'!
	! (Delta mirrorFor: #Brazil_AbilityClasses_ClickabilityAndDraggability) methodsFor: 'unclassified'!
	mouseGrabLevel: mouseGrabLevel_val mouseGrabLevel := mouseGrabLevel_val! 
 grabMouse 

 self  mouseGrabLevel:( self  mouseGrabLevel +1).

 self  mouseGrabLevel =1 ifTrue:[ 

 self owner grabMouse.

].

^ self.



! 
 attachTo: newOwner 

super  attachTo: newOwner.

 self  mouseGrabLevel:0.

 self  attachClickability.

 self  attachDraggability.

^ self.



! 
 respondToMouseMove 

 self clickability respondToMouseMove.

 self draggability respondToMouseMove.

^ self.



! 
 resetResponses 

 self clickability detachFrom: self.

 self draggability detachFrom: self.

^ self.



! 
 respondToMouseExit 

 self clickability respondToMouseExit.

 self draggability respondToMouseExit.

^ self.



! 
 attachClickability 

 self clickability attachTo: self.

 self clickability pressResponse:[ 

 self respondToPress.

]; 

 releaseResponse:[ 

 self respondToRelease.

]; 

 clickResponse:[ 

 self respondToClick.

].

^ self.



! 
 respondToMouseEntry 

 self clickability respondToMouseEntry.

 self draggability respondToMouseEntry.

^ self.



! 
 Brazil_AbilityClasses_ClickabilityAndDraggability_superInit_new 

super  new.

^ self.



! 
 attachDraggability 

 self draggability attachTo: self.

^ self.



! 
 respondToMouseUpLeft 

 self clickability respondToMouseUpLeft.

 self draggability respondToMouseUpLeft.

^ self.



! 
 Brazil_AbilityClasses_ClickabilityAndDraggability_1_init 

 self mouseGrabLevel:0.

^ self.



! 
 releaseMouse 

 self  mouseGrabLevel:( self  mouseGrabLevel - 1).

 self  mouseGrabLevel =0 ifTrue:[ 

 self owner releaseMouse.

].

^ self.



! 
mouseGrabLevel ^mouseGrabLevel! 
 respondToMouseDownLeft 

 self clickability respondToMouseDownLeft.

 self draggability respondToMouseDownLeft.

^ self.



! 
 new 

 self Brazil_AbilityClasses_ClickabilityAndDraggability_superInit_new.

 self Brazil_AbilityClasses_ClickabilityAndDraggability_1_init.

^ self.



! 
 !
	! (Delta mirrorFor: #Brazil_AbilityClasses_ClickabilityAndDraggability) classSide methodsFor: 'unclassified'!
	enclosingObjects: eos EnclosingObjects_Brazil_AbilityClasses_ClickabilityAndDraggability := eos !
	mixinMetadata: mmd MixinMetadata_Brazil_AbilityClasses_ClickabilityAndDraggability := mmd !
	 new 

^ self basicNew new.



! 
		 !
	Brazil_AbilityClasses metadata addNestedClass: Brazil_AbilityClasses_ClickabilityAndDraggability. ! 
	Brazil_AbilityClasses_ClickabilityAndDraggability metadata enclosingMixin: Brazil_AbilityClasses !
	